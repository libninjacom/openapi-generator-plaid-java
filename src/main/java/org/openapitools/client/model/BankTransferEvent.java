/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.BankTransferDirection;
import org.openapitools.client.model.BankTransferEventType;
import org.openapitools.client.model.BankTransferFailure;
import org.openapitools.client.model.BankTransferType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an event in the Bank Transfers API.
 */
@ApiModel(description = "Represents an event in the Bank Transfers API.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class BankTransferEvent {
  public static final String SERIALIZED_NAME_EVENT_ID = "event_id";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private Integer eventId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private BankTransferEventType eventType;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_BANK_TRANSFER_ID = "bank_transfer_id";
  @SerializedName(SERIALIZED_NAME_BANK_TRANSFER_ID)
  private String bankTransferId;

  public static final String SERIALIZED_NAME_ORIGINATION_ACCOUNT_ID = "origination_account_id";
  @SerializedName(SERIALIZED_NAME_ORIGINATION_ACCOUNT_ID)
  private String originationAccountId;

  public static final String SERIALIZED_NAME_BANK_TRANSFER_TYPE = "bank_transfer_type";
  @SerializedName(SERIALIZED_NAME_BANK_TRANSFER_TYPE)
  private BankTransferType bankTransferType;

  public static final String SERIALIZED_NAME_BANK_TRANSFER_AMOUNT = "bank_transfer_amount";
  @SerializedName(SERIALIZED_NAME_BANK_TRANSFER_AMOUNT)
  private String bankTransferAmount;

  public static final String SERIALIZED_NAME_BANK_TRANSFER_ISO_CURRENCY_CODE = "bank_transfer_iso_currency_code";
  @SerializedName(SERIALIZED_NAME_BANK_TRANSFER_ISO_CURRENCY_CODE)
  private String bankTransferIsoCurrencyCode;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failure_reason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private BankTransferFailure failureReason;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private BankTransferDirection direction;

  public BankTransferEvent() { 
  }

  public BankTransferEvent eventId(Integer eventId) {
    
    this.eventId = eventId;
    return this;
  }

   /**
   * Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
   * minimum: 0
   * @return eventId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.")

  public Integer getEventId() {
    return eventId;
  }


  public void setEventId(Integer eventId) {
    this.eventId = eventId;
  }


  public BankTransferEvent timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The datetime when this event occurred. This will be of the form &#x60;2006-01-02T15:04:05Z&#x60;.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public BankTransferEvent eventType(BankTransferEventType eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BankTransferEventType getEventType() {
    return eventType;
  }


  public void setEventType(BankTransferEventType eventType) {
    this.eventType = eventType;
  }


  public BankTransferEvent accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * The account ID associated with the bank transfer.
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The account ID associated with the bank transfer.")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public BankTransferEvent bankTransferId(String bankTransferId) {
    
    this.bankTransferId = bankTransferId;
    return this;
  }

   /**
   * Plaid’s unique identifier for a bank transfer.
   * @return bankTransferId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Plaid’s unique identifier for a bank transfer.")

  public String getBankTransferId() {
    return bankTransferId;
  }


  public void setBankTransferId(String bankTransferId) {
    this.bankTransferId = bankTransferId;
  }


  public BankTransferEvent originationAccountId(String originationAccountId) {
    
    this.originationAccountId = originationAccountId;
    return this;
  }

   /**
   * The ID of the origination account that this balance belongs to.
   * @return originationAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The ID of the origination account that this balance belongs to.")

  public String getOriginationAccountId() {
    return originationAccountId;
  }


  public void setOriginationAccountId(String originationAccountId) {
    this.originationAccountId = originationAccountId;
  }


  public BankTransferEvent bankTransferType(BankTransferType bankTransferType) {
    
    this.bankTransferType = bankTransferType;
    return this;
  }

   /**
   * Get bankTransferType
   * @return bankTransferType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BankTransferType getBankTransferType() {
    return bankTransferType;
  }


  public void setBankTransferType(BankTransferType bankTransferType) {
    this.bankTransferType = bankTransferType;
  }


  public BankTransferEvent bankTransferAmount(String bankTransferAmount) {
    
    this.bankTransferAmount = bankTransferAmount;
    return this;
  }

   /**
   * The bank transfer amount.
   * @return bankTransferAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The bank transfer amount.")

  public String getBankTransferAmount() {
    return bankTransferAmount;
  }


  public void setBankTransferAmount(String bankTransferAmount) {
    this.bankTransferAmount = bankTransferAmount;
  }


  public BankTransferEvent bankTransferIsoCurrencyCode(String bankTransferIsoCurrencyCode) {
    
    this.bankTransferIsoCurrencyCode = bankTransferIsoCurrencyCode;
    return this;
  }

   /**
   * The currency of the bank transfer amount.
   * @return bankTransferIsoCurrencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The currency of the bank transfer amount.")

  public String getBankTransferIsoCurrencyCode() {
    return bankTransferIsoCurrencyCode;
  }


  public void setBankTransferIsoCurrencyCode(String bankTransferIsoCurrencyCode) {
    this.bankTransferIsoCurrencyCode = bankTransferIsoCurrencyCode;
  }


  public BankTransferEvent failureReason(BankTransferFailure failureReason) {
    
    this.failureReason = failureReason;
    return this;
  }

   /**
   * Get failureReason
   * @return failureReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public BankTransferFailure getFailureReason() {
    return failureReason;
  }


  public void setFailureReason(BankTransferFailure failureReason) {
    this.failureReason = failureReason;
  }


  public BankTransferEvent direction(BankTransferDirection direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public BankTransferDirection getDirection() {
    return direction;
  }


  public void setDirection(BankTransferDirection direction) {
    this.direction = direction;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public BankTransferEvent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankTransferEvent bankTransferEvent = (BankTransferEvent) o;
    return Objects.equals(this.eventId, bankTransferEvent.eventId) &&
        Objects.equals(this.timestamp, bankTransferEvent.timestamp) &&
        Objects.equals(this.eventType, bankTransferEvent.eventType) &&
        Objects.equals(this.accountId, bankTransferEvent.accountId) &&
        Objects.equals(this.bankTransferId, bankTransferEvent.bankTransferId) &&
        Objects.equals(this.originationAccountId, bankTransferEvent.originationAccountId) &&
        Objects.equals(this.bankTransferType, bankTransferEvent.bankTransferType) &&
        Objects.equals(this.bankTransferAmount, bankTransferEvent.bankTransferAmount) &&
        Objects.equals(this.bankTransferIsoCurrencyCode, bankTransferEvent.bankTransferIsoCurrencyCode) &&
        Objects.equals(this.failureReason, bankTransferEvent.failureReason) &&
        Objects.equals(this.direction, bankTransferEvent.direction)&&
        Objects.equals(this.additionalProperties, bankTransferEvent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, timestamp, eventType, accountId, bankTransferId, originationAccountId, bankTransferType, bankTransferAmount, bankTransferIsoCurrencyCode, failureReason, direction, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankTransferEvent {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    bankTransferId: ").append(toIndentedString(bankTransferId)).append("\n");
    sb.append("    originationAccountId: ").append(toIndentedString(originationAccountId)).append("\n");
    sb.append("    bankTransferType: ").append(toIndentedString(bankTransferType)).append("\n");
    sb.append("    bankTransferAmount: ").append(toIndentedString(bankTransferAmount)).append("\n");
    sb.append("    bankTransferIsoCurrencyCode: ").append(toIndentedString(bankTransferIsoCurrencyCode)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("event_id");
    openapiFields.add("timestamp");
    openapiFields.add("event_type");
    openapiFields.add("account_id");
    openapiFields.add("bank_transfer_id");
    openapiFields.add("origination_account_id");
    openapiFields.add("bank_transfer_type");
    openapiFields.add("bank_transfer_amount");
    openapiFields.add("bank_transfer_iso_currency_code");
    openapiFields.add("failure_reason");
    openapiFields.add("direction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("event_id");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("event_type");
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("bank_transfer_id");
    openapiRequiredFields.add("origination_account_id");
    openapiRequiredFields.add("bank_transfer_type");
    openapiRequiredFields.add("bank_transfer_amount");
    openapiRequiredFields.add("bank_transfer_iso_currency_code");
    openapiRequiredFields.add("failure_reason");
    openapiRequiredFields.add("direction");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BankTransferEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BankTransferEvent.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankTransferEvent is not found in the empty JSON string", BankTransferEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BankTransferEvent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (jsonObj.get("bank_transfer_id") != null && !jsonObj.get("bank_transfer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_transfer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_transfer_id").toString()));
      }
      if (jsonObj.get("origination_account_id") != null && !jsonObj.get("origination_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origination_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origination_account_id").toString()));
      }
      if (jsonObj.get("bank_transfer_amount") != null && !jsonObj.get("bank_transfer_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_transfer_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_transfer_amount").toString()));
      }
      if (jsonObj.get("bank_transfer_iso_currency_code") != null && !jsonObj.get("bank_transfer_iso_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_transfer_iso_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_transfer_iso_currency_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankTransferEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankTransferEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankTransferEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankTransferEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<BankTransferEvent>() {
           @Override
           public void write(JsonWriter out, BankTransferEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BankTransferEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BankTransferEvent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BankTransferEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BankTransferEvent
  * @throws IOException if the JSON string is invalid with respect to BankTransferEvent
  */
  public static BankTransferEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankTransferEvent.class);
  }

 /**
  * Convert an instance of BankTransferEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

