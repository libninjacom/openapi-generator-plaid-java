/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata specifically related to which auth methods an institution supports.
 */
@ApiModel(description = "Metadata specifically related to which auth methods an institution supports.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class AuthSupportedMethods {
  public static final String SERIALIZED_NAME_INSTANT_AUTH = "instant_auth";
  @SerializedName(SERIALIZED_NAME_INSTANT_AUTH)
  private Boolean instantAuth;

  public static final String SERIALIZED_NAME_INSTANT_MATCH = "instant_match";
  @SerializedName(SERIALIZED_NAME_INSTANT_MATCH)
  private Boolean instantMatch;

  public static final String SERIALIZED_NAME_AUTOMATED_MICRO_DEPOSITS = "automated_micro_deposits";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_MICRO_DEPOSITS)
  private Boolean automatedMicroDeposits;

  public AuthSupportedMethods() { 
  }

  public AuthSupportedMethods instantAuth(Boolean instantAuth) {
    
    this.instantAuth = instantAuth;
    return this;
  }

   /**
   * Indicates if instant auth is supported.
   * @return instantAuth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates if instant auth is supported.")

  public Boolean getInstantAuth() {
    return instantAuth;
  }


  public void setInstantAuth(Boolean instantAuth) {
    this.instantAuth = instantAuth;
  }


  public AuthSupportedMethods instantMatch(Boolean instantMatch) {
    
    this.instantMatch = instantMatch;
    return this;
  }

   /**
   * Indicates if instant match is supported.
   * @return instantMatch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates if instant match is supported.")

  public Boolean getInstantMatch() {
    return instantMatch;
  }


  public void setInstantMatch(Boolean instantMatch) {
    this.instantMatch = instantMatch;
  }


  public AuthSupportedMethods automatedMicroDeposits(Boolean automatedMicroDeposits) {
    
    this.automatedMicroDeposits = automatedMicroDeposits;
    return this;
  }

   /**
   * Indicates if automated microdeposits are supported.
   * @return automatedMicroDeposits
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates if automated microdeposits are supported.")

  public Boolean getAutomatedMicroDeposits() {
    return automatedMicroDeposits;
  }


  public void setAutomatedMicroDeposits(Boolean automatedMicroDeposits) {
    this.automatedMicroDeposits = automatedMicroDeposits;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public AuthSupportedMethods putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthSupportedMethods authSupportedMethods = (AuthSupportedMethods) o;
    return Objects.equals(this.instantAuth, authSupportedMethods.instantAuth) &&
        Objects.equals(this.instantMatch, authSupportedMethods.instantMatch) &&
        Objects.equals(this.automatedMicroDeposits, authSupportedMethods.automatedMicroDeposits)&&
        Objects.equals(this.additionalProperties, authSupportedMethods.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instantAuth, instantMatch, automatedMicroDeposits, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthSupportedMethods {\n");
    sb.append("    instantAuth: ").append(toIndentedString(instantAuth)).append("\n");
    sb.append("    instantMatch: ").append(toIndentedString(instantMatch)).append("\n");
    sb.append("    automatedMicroDeposits: ").append(toIndentedString(automatedMicroDeposits)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instant_auth");
    openapiFields.add("instant_match");
    openapiFields.add("automated_micro_deposits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instant_auth");
    openapiRequiredFields.add("instant_match");
    openapiRequiredFields.add("automated_micro_deposits");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthSupportedMethods
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AuthSupportedMethods.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthSupportedMethods is not found in the empty JSON string", AuthSupportedMethods.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthSupportedMethods.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthSupportedMethods.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthSupportedMethods' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthSupportedMethods> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthSupportedMethods.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthSupportedMethods>() {
           @Override
           public void write(JsonWriter out, AuthSupportedMethods value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthSupportedMethods read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AuthSupportedMethods instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthSupportedMethods given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthSupportedMethods
  * @throws IOException if the JSON string is invalid with respect to AuthSupportedMethods
  */
  public static AuthSupportedMethods fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthSupportedMethods.class);
  }

 /**
  * Convert an instance of AuthSupportedMethods to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

