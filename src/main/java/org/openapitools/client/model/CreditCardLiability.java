/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.APR;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing a credit card account.
 */
@ApiModel(description = "An object representing a credit card account.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class CreditCardLiability {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_APRS = "aprs";
  @SerializedName(SERIALIZED_NAME_APRS)
  private List<APR> aprs = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_OVERDUE = "is_overdue";
  @SerializedName(SERIALIZED_NAME_IS_OVERDUE)
  private Boolean isOverdue;

  public static final String SERIALIZED_NAME_LAST_PAYMENT_AMOUNT = "last_payment_amount";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT_AMOUNT)
  private BigDecimal lastPaymentAmount;

  public static final String SERIALIZED_NAME_LAST_PAYMENT_DATE = "last_payment_date";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT_DATE)
  private LocalDate lastPaymentDate;

  public static final String SERIALIZED_NAME_LAST_STATEMENT_ISSUE_DATE = "last_statement_issue_date";
  @SerializedName(SERIALIZED_NAME_LAST_STATEMENT_ISSUE_DATE)
  private LocalDate lastStatementIssueDate;

  public static final String SERIALIZED_NAME_LAST_STATEMENT_BALANCE = "last_statement_balance";
  @SerializedName(SERIALIZED_NAME_LAST_STATEMENT_BALANCE)
  private BigDecimal lastStatementBalance;

  public static final String SERIALIZED_NAME_MINIMUM_PAYMENT_AMOUNT = "minimum_payment_amount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PAYMENT_AMOUNT)
  private BigDecimal minimumPaymentAmount;

  public static final String SERIALIZED_NAME_NEXT_PAYMENT_DUE_DATE = "next_payment_due_date";
  @SerializedName(SERIALIZED_NAME_NEXT_PAYMENT_DUE_DATE)
  private LocalDate nextPaymentDueDate;

  public CreditCardLiability() { 
  }

  public CreditCardLiability accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * The ID of the account that this liability belongs to.
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The ID of the account that this liability belongs to.")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreditCardLiability aprs(List<APR> aprs) {
    
    this.aprs = aprs;
    return this;
  }

  public CreditCardLiability addAprsItem(APR aprsItem) {
    this.aprs.add(aprsItem);
    return this;
  }

   /**
   * The various interest rates that apply to the account.
   * @return aprs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The various interest rates that apply to the account.")

  public List<APR> getAprs() {
    return aprs;
  }


  public void setAprs(List<APR> aprs) {
    this.aprs = aprs;
  }


  public CreditCardLiability isOverdue(Boolean isOverdue) {
    
    this.isOverdue = isOverdue;
    return this;
  }

   /**
   * true if a payment is currently overdue. Availability for this field is limited.
   * @return isOverdue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "true if a payment is currently overdue. Availability for this field is limited.")

  public Boolean getIsOverdue() {
    return isOverdue;
  }


  public void setIsOverdue(Boolean isOverdue) {
    this.isOverdue = isOverdue;
  }


  public CreditCardLiability lastPaymentAmount(BigDecimal lastPaymentAmount) {
    
    this.lastPaymentAmount = lastPaymentAmount;
    return this;
  }

   /**
   * The amount of the last payment.
   * @return lastPaymentAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The amount of the last payment.")

  public BigDecimal getLastPaymentAmount() {
    return lastPaymentAmount;
  }


  public void setLastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
  }


  public CreditCardLiability lastPaymentDate(LocalDate lastPaymentDate) {
    
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
   * @return lastPaymentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.")

  public LocalDate getLastPaymentDate() {
    return lastPaymentDate;
  }


  public void setLastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }


  public CreditCardLiability lastStatementIssueDate(LocalDate lastStatementIssueDate) {
    
    this.lastStatementIssueDate = lastStatementIssueDate;
    return this;
  }

   /**
   * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
   * @return lastStatementIssueDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).")

  public LocalDate getLastStatementIssueDate() {
    return lastStatementIssueDate;
  }


  public void setLastStatementIssueDate(LocalDate lastStatementIssueDate) {
    this.lastStatementIssueDate = lastStatementIssueDate;
  }


  public CreditCardLiability lastStatementBalance(BigDecimal lastStatementBalance) {
    
    this.lastStatementBalance = lastStatementBalance;
    return this;
  }

   /**
   * The total amount owed as of the last statement issued
   * @return lastStatementBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The total amount owed as of the last statement issued")

  public BigDecimal getLastStatementBalance() {
    return lastStatementBalance;
  }


  public void setLastStatementBalance(BigDecimal lastStatementBalance) {
    this.lastStatementBalance = lastStatementBalance;
  }


  public CreditCardLiability minimumPaymentAmount(BigDecimal minimumPaymentAmount) {
    
    this.minimumPaymentAmount = minimumPaymentAmount;
    return this;
  }

   /**
   * The minimum payment due for the next billing cycle.
   * @return minimumPaymentAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The minimum payment due for the next billing cycle.")

  public BigDecimal getMinimumPaymentAmount() {
    return minimumPaymentAmount;
  }


  public void setMinimumPaymentAmount(BigDecimal minimumPaymentAmount) {
    this.minimumPaymentAmount = minimumPaymentAmount;
  }


  public CreditCardLiability nextPaymentDueDate(LocalDate nextPaymentDueDate) {
    
    this.nextPaymentDueDate = nextPaymentDueDate;
    return this;
  }

   /**
   * The due date for the next payment. The due date is &#x60;null&#x60; if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
   * @return nextPaymentDueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).")

  public LocalDate getNextPaymentDueDate() {
    return nextPaymentDueDate;
  }


  public void setNextPaymentDueDate(LocalDate nextPaymentDueDate) {
    this.nextPaymentDueDate = nextPaymentDueDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public CreditCardLiability putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditCardLiability creditCardLiability = (CreditCardLiability) o;
    return Objects.equals(this.accountId, creditCardLiability.accountId) &&
        Objects.equals(this.aprs, creditCardLiability.aprs) &&
        Objects.equals(this.isOverdue, creditCardLiability.isOverdue) &&
        Objects.equals(this.lastPaymentAmount, creditCardLiability.lastPaymentAmount) &&
        Objects.equals(this.lastPaymentDate, creditCardLiability.lastPaymentDate) &&
        Objects.equals(this.lastStatementIssueDate, creditCardLiability.lastStatementIssueDate) &&
        Objects.equals(this.lastStatementBalance, creditCardLiability.lastStatementBalance) &&
        Objects.equals(this.minimumPaymentAmount, creditCardLiability.minimumPaymentAmount) &&
        Objects.equals(this.nextPaymentDueDate, creditCardLiability.nextPaymentDueDate)&&
        Objects.equals(this.additionalProperties, creditCardLiability.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, aprs, isOverdue, lastPaymentAmount, lastPaymentDate, lastStatementIssueDate, lastStatementBalance, minimumPaymentAmount, nextPaymentDueDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditCardLiability {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    aprs: ").append(toIndentedString(aprs)).append("\n");
    sb.append("    isOverdue: ").append(toIndentedString(isOverdue)).append("\n");
    sb.append("    lastPaymentAmount: ").append(toIndentedString(lastPaymentAmount)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("    lastStatementIssueDate: ").append(toIndentedString(lastStatementIssueDate)).append("\n");
    sb.append("    lastStatementBalance: ").append(toIndentedString(lastStatementBalance)).append("\n");
    sb.append("    minimumPaymentAmount: ").append(toIndentedString(minimumPaymentAmount)).append("\n");
    sb.append("    nextPaymentDueDate: ").append(toIndentedString(nextPaymentDueDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("aprs");
    openapiFields.add("is_overdue");
    openapiFields.add("last_payment_amount");
    openapiFields.add("last_payment_date");
    openapiFields.add("last_statement_issue_date");
    openapiFields.add("last_statement_balance");
    openapiFields.add("minimum_payment_amount");
    openapiFields.add("next_payment_due_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("aprs");
    openapiRequiredFields.add("is_overdue");
    openapiRequiredFields.add("last_payment_amount");
    openapiRequiredFields.add("last_payment_date");
    openapiRequiredFields.add("last_statement_issue_date");
    openapiRequiredFields.add("last_statement_balance");
    openapiRequiredFields.add("minimum_payment_amount");
    openapiRequiredFields.add("next_payment_due_date");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreditCardLiability
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CreditCardLiability.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditCardLiability is not found in the empty JSON string", CreditCardLiability.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditCardLiability.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("aprs") != null && !jsonObj.get("aprs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aprs` to be an array in the JSON string but got `%s`", jsonObj.get("aprs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditCardLiability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditCardLiability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditCardLiability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditCardLiability.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditCardLiability>() {
           @Override
           public void write(JsonWriter out, CreditCardLiability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditCardLiability read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreditCardLiability instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreditCardLiability given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreditCardLiability
  * @throws IOException if the JSON string is invalid with respect to CreditCardLiability
  */
  public static CreditCardLiability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditCardLiability.class);
  }

 /**
  * Convert an instance of CreditCardLiability to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

