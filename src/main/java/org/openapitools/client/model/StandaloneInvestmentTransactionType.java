/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
 */
@ApiModel(description = "Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class StandaloneInvestmentTransactionType {
  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private String buy;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private String sell;

  public static final String SERIALIZED_NAME_CANCEL = "cancel";
  @SerializedName(SERIALIZED_NAME_CANCEL)
  private String cancel;

  public static final String SERIALIZED_NAME_CASH = "cash";
  @SerializedName(SERIALIZED_NAME_CASH)
  private String cash;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private String fee;

  public static final String SERIALIZED_NAME_TRANSFER = "transfer";
  @SerializedName(SERIALIZED_NAME_TRANSFER)
  private String transfer;

  public StandaloneInvestmentTransactionType() { 
  }

  public StandaloneInvestmentTransactionType buy(String buy) {
    
    this.buy = buy;
    return this;
  }

   /**
   * Buying an investment
   * @return buy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Buying an investment")

  public String getBuy() {
    return buy;
  }


  public void setBuy(String buy) {
    this.buy = buy;
  }


  public StandaloneInvestmentTransactionType sell(String sell) {
    
    this.sell = sell;
    return this;
  }

   /**
   * Selling an investment
   * @return sell
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Selling an investment")

  public String getSell() {
    return sell;
  }


  public void setSell(String sell) {
    this.sell = sell;
  }


  public StandaloneInvestmentTransactionType cancel(String cancel) {
    
    this.cancel = cancel;
    return this;
  }

   /**
   * A cancellation of a pending transaction
   * @return cancel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A cancellation of a pending transaction")

  public String getCancel() {
    return cancel;
  }


  public void setCancel(String cancel) {
    this.cancel = cancel;
  }


  public StandaloneInvestmentTransactionType cash(String cash) {
    
    this.cash = cash;
    return this;
  }

   /**
   * Activity that modifies a cash position
   * @return cash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Activity that modifies a cash position")

  public String getCash() {
    return cash;
  }


  public void setCash(String cash) {
    this.cash = cash;
  }


  public StandaloneInvestmentTransactionType fee(String fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Fees on the account, e.g. commission, bookkeeping, options-related.
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Fees on the account, e.g. commission, bookkeeping, options-related.")

  public String getFee() {
    return fee;
  }


  public void setFee(String fee) {
    this.fee = fee;
  }


  public StandaloneInvestmentTransactionType transfer(String transfer) {
    
    this.transfer = transfer;
    return this;
  }

   /**
   * Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
   * @return transfer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer")

  public String getTransfer() {
    return transfer;
  }


  public void setTransfer(String transfer) {
    this.transfer = transfer;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public StandaloneInvestmentTransactionType putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandaloneInvestmentTransactionType standaloneInvestmentTransactionType = (StandaloneInvestmentTransactionType) o;
    return Objects.equals(this.buy, standaloneInvestmentTransactionType.buy) &&
        Objects.equals(this.sell, standaloneInvestmentTransactionType.sell) &&
        Objects.equals(this.cancel, standaloneInvestmentTransactionType.cancel) &&
        Objects.equals(this.cash, standaloneInvestmentTransactionType.cash) &&
        Objects.equals(this.fee, standaloneInvestmentTransactionType.fee) &&
        Objects.equals(this.transfer, standaloneInvestmentTransactionType.transfer)&&
        Objects.equals(this.additionalProperties, standaloneInvestmentTransactionType.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buy, sell, cancel, cash, fee, transfer, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandaloneInvestmentTransactionType {\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    cancel: ").append(toIndentedString(cancel)).append("\n");
    sb.append("    cash: ").append(toIndentedString(cash)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    transfer: ").append(toIndentedString(transfer)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buy");
    openapiFields.add("sell");
    openapiFields.add("cancel");
    openapiFields.add("cash");
    openapiFields.add("fee");
    openapiFields.add("transfer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("buy");
    openapiRequiredFields.add("sell");
    openapiRequiredFields.add("cancel");
    openapiRequiredFields.add("cash");
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("transfer");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StandaloneInvestmentTransactionType
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (StandaloneInvestmentTransactionType.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandaloneInvestmentTransactionType is not found in the empty JSON string", StandaloneInvestmentTransactionType.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StandaloneInvestmentTransactionType.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("buy") != null && !jsonObj.get("buy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buy").toString()));
      }
      if (jsonObj.get("sell") != null && !jsonObj.get("sell").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sell` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sell").toString()));
      }
      if (jsonObj.get("cancel") != null && !jsonObj.get("cancel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel").toString()));
      }
      if (jsonObj.get("cash") != null && !jsonObj.get("cash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cash").toString()));
      }
      if (jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee").toString()));
      }
      if (jsonObj.get("transfer") != null && !jsonObj.get("transfer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandaloneInvestmentTransactionType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandaloneInvestmentTransactionType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandaloneInvestmentTransactionType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandaloneInvestmentTransactionType.class));

       return (TypeAdapter<T>) new TypeAdapter<StandaloneInvestmentTransactionType>() {
           @Override
           public void write(JsonWriter out, StandaloneInvestmentTransactionType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StandaloneInvestmentTransactionType read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StandaloneInvestmentTransactionType instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StandaloneInvestmentTransactionType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StandaloneInvestmentTransactionType
  * @throws IOException if the JSON string is invalid with respect to StandaloneInvestmentTransactionType
  */
  public static StandaloneInvestmentTransactionType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandaloneInvestmentTransactionType.class);
  }

 /**
  * Convert an instance of StandaloneInvestmentTransactionType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

