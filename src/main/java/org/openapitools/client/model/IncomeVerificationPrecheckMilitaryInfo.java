/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data about military info in the income verification precheck.
 */
@ApiModel(description = "Data about military info in the income verification precheck.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class IncomeVerificationPrecheckMilitaryInfo {
  public static final String SERIALIZED_NAME_IS_ACTIVE_DUTY = "is_active_duty";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE_DUTY)
  private Boolean isActiveDuty;

  /**
   * If the user is currently serving in the US military, the branch of the military they are serving in
   */
  @JsonAdapter(BranchEnum.Adapter.class)
  public enum BranchEnum {
    AIR_FORCE("AIR FORCE"),
    
    ARMY("ARMY"),
    
    COAST_GUARD("COAST GUARD"),
    
    MARINES("MARINES"),
    
    NAVY("NAVY"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    BranchEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BranchEnum fromValue(String value) {
      for (BranchEnum b : BranchEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BranchEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BranchEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BranchEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BranchEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private BranchEnum branch;

  public IncomeVerificationPrecheckMilitaryInfo() { 
  }

  public IncomeVerificationPrecheckMilitaryInfo isActiveDuty(Boolean isActiveDuty) {
    
    this.isActiveDuty = isActiveDuty;
    return this;
  }

   /**
   * Is the user currently active duty in the US military
   * @return isActiveDuty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is the user currently active duty in the US military")

  public Boolean getIsActiveDuty() {
    return isActiveDuty;
  }


  public void setIsActiveDuty(Boolean isActiveDuty) {
    this.isActiveDuty = isActiveDuty;
  }


  public IncomeVerificationPrecheckMilitaryInfo branch(BranchEnum branch) {
    
    this.branch = branch;
    return this;
  }

   /**
   * If the user is currently serving in the US military, the branch of the military they are serving in
   * @return branch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the user is currently serving in the US military, the branch of the military they are serving in")

  public BranchEnum getBranch() {
    return branch;
  }


  public void setBranch(BranchEnum branch) {
    this.branch = branch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncomeVerificationPrecheckMilitaryInfo incomeVerificationPrecheckMilitaryInfo = (IncomeVerificationPrecheckMilitaryInfo) o;
    return Objects.equals(this.isActiveDuty, incomeVerificationPrecheckMilitaryInfo.isActiveDuty) &&
        Objects.equals(this.branch, incomeVerificationPrecheckMilitaryInfo.branch);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isActiveDuty, branch);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncomeVerificationPrecheckMilitaryInfo {\n");
    sb.append("    isActiveDuty: ").append(toIndentedString(isActiveDuty)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_active_duty");
    openapiFields.add("branch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IncomeVerificationPrecheckMilitaryInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (IncomeVerificationPrecheckMilitaryInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in IncomeVerificationPrecheckMilitaryInfo is not found in the empty JSON string", IncomeVerificationPrecheckMilitaryInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IncomeVerificationPrecheckMilitaryInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IncomeVerificationPrecheckMilitaryInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IncomeVerificationPrecheckMilitaryInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IncomeVerificationPrecheckMilitaryInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IncomeVerificationPrecheckMilitaryInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IncomeVerificationPrecheckMilitaryInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<IncomeVerificationPrecheckMilitaryInfo>() {
           @Override
           public void write(JsonWriter out, IncomeVerificationPrecheckMilitaryInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IncomeVerificationPrecheckMilitaryInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IncomeVerificationPrecheckMilitaryInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IncomeVerificationPrecheckMilitaryInfo
  * @throws IOException if the JSON string is invalid with respect to IncomeVerificationPrecheckMilitaryInfo
  */
  public static IncomeVerificationPrecheckMilitaryInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IncomeVerificationPrecheckMilitaryInfo.class);
  }

 /**
  * Convert an instance of IncomeVerificationPrecheckMilitaryInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

