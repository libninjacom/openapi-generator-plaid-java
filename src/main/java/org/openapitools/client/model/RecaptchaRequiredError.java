/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request was flagged by Plaid&#39;s fraud system, and requires additional verification to ensure they are not a bot.
 */
@ApiModel(description = "The request was flagged by Plaid's fraud system, and requires additional verification to ensure they are not a bot.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class RecaptchaRequiredError {
  public static final String SERIALIZED_NAME_ERROR_TYPE = "error_type";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private String errorType;

  public static final String SERIALIZED_NAME_ERROR_CODE = "error_code";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_DISPLAY_MESSAGE = "display_message";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MESSAGE)
  private String displayMessage;

  public static final String SERIALIZED_NAME_HTTP_CODE = "http_code";
  @SerializedName(SERIALIZED_NAME_HTTP_CODE)
  private String httpCode;

  public static final String SERIALIZED_NAME_LINK_USER_EXPERIENCE = "link_user_experience";
  @SerializedName(SERIALIZED_NAME_LINK_USER_EXPERIENCE)
  private String linkUserExperience;

  public static final String SERIALIZED_NAME_COMMON_CAUSES = "common_causes";
  @SerializedName(SERIALIZED_NAME_COMMON_CAUSES)
  private String commonCauses;

  public static final String SERIALIZED_NAME_TROUBLESHOOTING_STEPS = "troubleshooting_steps";
  @SerializedName(SERIALIZED_NAME_TROUBLESHOOTING_STEPS)
  private String troubleshootingSteps;

  public RecaptchaRequiredError() { 
  }

  public RecaptchaRequiredError errorType(String errorType) {
    
    this.errorType = errorType;
    return this;
  }

   /**
   * RECAPTCHA_ERROR
   * @return errorType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "RECAPTCHA_ERROR")

  public String getErrorType() {
    return errorType;
  }


  public void setErrorType(String errorType) {
    this.errorType = errorType;
  }


  public RecaptchaRequiredError errorCode(String errorCode) {
    
    this.errorCode = errorCode;
    return this;
  }

   /**
   * RECAPTCHA_REQUIRED
   * @return errorCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "RECAPTCHA_REQUIRED")

  public String getErrorCode() {
    return errorCode;
  }


  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public RecaptchaRequiredError displayMessage(String displayMessage) {
    
    this.displayMessage = displayMessage;
    return this;
  }

   /**
   * Get displayMessage
   * @return displayMessage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDisplayMessage() {
    return displayMessage;
  }


  public void setDisplayMessage(String displayMessage) {
    this.displayMessage = displayMessage;
  }


  public RecaptchaRequiredError httpCode(String httpCode) {
    
    this.httpCode = httpCode;
    return this;
  }

   /**
   * 400
   * @return httpCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "400")

  public String getHttpCode() {
    return httpCode;
  }


  public void setHttpCode(String httpCode) {
    this.httpCode = httpCode;
  }


  public RecaptchaRequiredError linkUserExperience(String linkUserExperience) {
    
    this.linkUserExperience = linkUserExperience;
    return this;
  }

   /**
   * Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user&#39;s request is resubmitted and they are directed to the next Item creation step.
   * @return linkUserExperience
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user's request is resubmitted and they are directed to the next Item creation step.")

  public String getLinkUserExperience() {
    return linkUserExperience;
  }


  public void setLinkUserExperience(String linkUserExperience) {
    this.linkUserExperience = linkUserExperience;
  }


  public RecaptchaRequiredError commonCauses(String commonCauses) {
    
    this.commonCauses = commonCauses;
    return this;
  }

   /**
   * Plaid&#39;s fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve.
   * @return commonCauses
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Plaid's fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve.")

  public String getCommonCauses() {
    return commonCauses;
  }


  public void setCommonCauses(String commonCauses) {
    this.commonCauses = commonCauses;
  }


  public RecaptchaRequiredError troubleshootingSteps(String troubleshootingSteps) {
    
    this.troubleshootingSteps = troubleshootingSteps;
    return this;
  }

   /**
   * Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.  If your user cannot verify their session, please submit a Support ticket with the following identifiers: &#x60;link_session_id&#x60; or &#x60;request_id&#x60;
   * @return troubleshootingSteps
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.  If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`")

  public String getTroubleshootingSteps() {
    return troubleshootingSteps;
  }


  public void setTroubleshootingSteps(String troubleshootingSteps) {
    this.troubleshootingSteps = troubleshootingSteps;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public RecaptchaRequiredError putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecaptchaRequiredError recaptchaRequiredError = (RecaptchaRequiredError) o;
    return Objects.equals(this.errorType, recaptchaRequiredError.errorType) &&
        Objects.equals(this.errorCode, recaptchaRequiredError.errorCode) &&
        Objects.equals(this.displayMessage, recaptchaRequiredError.displayMessage) &&
        Objects.equals(this.httpCode, recaptchaRequiredError.httpCode) &&
        Objects.equals(this.linkUserExperience, recaptchaRequiredError.linkUserExperience) &&
        Objects.equals(this.commonCauses, recaptchaRequiredError.commonCauses) &&
        Objects.equals(this.troubleshootingSteps, recaptchaRequiredError.troubleshootingSteps)&&
        Objects.equals(this.additionalProperties, recaptchaRequiredError.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorType, errorCode, displayMessage, httpCode, linkUserExperience, commonCauses, troubleshootingSteps, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecaptchaRequiredError {\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    displayMessage: ").append(toIndentedString(displayMessage)).append("\n");
    sb.append("    httpCode: ").append(toIndentedString(httpCode)).append("\n");
    sb.append("    linkUserExperience: ").append(toIndentedString(linkUserExperience)).append("\n");
    sb.append("    commonCauses: ").append(toIndentedString(commonCauses)).append("\n");
    sb.append("    troubleshootingSteps: ").append(toIndentedString(troubleshootingSteps)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error_type");
    openapiFields.add("error_code");
    openapiFields.add("display_message");
    openapiFields.add("http_code");
    openapiFields.add("link_user_experience");
    openapiFields.add("common_causes");
    openapiFields.add("troubleshooting_steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("error_type");
    openapiRequiredFields.add("error_code");
    openapiRequiredFields.add("display_message");
    openapiRequiredFields.add("http_code");
    openapiRequiredFields.add("link_user_experience");
    openapiRequiredFields.add("common_causes");
    openapiRequiredFields.add("troubleshooting_steps");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecaptchaRequiredError
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RecaptchaRequiredError.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecaptchaRequiredError is not found in the empty JSON string", RecaptchaRequiredError.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecaptchaRequiredError.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("error_type") != null && !jsonObj.get("error_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_type").toString()));
      }
      if (jsonObj.get("error_code") != null && !jsonObj.get("error_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_code").toString()));
      }
      if (jsonObj.get("display_message") != null && !jsonObj.get("display_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_message").toString()));
      }
      if (jsonObj.get("http_code") != null && !jsonObj.get("http_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_code").toString()));
      }
      if (jsonObj.get("link_user_experience") != null && !jsonObj.get("link_user_experience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_user_experience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_user_experience").toString()));
      }
      if (jsonObj.get("common_causes") != null && !jsonObj.get("common_causes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `common_causes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("common_causes").toString()));
      }
      if (jsonObj.get("troubleshooting_steps") != null && !jsonObj.get("troubleshooting_steps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `troubleshooting_steps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("troubleshooting_steps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecaptchaRequiredError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecaptchaRequiredError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecaptchaRequiredError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecaptchaRequiredError.class));

       return (TypeAdapter<T>) new TypeAdapter<RecaptchaRequiredError>() {
           @Override
           public void write(JsonWriter out, RecaptchaRequiredError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RecaptchaRequiredError read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RecaptchaRequiredError instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecaptchaRequiredError given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecaptchaRequiredError
  * @throws IOException if the JSON string is invalid with respect to RecaptchaRequiredError
  */
  public static RecaptchaRequiredError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecaptchaRequiredError.class);
  }

 /**
  * Convert an instance of RecaptchaRequiredError to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

