/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details about a security
 */
@ApiModel(description = "Contains details about a security")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class Security {
  public static final String SERIALIZED_NAME_SECURITY_ID = "security_id";
  @SerializedName(SERIALIZED_NAME_SECURITY_ID)
  private String securityId;

  public static final String SERIALIZED_NAME_ISIN = "isin";
  @SerializedName(SERIALIZED_NAME_ISIN)
  private String isin;

  public static final String SERIALIZED_NAME_CUSIP = "cusip";
  @SerializedName(SERIALIZED_NAME_CUSIP)
  private String cusip;

  public static final String SERIALIZED_NAME_SEDOL = "sedol";
  @SerializedName(SERIALIZED_NAME_SEDOL)
  private String sedol;

  public static final String SERIALIZED_NAME_INSTITUTION_SECURITY_ID = "institution_security_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_SECURITY_ID)
  private String institutionSecurityId;

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institution_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private String institutionId;

  public static final String SERIALIZED_NAME_PROXY_SECURITY_ID = "proxy_security_id";
  @SerializedName(SERIALIZED_NAME_PROXY_SECURITY_ID)
  private String proxySecurityId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TICKER_SYMBOL = "ticker_symbol";
  @SerializedName(SERIALIZED_NAME_TICKER_SYMBOL)
  private String tickerSymbol;

  public static final String SERIALIZED_NAME_IS_CASH_EQUIVALENT = "is_cash_equivalent";
  @SerializedName(SERIALIZED_NAME_IS_CASH_EQUIVALENT)
  private Boolean isCashEquivalent;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CLOSE_PRICE = "close_price";
  @SerializedName(SERIALIZED_NAME_CLOSE_PRICE)
  private BigDecimal closePrice;

  public static final String SERIALIZED_NAME_CLOSE_PRICE_AS_OF = "close_price_as_of";
  @SerializedName(SERIALIZED_NAME_CLOSE_PRICE_AS_OF)
  private LocalDate closePriceAsOf;

  public static final String SERIALIZED_NAME_ISO_CURRENCY_CODE = "iso_currency_code";
  @SerializedName(SERIALIZED_NAME_ISO_CURRENCY_CODE)
  private String isoCurrencyCode;

  public static final String SERIALIZED_NAME_UNOFFICIAL_CURRENCY_CODE = "unofficial_currency_code";
  @SerializedName(SERIALIZED_NAME_UNOFFICIAL_CURRENCY_CODE)
  private String unofficialCurrencyCode;

  public Security() { 
  }

  public Security securityId(String securityId) {
    
    this.securityId = securityId;
    return this;
  }

   /**
   * A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the &#x60;security_id&#x60; is case sensitive.
   * @return securityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive.")

  public String getSecurityId() {
    return securityId;
  }


  public void setSecurityId(String securityId) {
    this.securityId = securityId;
  }


  public Security isin(String isin) {
    
    this.isin = isin;
    return this;
  }

   /**
   * 12-character ISIN, a globally unique securities identifier.
   * @return isin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "12-character ISIN, a globally unique securities identifier.")

  public String getIsin() {
    return isin;
  }


  public void setIsin(String isin) {
    this.isin = isin;
  }


  public Security cusip(String cusip) {
    
    this.cusip = cusip;
    return this;
  }

   /**
   * 9-character CUSIP, an identifier assigned to North American securities.
   * @return cusip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "9-character CUSIP, an identifier assigned to North American securities.")

  public String getCusip() {
    return cusip;
  }


  public void setCusip(String cusip) {
    this.cusip = cusip;
  }


  public Security sedol(String sedol) {
    
    this.sedol = sedol;
    return this;
  }

   /**
   * 7-character SEDOL, an identifier assigned to securities in the UK.
   * @return sedol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "7-character SEDOL, an identifier assigned to securities in the UK.")

  public String getSedol() {
    return sedol;
  }


  public void setSedol(String sedol) {
    this.sedol = sedol;
  }


  public Security institutionSecurityId(String institutionSecurityId) {
    
    this.institutionSecurityId = institutionSecurityId;
    return this;
  }

   /**
   * An identifier given to the security by the institution
   * @return institutionSecurityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "An identifier given to the security by the institution")

  public String getInstitutionSecurityId() {
    return institutionSecurityId;
  }


  public void setInstitutionSecurityId(String institutionSecurityId) {
    this.institutionSecurityId = institutionSecurityId;
  }


  public Security institutionId(String institutionId) {
    
    this.institutionId = institutionId;
    return this;
  }

   /**
   * If &#x60;institution_security_id&#x60; is present, this field indicates the Plaid &#x60;institution_id&#x60; of the institution to whom the identifier belongs.
   * @return institutionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs.")

  public String getInstitutionId() {
    return institutionId;
  }


  public void setInstitutionId(String institutionId) {
    this.institutionId = institutionId;
  }


  public Security proxySecurityId(String proxySecurityId) {
    
    this.proxySecurityId = proxySecurityId;
    return this;
  }

   /**
   * In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.
   * @return proxySecurityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.")

  public String getProxySecurityId() {
    return proxySecurityId;
  }


  public void setProxySecurityId(String proxySecurityId) {
    this.proxySecurityId = proxySecurityId;
  }


  public Security name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A descriptive name for the security, suitable for display.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "A descriptive name for the security, suitable for display.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Security tickerSymbol(String tickerSymbol) {
    
    this.tickerSymbol = tickerSymbol;
    return this;
  }

   /**
   * The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available.
   * @return tickerSymbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available.")

  public String getTickerSymbol() {
    return tickerSymbol;
  }


  public void setTickerSymbol(String tickerSymbol) {
    this.tickerSymbol = tickerSymbol;
  }


  public Security isCashEquivalent(Boolean isCashEquivalent) {
    
    this.isCashEquivalent = isCashEquivalent;
    return this;
  }

   /**
   * Indicates that a security is a highly liquid asset and can be treated like cash.
   * @return isCashEquivalent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Indicates that a security is a highly liquid asset and can be treated like cash.")

  public Boolean getIsCashEquivalent() {
    return isCashEquivalent;
  }


  public void setIsCashEquivalent(Boolean isCashEquivalent) {
    this.isCashEquivalent = isCashEquivalent;
  }


  public Security type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The security type of the holding. Valid security types are:  &#x60;cash&#x60;: Cash, currency, and money market funds  &#x60;derivative&#x60;: Options, warrants, and other derivative instruments  &#x60;equity&#x60;: Domestic and foreign equities  &#x60;etf&#x60;: Multi-asset exchange-traded investment funds  &#x60;fixed income&#x60;: Bonds and certificates of deposit (CDs)  &#x60;loan&#x60;: Loans and loan receivables.  &#x60;mutual fund&#x60;: Open- and closed-end vehicles pooling funds of multiple investors.  &#x60;other&#x60;: Unknown or other investment types
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The security type of the holding. Valid security types are:  `cash`: Cash, currency, and money market funds  `derivative`: Options, warrants, and other derivative instruments  `equity`: Domestic and foreign equities  `etf`: Multi-asset exchange-traded investment funds  `fixed income`: Bonds and certificates of deposit (CDs)  `loan`: Loans and loan receivables.  `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors.  `other`: Unknown or other investment types")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Security closePrice(BigDecimal closePrice) {
    
    this.closePrice = closePrice;
    return this;
  }

   /**
   * Price of the security at the close of the previous trading session. &#x60;null&#x60; for non-public securities. If the security is a foreign currency or a cryptocurrency this field will be updated daily and will be priced in USD.
   * @return closePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Price of the security at the close of the previous trading session. `null` for non-public securities. If the security is a foreign currency or a cryptocurrency this field will be updated daily and will be priced in USD.")

  public BigDecimal getClosePrice() {
    return closePrice;
  }


  public void setClosePrice(BigDecimal closePrice) {
    this.closePrice = closePrice;
  }


  public Security closePriceAsOf(LocalDate closePriceAsOf) {
    
    this.closePriceAsOf = closePriceAsOf;
    return this;
  }

   /**
   * Date for which &#x60;close_price&#x60; is accurate. Always &#x60;null&#x60; if &#x60;close_price&#x60; is &#x60;null&#x60;.
   * @return closePriceAsOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.")

  public LocalDate getClosePriceAsOf() {
    return closePriceAsOf;
  }


  public void setClosePriceAsOf(LocalDate closePriceAsOf) {
    this.closePriceAsOf = closePriceAsOf;
  }


  public Security isoCurrencyCode(String isoCurrencyCode) {
    
    this.isoCurrencyCode = isoCurrencyCode;
    return this;
  }

   /**
   * The ISO-4217 currency code of the price given. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-&#x60;null&#x60;.
   * @return isoCurrencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`.")

  public String getIsoCurrencyCode() {
    return isoCurrencyCode;
  }


  public void setIsoCurrencyCode(String isoCurrencyCode) {
    this.isoCurrencyCode = isoCurrencyCode;
  }


  public Security unofficialCurrencyCode(String unofficialCurrencyCode) {
    
    this.unofficialCurrencyCode = unofficialCurrencyCode;
    return this;
  }

   /**
   * The unofficial currency code associated with the security. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s.
   * @return unofficialCurrencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.")

  public String getUnofficialCurrencyCode() {
    return unofficialCurrencyCode;
  }


  public void setUnofficialCurrencyCode(String unofficialCurrencyCode) {
    this.unofficialCurrencyCode = unofficialCurrencyCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public Security putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Security security = (Security) o;
    return Objects.equals(this.securityId, security.securityId) &&
        Objects.equals(this.isin, security.isin) &&
        Objects.equals(this.cusip, security.cusip) &&
        Objects.equals(this.sedol, security.sedol) &&
        Objects.equals(this.institutionSecurityId, security.institutionSecurityId) &&
        Objects.equals(this.institutionId, security.institutionId) &&
        Objects.equals(this.proxySecurityId, security.proxySecurityId) &&
        Objects.equals(this.name, security.name) &&
        Objects.equals(this.tickerSymbol, security.tickerSymbol) &&
        Objects.equals(this.isCashEquivalent, security.isCashEquivalent) &&
        Objects.equals(this.type, security.type) &&
        Objects.equals(this.closePrice, security.closePrice) &&
        Objects.equals(this.closePriceAsOf, security.closePriceAsOf) &&
        Objects.equals(this.isoCurrencyCode, security.isoCurrencyCode) &&
        Objects.equals(this.unofficialCurrencyCode, security.unofficialCurrencyCode)&&
        Objects.equals(this.additionalProperties, security.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(securityId, isin, cusip, sedol, institutionSecurityId, institutionId, proxySecurityId, name, tickerSymbol, isCashEquivalent, type, closePrice, closePriceAsOf, isoCurrencyCode, unofficialCurrencyCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Security {\n");
    sb.append("    securityId: ").append(toIndentedString(securityId)).append("\n");
    sb.append("    isin: ").append(toIndentedString(isin)).append("\n");
    sb.append("    cusip: ").append(toIndentedString(cusip)).append("\n");
    sb.append("    sedol: ").append(toIndentedString(sedol)).append("\n");
    sb.append("    institutionSecurityId: ").append(toIndentedString(institutionSecurityId)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    proxySecurityId: ").append(toIndentedString(proxySecurityId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tickerSymbol: ").append(toIndentedString(tickerSymbol)).append("\n");
    sb.append("    isCashEquivalent: ").append(toIndentedString(isCashEquivalent)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    closePrice: ").append(toIndentedString(closePrice)).append("\n");
    sb.append("    closePriceAsOf: ").append(toIndentedString(closePriceAsOf)).append("\n");
    sb.append("    isoCurrencyCode: ").append(toIndentedString(isoCurrencyCode)).append("\n");
    sb.append("    unofficialCurrencyCode: ").append(toIndentedString(unofficialCurrencyCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("security_id");
    openapiFields.add("isin");
    openapiFields.add("cusip");
    openapiFields.add("sedol");
    openapiFields.add("institution_security_id");
    openapiFields.add("institution_id");
    openapiFields.add("proxy_security_id");
    openapiFields.add("name");
    openapiFields.add("ticker_symbol");
    openapiFields.add("is_cash_equivalent");
    openapiFields.add("type");
    openapiFields.add("close_price");
    openapiFields.add("close_price_as_of");
    openapiFields.add("iso_currency_code");
    openapiFields.add("unofficial_currency_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("security_id");
    openapiRequiredFields.add("isin");
    openapiRequiredFields.add("cusip");
    openapiRequiredFields.add("sedol");
    openapiRequiredFields.add("institution_security_id");
    openapiRequiredFields.add("institution_id");
    openapiRequiredFields.add("proxy_security_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("ticker_symbol");
    openapiRequiredFields.add("is_cash_equivalent");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("close_price");
    openapiRequiredFields.add("close_price_as_of");
    openapiRequiredFields.add("iso_currency_code");
    openapiRequiredFields.add("unofficial_currency_code");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Security
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Security.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Security is not found in the empty JSON string", Security.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Security.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("security_id") != null && !jsonObj.get("security_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security_id").toString()));
      }
      if (jsonObj.get("isin") != null && !jsonObj.get("isin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isin").toString()));
      }
      if (jsonObj.get("cusip") != null && !jsonObj.get("cusip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cusip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cusip").toString()));
      }
      if (jsonObj.get("sedol") != null && !jsonObj.get("sedol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sedol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sedol").toString()));
      }
      if (jsonObj.get("institution_security_id") != null && !jsonObj.get("institution_security_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_security_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution_security_id").toString()));
      }
      if (jsonObj.get("institution_id") != null && !jsonObj.get("institution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution_id").toString()));
      }
      if (jsonObj.get("proxy_security_id") != null && !jsonObj.get("proxy_security_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy_security_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy_security_id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("ticker_symbol") != null && !jsonObj.get("ticker_symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker_symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker_symbol").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("iso_currency_code") != null && !jsonObj.get("iso_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso_currency_code").toString()));
      }
      if (jsonObj.get("unofficial_currency_code") != null && !jsonObj.get("unofficial_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unofficial_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unofficial_currency_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Security.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Security' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Security> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Security.class));

       return (TypeAdapter<T>) new TypeAdapter<Security>() {
           @Override
           public void write(JsonWriter out, Security value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Security read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Security instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Security given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Security
  * @throws IOException if the JSON string is invalid with respect to Security
  */
  public static Security fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Security.class);
  }

 /**
  * Convert an instance of Security to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

