/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters.
 */
@ApiModel(description = "Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class AccountFilter {
  public static final String SERIALIZED_NAME_DEPOSITORY = "depository";
  @SerializedName(SERIALIZED_NAME_DEPOSITORY)
  private List<String> depository = null;

  public static final String SERIALIZED_NAME_CREDIT = "credit";
  @SerializedName(SERIALIZED_NAME_CREDIT)
  private List<String> credit = null;

  public static final String SERIALIZED_NAME_LOAN = "loan";
  @SerializedName(SERIALIZED_NAME_LOAN)
  private List<String> loan = null;

  public static final String SERIALIZED_NAME_INVESTMENT = "investment";
  @SerializedName(SERIALIZED_NAME_INVESTMENT)
  private List<String> investment = null;

  public AccountFilter() { 
  }

  public AccountFilter depository(List<String> depository) {
    
    this.depository = depository;
    return this;
  }

  public AccountFilter addDepositoryItem(String depositoryItem) {
    if (this.depository == null) {
      this.depository = new ArrayList<>();
    }
    this.depository.add(depositoryItem);
    return this;
  }

   /**
   * A list of account subtypes to be filtered.
   * @return depository
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of account subtypes to be filtered.")

  public List<String> getDepository() {
    return depository;
  }


  public void setDepository(List<String> depository) {
    this.depository = depository;
  }


  public AccountFilter credit(List<String> credit) {
    
    this.credit = credit;
    return this;
  }

  public AccountFilter addCreditItem(String creditItem) {
    if (this.credit == null) {
      this.credit = new ArrayList<>();
    }
    this.credit.add(creditItem);
    return this;
  }

   /**
   * A list of account subtypes to be filtered.
   * @return credit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of account subtypes to be filtered.")

  public List<String> getCredit() {
    return credit;
  }


  public void setCredit(List<String> credit) {
    this.credit = credit;
  }


  public AccountFilter loan(List<String> loan) {
    
    this.loan = loan;
    return this;
  }

  public AccountFilter addLoanItem(String loanItem) {
    if (this.loan == null) {
      this.loan = new ArrayList<>();
    }
    this.loan.add(loanItem);
    return this;
  }

   /**
   * A list of account subtypes to be filtered.
   * @return loan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of account subtypes to be filtered.")

  public List<String> getLoan() {
    return loan;
  }


  public void setLoan(List<String> loan) {
    this.loan = loan;
  }


  public AccountFilter investment(List<String> investment) {
    
    this.investment = investment;
    return this;
  }

  public AccountFilter addInvestmentItem(String investmentItem) {
    if (this.investment == null) {
      this.investment = new ArrayList<>();
    }
    this.investment.add(investmentItem);
    return this;
  }

   /**
   * A list of account subtypes to be filtered.
   * @return investment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of account subtypes to be filtered.")

  public List<String> getInvestment() {
    return investment;
  }


  public void setInvestment(List<String> investment) {
    this.investment = investment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountFilter accountFilter = (AccountFilter) o;
    return Objects.equals(this.depository, accountFilter.depository) &&
        Objects.equals(this.credit, accountFilter.credit) &&
        Objects.equals(this.loan, accountFilter.loan) &&
        Objects.equals(this.investment, accountFilter.investment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(depository, credit, loan, investment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountFilter {\n");
    sb.append("    depository: ").append(toIndentedString(depository)).append("\n");
    sb.append("    credit: ").append(toIndentedString(credit)).append("\n");
    sb.append("    loan: ").append(toIndentedString(loan)).append("\n");
    sb.append("    investment: ").append(toIndentedString(investment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("depository");
    openapiFields.add("credit");
    openapiFields.add("loan");
    openapiFields.add("investment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountFilter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AccountFilter.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountFilter is not found in the empty JSON string", AccountFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AccountFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountFilter` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("depository") != null && !jsonObj.get("depository").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `depository` to be an array in the JSON string but got `%s`", jsonObj.get("depository").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("credit") != null && !jsonObj.get("credit").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `credit` to be an array in the JSON string but got `%s`", jsonObj.get("credit").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("loan") != null && !jsonObj.get("loan").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loan` to be an array in the JSON string but got `%s`", jsonObj.get("loan").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("investment") != null && !jsonObj.get("investment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `investment` to be an array in the JSON string but got `%s`", jsonObj.get("investment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountFilter>() {
           @Override
           public void write(JsonWriter out, AccountFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountFilter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountFilter
  * @throws IOException if the JSON string is invalid with respect to AccountFilter
  */
  public static AccountFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountFilter.class);
  }

 /**
  * Convert an instance of AccountFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

