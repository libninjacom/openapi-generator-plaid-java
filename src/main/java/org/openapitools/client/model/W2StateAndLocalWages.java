/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * W2 state and local wages
 */
@ApiModel(description = "W2 state and local wages")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class W2StateAndLocalWages {
  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_EMPLOYER_STATE_ID_NUMBER = "employer_state_id_number";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_STATE_ID_NUMBER)
  private String employerStateIdNumber;

  public static final String SERIALIZED_NAME_STATE_WAGES_TIPS = "state_wages_tips";
  @SerializedName(SERIALIZED_NAME_STATE_WAGES_TIPS)
  private String stateWagesTips;

  public static final String SERIALIZED_NAME_STATE_INCOME_TAX = "state_income_tax";
  @SerializedName(SERIALIZED_NAME_STATE_INCOME_TAX)
  private String stateIncomeTax;

  public static final String SERIALIZED_NAME_LOCAL_WAGES_TIPS = "local_wages_tips";
  @SerializedName(SERIALIZED_NAME_LOCAL_WAGES_TIPS)
  private String localWagesTips;

  public static final String SERIALIZED_NAME_LOCAL_INCOME_TAX = "local_income_tax";
  @SerializedName(SERIALIZED_NAME_LOCAL_INCOME_TAX)
  private String localIncomeTax;

  public static final String SERIALIZED_NAME_LOCALITY_NAME = "locality_name";
  @SerializedName(SERIALIZED_NAME_LOCALITY_NAME)
  private String localityName;

  public W2StateAndLocalWages() { 
  }

  public W2StateAndLocalWages state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * State associated with the wage.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State associated with the wage.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public W2StateAndLocalWages employerStateIdNumber(String employerStateIdNumber) {
    
    this.employerStateIdNumber = employerStateIdNumber;
    return this;
  }

   /**
   * State identification number of the employer.
   * @return employerStateIdNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State identification number of the employer.")

  public String getEmployerStateIdNumber() {
    return employerStateIdNumber;
  }


  public void setEmployerStateIdNumber(String employerStateIdNumber) {
    this.employerStateIdNumber = employerStateIdNumber;
  }


  public W2StateAndLocalWages stateWagesTips(String stateWagesTips) {
    
    this.stateWagesTips = stateWagesTips;
    return this;
  }

   /**
   * Wages and tips from the specified state.
   * @return stateWagesTips
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Wages and tips from the specified state.")

  public String getStateWagesTips() {
    return stateWagesTips;
  }


  public void setStateWagesTips(String stateWagesTips) {
    this.stateWagesTips = stateWagesTips;
  }


  public W2StateAndLocalWages stateIncomeTax(String stateIncomeTax) {
    
    this.stateIncomeTax = stateIncomeTax;
    return this;
  }

   /**
   * Income tax from the specified state.
   * @return stateIncomeTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Income tax from the specified state.")

  public String getStateIncomeTax() {
    return stateIncomeTax;
  }


  public void setStateIncomeTax(String stateIncomeTax) {
    this.stateIncomeTax = stateIncomeTax;
  }


  public W2StateAndLocalWages localWagesTips(String localWagesTips) {
    
    this.localWagesTips = localWagesTips;
    return this;
  }

   /**
   * Wages and tips from the locality.
   * @return localWagesTips
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Wages and tips from the locality.")

  public String getLocalWagesTips() {
    return localWagesTips;
  }


  public void setLocalWagesTips(String localWagesTips) {
    this.localWagesTips = localWagesTips;
  }


  public W2StateAndLocalWages localIncomeTax(String localIncomeTax) {
    
    this.localIncomeTax = localIncomeTax;
    return this;
  }

   /**
   * Income tax from the locality.
   * @return localIncomeTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Income tax from the locality.")

  public String getLocalIncomeTax() {
    return localIncomeTax;
  }


  public void setLocalIncomeTax(String localIncomeTax) {
    this.localIncomeTax = localIncomeTax;
  }


  public W2StateAndLocalWages localityName(String localityName) {
    
    this.localityName = localityName;
    return this;
  }

   /**
   * Name of the locality.
   * @return localityName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the locality.")

  public String getLocalityName() {
    return localityName;
  }


  public void setLocalityName(String localityName) {
    this.localityName = localityName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public W2StateAndLocalWages putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    W2StateAndLocalWages w2StateAndLocalWages = (W2StateAndLocalWages) o;
    return Objects.equals(this.state, w2StateAndLocalWages.state) &&
        Objects.equals(this.employerStateIdNumber, w2StateAndLocalWages.employerStateIdNumber) &&
        Objects.equals(this.stateWagesTips, w2StateAndLocalWages.stateWagesTips) &&
        Objects.equals(this.stateIncomeTax, w2StateAndLocalWages.stateIncomeTax) &&
        Objects.equals(this.localWagesTips, w2StateAndLocalWages.localWagesTips) &&
        Objects.equals(this.localIncomeTax, w2StateAndLocalWages.localIncomeTax) &&
        Objects.equals(this.localityName, w2StateAndLocalWages.localityName)&&
        Objects.equals(this.additionalProperties, w2StateAndLocalWages.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, employerStateIdNumber, stateWagesTips, stateIncomeTax, localWagesTips, localIncomeTax, localityName, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class W2StateAndLocalWages {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    employerStateIdNumber: ").append(toIndentedString(employerStateIdNumber)).append("\n");
    sb.append("    stateWagesTips: ").append(toIndentedString(stateWagesTips)).append("\n");
    sb.append("    stateIncomeTax: ").append(toIndentedString(stateIncomeTax)).append("\n");
    sb.append("    localWagesTips: ").append(toIndentedString(localWagesTips)).append("\n");
    sb.append("    localIncomeTax: ").append(toIndentedString(localIncomeTax)).append("\n");
    sb.append("    localityName: ").append(toIndentedString(localityName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("employer_state_id_number");
    openapiFields.add("state_wages_tips");
    openapiFields.add("state_income_tax");
    openapiFields.add("local_wages_tips");
    openapiFields.add("local_income_tax");
    openapiFields.add("locality_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to W2StateAndLocalWages
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (W2StateAndLocalWages.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in W2StateAndLocalWages is not found in the empty JSON string", W2StateAndLocalWages.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (jsonObj.get("employer_state_id_number") != null && !jsonObj.get("employer_state_id_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_state_id_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_state_id_number").toString()));
      }
      if (jsonObj.get("state_wages_tips") != null && !jsonObj.get("state_wages_tips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_wages_tips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_wages_tips").toString()));
      }
      if (jsonObj.get("state_income_tax") != null && !jsonObj.get("state_income_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_income_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_income_tax").toString()));
      }
      if (jsonObj.get("local_wages_tips") != null && !jsonObj.get("local_wages_tips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_wages_tips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_wages_tips").toString()));
      }
      if (jsonObj.get("local_income_tax") != null && !jsonObj.get("local_income_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_income_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_income_tax").toString()));
      }
      if (jsonObj.get("locality_name") != null && !jsonObj.get("locality_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locality_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!W2StateAndLocalWages.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'W2StateAndLocalWages' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<W2StateAndLocalWages> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(W2StateAndLocalWages.class));

       return (TypeAdapter<T>) new TypeAdapter<W2StateAndLocalWages>() {
           @Override
           public void write(JsonWriter out, W2StateAndLocalWages value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public W2StateAndLocalWages read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             W2StateAndLocalWages instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of W2StateAndLocalWages given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of W2StateAndLocalWages
  * @throws IOException if the JSON string is invalid with respect to W2StateAndLocalWages
  */
  public static W2StateAndLocalWages fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, W2StateAndLocalWages.class);
  }

 /**
  * Convert an instance of W2StateAndLocalWages to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

