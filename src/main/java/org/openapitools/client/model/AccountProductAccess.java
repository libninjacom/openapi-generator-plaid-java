/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Allow the application to access specific products on this account
 */
@ApiModel(description = "Allow the application to access specific products on this account")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class AccountProductAccess {
  public static final String SERIALIZED_NAME_ACCOUNT_DATA = "account_data";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_DATA)
  private Boolean accountData = true;

  public static final String SERIALIZED_NAME_STATEMENTS = "statements";
  @SerializedName(SERIALIZED_NAME_STATEMENTS)
  private Boolean statements = true;

  public static final String SERIALIZED_NAME_TAX_DOCUMENTS = "tax_documents";
  @SerializedName(SERIALIZED_NAME_TAX_DOCUMENTS)
  private Boolean taxDocuments = true;

  public AccountProductAccess() { 
  }

  public AccountProductAccess accountData(Boolean accountData) {
    
    this.accountData = accountData;
    return this;
  }

   /**
   * Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
   * @return accountData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.")

  public Boolean getAccountData() {
    return accountData;
  }


  public void setAccountData(Boolean accountData) {
    this.accountData = accountData;
  }


  public AccountProductAccess statements(Boolean statements) {
    
    this.statements = statements;
    return this;
  }

   /**
   * Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
   * @return statements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.")

  public Boolean getStatements() {
    return statements;
  }


  public void setStatements(Boolean statements) {
    this.statements = statements;
  }


  public AccountProductAccess taxDocuments(Boolean taxDocuments) {
    
    this.taxDocuments = taxDocuments;
    return this;
  }

   /**
   * Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
   * @return taxDocuments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.")

  public Boolean getTaxDocuments() {
    return taxDocuments;
  }


  public void setTaxDocuments(Boolean taxDocuments) {
    this.taxDocuments = taxDocuments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountProductAccess accountProductAccess = (AccountProductAccess) o;
    return Objects.equals(this.accountData, accountProductAccess.accountData) &&
        Objects.equals(this.statements, accountProductAccess.statements) &&
        Objects.equals(this.taxDocuments, accountProductAccess.taxDocuments);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountData, statements, taxDocuments);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountProductAccess {\n");
    sb.append("    accountData: ").append(toIndentedString(accountData)).append("\n");
    sb.append("    statements: ").append(toIndentedString(statements)).append("\n");
    sb.append("    taxDocuments: ").append(toIndentedString(taxDocuments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_data");
    openapiFields.add("statements");
    openapiFields.add("tax_documents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountProductAccess
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AccountProductAccess.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountProductAccess is not found in the empty JSON string", AccountProductAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AccountProductAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountProductAccess` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountProductAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountProductAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountProductAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountProductAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountProductAccess>() {
           @Override
           public void write(JsonWriter out, AccountProductAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountProductAccess read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountProductAccess given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountProductAccess
  * @throws IOException if the JSON string is invalid with respect to AccountProductAccess
  */
  public static AccountProductAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountProductAccess.class);
  }

 /**
  * Convert an instance of AccountProductAccess to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

