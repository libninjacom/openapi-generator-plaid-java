/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The &#x60;inflow_model&#x60; allows you to foo a test account that receives regular income or make regular payments on a loan. Any transactions generated by the &#x60;inflow_model&#x60; will appear in addition to randomly generated test data or transactions specified by &#x60;override_accounts&#x60;.
 */
@ApiModel(description = "The `inflow_model` allows you to foo a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class InflowModel {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_INCOME_AMOUNT = "income_amount";
  @SerializedName(SERIALIZED_NAME_INCOME_AMOUNT)
  private BigDecimal incomeAmount;

  public static final String SERIALIZED_NAME_PAYMENT_DAY_OF_MONTH = "payment_day_of_month";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DAY_OF_MONTH)
  private BigDecimal paymentDayOfMonth;

  public static final String SERIALIZED_NAME_TRANSACTION_NAME = "transaction_name";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_NAME)
  private String transactionName;

  public static final String SERIALIZED_NAME_STATEMENT_DAY_OF_MONTH = "statement_day_of_month";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DAY_OF_MONTH)
  private String statementDayOfMonth;

  public InflowModel() { 
  }

  public InflowModel type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Inflow foo. One of the following:  &#x60;none&#x60;: No income  &#x60;monthly-income&#x60;: Income occurs once per month &#x60;monthly-balance-payment&#x60;: Pays off the balance on a liability account at the given statement day of month.  &#x60;monthly-interest-only-payment&#x60;: Makes an interest-only payment on a liability account at the given statement day of month.   Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type &#x60;credit&#x60; with subtype &#x60;credit&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with subtype &#x60;student&#x60; or &#x60;mortgage&#x60;.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Inflow foo. One of the following:  `none`: No income  `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.  `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.   Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public InflowModel incomeAmount(BigDecimal incomeAmount) {
    
    this.incomeAmount = incomeAmount;
    return this;
  }

   /**
   * Amount of income per month. This value is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;.
   * @return incomeAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Amount of income per month. This value is required if `type` is `monthly-income`.")

  public BigDecimal getIncomeAmount() {
    return incomeAmount;
  }


  public void setIncomeAmount(BigDecimal incomeAmount) {
    this.incomeAmount = incomeAmount;
  }


  public InflowModel paymentDayOfMonth(BigDecimal paymentDayOfMonth) {
    
    this.paymentDayOfMonth = paymentDayOfMonth;
    return this;
  }

   /**
   * Number between 1 and 28, or &#x60;last&#x60; meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;, &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.
   * @return paymentDayOfMonth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.")

  public BigDecimal getPaymentDayOfMonth() {
    return paymentDayOfMonth;
  }


  public void setPaymentDayOfMonth(BigDecimal paymentDayOfMonth) {
    this.paymentDayOfMonth = paymentDayOfMonth;
  }


  public InflowModel transactionName(String transactionName) {
    
    this.transactionName = transactionName;
    return this;
  }

   /**
   * The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;, &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.
   * @return transactionName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.")

  public String getTransactionName() {
    return transactionName;
  }


  public void setTransactionName(String transactionName) {
    this.transactionName = transactionName;
  }


  public InflowModel statementDayOfMonth(String statementDayOfMonth) {
    
    this.statementDayOfMonth = statementDayOfMonth;
    return this;
  }

   /**
   * Number between 1 and 28, or &#x60;last&#x60; meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.
   * @return statementDayOfMonth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.")

  public String getStatementDayOfMonth() {
    return statementDayOfMonth;
  }


  public void setStatementDayOfMonth(String statementDayOfMonth) {
    this.statementDayOfMonth = statementDayOfMonth;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public InflowModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InflowModel inflowModel = (InflowModel) o;
    return Objects.equals(this.type, inflowModel.type) &&
        Objects.equals(this.incomeAmount, inflowModel.incomeAmount) &&
        Objects.equals(this.paymentDayOfMonth, inflowModel.paymentDayOfMonth) &&
        Objects.equals(this.transactionName, inflowModel.transactionName) &&
        Objects.equals(this.statementDayOfMonth, inflowModel.statementDayOfMonth)&&
        Objects.equals(this.additionalProperties, inflowModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, incomeAmount, paymentDayOfMonth, transactionName, statementDayOfMonth, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InflowModel {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    incomeAmount: ").append(toIndentedString(incomeAmount)).append("\n");
    sb.append("    paymentDayOfMonth: ").append(toIndentedString(paymentDayOfMonth)).append("\n");
    sb.append("    transactionName: ").append(toIndentedString(transactionName)).append("\n");
    sb.append("    statementDayOfMonth: ").append(toIndentedString(statementDayOfMonth)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("income_amount");
    openapiFields.add("payment_day_of_month");
    openapiFields.add("transaction_name");
    openapiFields.add("statement_day_of_month");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("income_amount");
    openapiRequiredFields.add("payment_day_of_month");
    openapiRequiredFields.add("transaction_name");
    openapiRequiredFields.add("statement_day_of_month");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InflowModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InflowModel.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InflowModel is not found in the empty JSON string", InflowModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InflowModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("transaction_name") != null && !jsonObj.get("transaction_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_name").toString()));
      }
      if (jsonObj.get("statement_day_of_month") != null && !jsonObj.get("statement_day_of_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_day_of_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_day_of_month").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InflowModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InflowModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InflowModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InflowModel.class));

       return (TypeAdapter<T>) new TypeAdapter<InflowModel>() {
           @Override
           public void write(JsonWriter out, InflowModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InflowModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InflowModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InflowModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InflowModel
  * @throws IOException if the JSON string is invalid with respect to InflowModel
  */
  public static InflowModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InflowModel.class);
  }

 /**
  * Convert an instance of InflowModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

