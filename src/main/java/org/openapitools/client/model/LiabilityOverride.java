/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.PSLFStatus;
import org.openapitools.client.model.StudentLoanRepaymentModel;
import org.openapitools.client.model.StudentLoanStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Used to configure Sandbox test data for the Liabilities product
 */
@ApiModel(description = "Used to configure Sandbox test data for the Liabilities product")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class LiabilityOverride {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PURCHASE_APR = "purchase_apr";
  @SerializedName(SERIALIZED_NAME_PURCHASE_APR)
  private BigDecimal purchaseApr;

  public static final String SERIALIZED_NAME_CASH_APR = "cash_apr";
  @SerializedName(SERIALIZED_NAME_CASH_APR)
  private BigDecimal cashApr;

  public static final String SERIALIZED_NAME_BALANCE_TRANSFER_APR = "balance_transfer_apr";
  @SerializedName(SERIALIZED_NAME_BALANCE_TRANSFER_APR)
  private BigDecimal balanceTransferApr;

  public static final String SERIALIZED_NAME_SPECIAL_APR = "special_apr";
  @SerializedName(SERIALIZED_NAME_SPECIAL_APR)
  private BigDecimal specialApr;

  public static final String SERIALIZED_NAME_LAST_PAYMENT_AMOUNT = "last_payment_amount";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT_AMOUNT)
  private BigDecimal lastPaymentAmount;

  public static final String SERIALIZED_NAME_MINIMUM_PAYMENT_AMOUNT = "minimum_payment_amount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PAYMENT_AMOUNT)
  private BigDecimal minimumPaymentAmount;

  public static final String SERIALIZED_NAME_IS_OVERDUE = "is_overdue";
  @SerializedName(SERIALIZED_NAME_IS_OVERDUE)
  private Boolean isOverdue;

  public static final String SERIALIZED_NAME_ORIGINATION_DATE = "origination_date";
  @SerializedName(SERIALIZED_NAME_ORIGINATION_DATE)
  private LocalDate originationDate;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private BigDecimal principal;

  public static final String SERIALIZED_NAME_NOMINAL_APR = "nominal_apr";
  @SerializedName(SERIALIZED_NAME_NOMINAL_APR)
  private BigDecimal nominalApr;

  public static final String SERIALIZED_NAME_INTEREST_CAPITALIZATION_GRACE_PERIOD_MONTHS = "interest_capitalization_grace_period_months";
  @SerializedName(SERIALIZED_NAME_INTEREST_CAPITALIZATION_GRACE_PERIOD_MONTHS)
  private BigDecimal interestCapitalizationGracePeriodMonths;

  public static final String SERIALIZED_NAME_REPAYMENT_MODEL = "repayment_model";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_MODEL)
  private StudentLoanRepaymentModel repaymentModel;

  public static final String SERIALIZED_NAME_EXPECTED_PAYOFF_DATE = "expected_payoff_date";
  @SerializedName(SERIALIZED_NAME_EXPECTED_PAYOFF_DATE)
  private LocalDate expectedPayoffDate;

  public static final String SERIALIZED_NAME_GUARANTOR = "guarantor";
  @SerializedName(SERIALIZED_NAME_GUARANTOR)
  private String guarantor;

  public static final String SERIALIZED_NAME_IS_FEDERAL = "is_federal";
  @SerializedName(SERIALIZED_NAME_IS_FEDERAL)
  private Boolean isFederal;

  public static final String SERIALIZED_NAME_LOAN_NAME = "loan_name";
  @SerializedName(SERIALIZED_NAME_LOAN_NAME)
  private String loanName;

  public static final String SERIALIZED_NAME_LOAN_STATUS = "loan_status";
  @SerializedName(SERIALIZED_NAME_LOAN_STATUS)
  private StudentLoanStatus loanStatus;

  public static final String SERIALIZED_NAME_PAYMENT_REFERENCE_NUMBER = "payment_reference_number";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REFERENCE_NUMBER)
  private String paymentReferenceNumber;

  public static final String SERIALIZED_NAME_PSLF_STATUS = "pslf_status";
  @SerializedName(SERIALIZED_NAME_PSLF_STATUS)
  private PSLFStatus pslfStatus;

  public static final String SERIALIZED_NAME_REPAYMENT_PLAN_DESCRIPTION = "repayment_plan_description";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_PLAN_DESCRIPTION)
  private String repaymentPlanDescription;

  public static final String SERIALIZED_NAME_REPAYMENT_PLAN_TYPE = "repayment_plan_type";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_PLAN_TYPE)
  private String repaymentPlanType;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequence_number";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  public static final String SERIALIZED_NAME_SERVICER_ADDRESS = "servicer_address";
  @SerializedName(SERIALIZED_NAME_SERVICER_ADDRESS)
  private Address servicerAddress;

  public LiabilityOverride() { 
  }

  public LiabilityOverride type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the liability object, either &#x60;credit&#x60; or &#x60;student&#x60;. Mortgages are not currently supported in the custom Sandbox.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public LiabilityOverride purchaseApr(BigDecimal purchaseApr) {
    
    this.purchaseApr = purchaseApr;
    return this;
  }

   /**
   * The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
   * @return purchaseApr
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.")

  public BigDecimal getPurchaseApr() {
    return purchaseApr;
  }


  public void setPurchaseApr(BigDecimal purchaseApr) {
    this.purchaseApr = purchaseApr;
  }


  public LiabilityOverride cashApr(BigDecimal cashApr) {
    
    this.cashApr = cashApr;
    return this;
  }

   /**
   * The cash APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
   * @return cashApr
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The cash APR percentage value. Can only be set if `type` is `credit`.")

  public BigDecimal getCashApr() {
    return cashApr;
  }


  public void setCashApr(BigDecimal cashApr) {
    this.cashApr = cashApr;
  }


  public LiabilityOverride balanceTransferApr(BigDecimal balanceTransferApr) {
    
    this.balanceTransferApr = balanceTransferApr;
    return this;
  }

   /**
   * The balance transfer APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
   * @return balanceTransferApr
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The balance transfer APR percentage value. Can only be set if `type` is `credit`. Can only be set if `type` is `credit`.")

  public BigDecimal getBalanceTransferApr() {
    return balanceTransferApr;
  }


  public void setBalanceTransferApr(BigDecimal balanceTransferApr) {
    this.balanceTransferApr = balanceTransferApr;
  }


  public LiabilityOverride specialApr(BigDecimal specialApr) {
    
    this.specialApr = specialApr;
    return this;
  }

   /**
   * The special APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
   * @return specialApr
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The special APR percentage value. Can only be set if `type` is `credit`.")

  public BigDecimal getSpecialApr() {
    return specialApr;
  }


  public void setSpecialApr(BigDecimal specialApr) {
    this.specialApr = specialApr;
  }


  public LiabilityOverride lastPaymentAmount(BigDecimal lastPaymentAmount) {
    
    this.lastPaymentAmount = lastPaymentAmount;
    return this;
  }

   /**
   * Override the &#x60;last_payment_amount&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
   * @return lastPaymentAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `last_payment_amount` field. Can only be set if `type` is `credit`.")

  public BigDecimal getLastPaymentAmount() {
    return lastPaymentAmount;
  }


  public void setLastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
  }


  public LiabilityOverride minimumPaymentAmount(BigDecimal minimumPaymentAmount) {
    
    this.minimumPaymentAmount = minimumPaymentAmount;
    return this;
  }

   /**
   * Override the &#x60;minimum_payment_amount&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60; or &#x60;student&#x60;.
   * @return minimumPaymentAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.")

  public BigDecimal getMinimumPaymentAmount() {
    return minimumPaymentAmount;
  }


  public void setMinimumPaymentAmount(BigDecimal minimumPaymentAmount) {
    this.minimumPaymentAmount = minimumPaymentAmount;
  }


  public LiabilityOverride isOverdue(Boolean isOverdue) {
    
    this.isOverdue = isOverdue;
    return this;
  }

   /**
   * Override the &#x60;is_overdue&#x60; field
   * @return isOverdue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `is_overdue` field")

  public Boolean getIsOverdue() {
    return isOverdue;
  }


  public void setIsOverdue(Boolean isOverdue) {
    this.isOverdue = isOverdue;
  }


  public LiabilityOverride originationDate(LocalDate originationDate) {
    
    this.originationDate = originationDate;
    return this;
  }

   /**
   * The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return originationDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.")

  public LocalDate getOriginationDate() {
    return originationDate;
  }


  public void setOriginationDate(LocalDate originationDate) {
    this.originationDate = originationDate;
  }


  public LiabilityOverride principal(BigDecimal principal) {
    
    this.principal = principal;
    return this;
  }

   /**
   * The original loan principal. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return principal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The original loan principal. Can only be set if `type` is `student`.")

  public BigDecimal getPrincipal() {
    return principal;
  }


  public void setPrincipal(BigDecimal principal) {
    this.principal = principal;
  }


  public LiabilityOverride nominalApr(BigDecimal nominalApr) {
    
    this.nominalApr = nominalApr;
    return this;
  }

   /**
   * The interest rate on the loan as a percentage. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return nominalApr
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The interest rate on the loan as a percentage. Can only be set if `type` is `student`.")

  public BigDecimal getNominalApr() {
    return nominalApr;
  }


  public void setNominalApr(BigDecimal nominalApr) {
    this.nominalApr = nominalApr;
  }


  public LiabilityOverride interestCapitalizationGracePeriodMonths(BigDecimal interestCapitalizationGracePeriodMonths) {
    
    this.interestCapitalizationGracePeriodMonths = interestCapitalizationGracePeriodMonths;
    return this;
  }

   /**
   * If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return interestCapitalizationGracePeriodMonths
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`.")

  public BigDecimal getInterestCapitalizationGracePeriodMonths() {
    return interestCapitalizationGracePeriodMonths;
  }


  public void setInterestCapitalizationGracePeriodMonths(BigDecimal interestCapitalizationGracePeriodMonths) {
    this.interestCapitalizationGracePeriodMonths = interestCapitalizationGracePeriodMonths;
  }


  public LiabilityOverride repaymentModel(StudentLoanRepaymentModel repaymentModel) {
    
    this.repaymentModel = repaymentModel;
    return this;
  }

   /**
   * Get repaymentModel
   * @return repaymentModel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StudentLoanRepaymentModel getRepaymentModel() {
    return repaymentModel;
  }


  public void setRepaymentModel(StudentLoanRepaymentModel repaymentModel) {
    this.repaymentModel = repaymentModel;
  }


  public LiabilityOverride expectedPayoffDate(LocalDate expectedPayoffDate) {
    
    this.expectedPayoffDate = expectedPayoffDate;
    return this;
  }

   /**
   * Override the &#x60;expected_payoff_date&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return expectedPayoffDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `expected_payoff_date` field. Can only be set if `type` is `student`.")

  public LocalDate getExpectedPayoffDate() {
    return expectedPayoffDate;
  }


  public void setExpectedPayoffDate(LocalDate expectedPayoffDate) {
    this.expectedPayoffDate = expectedPayoffDate;
  }


  public LiabilityOverride guarantor(String guarantor) {
    
    this.guarantor = guarantor;
    return this;
  }

   /**
   * Override the &#x60;guarantor&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return guarantor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `guarantor` field. Can only be set if `type` is `student`.")

  public String getGuarantor() {
    return guarantor;
  }


  public void setGuarantor(String guarantor) {
    this.guarantor = guarantor;
  }


  public LiabilityOverride isFederal(Boolean isFederal) {
    
    this.isFederal = isFederal;
    return this;
  }

   /**
   * Override the &#x60;is_federal&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return isFederal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `is_federal` field. Can only be set if `type` is `student`.")

  public Boolean getIsFederal() {
    return isFederal;
  }


  public void setIsFederal(Boolean isFederal) {
    this.isFederal = isFederal;
  }


  public LiabilityOverride loanName(String loanName) {
    
    this.loanName = loanName;
    return this;
  }

   /**
   * Override the &#x60;loan_name&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return loanName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `loan_name` field. Can only be set if `type` is `student`.")

  public String getLoanName() {
    return loanName;
  }


  public void setLoanName(String loanName) {
    this.loanName = loanName;
  }


  public LiabilityOverride loanStatus(StudentLoanStatus loanStatus) {
    
    this.loanStatus = loanStatus;
    return this;
  }

   /**
   * Get loanStatus
   * @return loanStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StudentLoanStatus getLoanStatus() {
    return loanStatus;
  }


  public void setLoanStatus(StudentLoanStatus loanStatus) {
    this.loanStatus = loanStatus;
  }


  public LiabilityOverride paymentReferenceNumber(String paymentReferenceNumber) {
    
    this.paymentReferenceNumber = paymentReferenceNumber;
    return this;
  }

   /**
   * Override the &#x60;payment_reference_number&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return paymentReferenceNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `payment_reference_number` field. Can only be set if `type` is `student`.")

  public String getPaymentReferenceNumber() {
    return paymentReferenceNumber;
  }


  public void setPaymentReferenceNumber(String paymentReferenceNumber) {
    this.paymentReferenceNumber = paymentReferenceNumber;
  }


  public LiabilityOverride pslfStatus(PSLFStatus pslfStatus) {
    
    this.pslfStatus = pslfStatus;
    return this;
  }

   /**
   * Get pslfStatus
   * @return pslfStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PSLFStatus getPslfStatus() {
    return pslfStatus;
  }


  public void setPslfStatus(PSLFStatus pslfStatus) {
    this.pslfStatus = pslfStatus;
  }


  public LiabilityOverride repaymentPlanDescription(String repaymentPlanDescription) {
    
    this.repaymentPlanDescription = repaymentPlanDescription;
    return this;
  }

   /**
   * Override the &#x60;repayment_plan.description&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return repaymentPlanDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `repayment_plan.description` field. Can only be set if `type` is `student`.")

  public String getRepaymentPlanDescription() {
    return repaymentPlanDescription;
  }


  public void setRepaymentPlanDescription(String repaymentPlanDescription) {
    this.repaymentPlanDescription = repaymentPlanDescription;
  }


  public LiabilityOverride repaymentPlanType(String repaymentPlanType) {
    
    this.repaymentPlanType = repaymentPlanType;
    return this;
  }

   /**
   * Override the &#x60;repayment_plan.type&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. Possible values are: &#x60;\&quot;extended graduated\&quot;&#x60;, &#x60;\&quot;extended standard\&quot;&#x60;, &#x60;\&quot;graduated\&quot;&#x60;, &#x60;\&quot;income-contingent repayment\&quot;&#x60;, &#x60;\&quot;income-based repayment\&quot;&#x60;, &#x60;\&quot;interest only\&quot;&#x60;, &#x60;\&quot;other\&quot;&#x60;, &#x60;\&quot;pay as you earn\&quot;&#x60;, &#x60;\&quot;revised pay as you earn\&quot;&#x60;, or &#x60;\&quot;standard\&quot;&#x60;.
   * @return repaymentPlanType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `\"extended graduated\"`, `\"extended standard\"`, `\"graduated\"`, `\"income-contingent repayment\"`, `\"income-based repayment\"`, `\"interest only\"`, `\"other\"`, `\"pay as you earn\"`, `\"revised pay as you earn\"`, or `\"standard\"`.")

  public String getRepaymentPlanType() {
    return repaymentPlanType;
  }


  public void setRepaymentPlanType(String repaymentPlanType) {
    this.repaymentPlanType = repaymentPlanType;
  }


  public LiabilityOverride sequenceNumber(String sequenceNumber) {
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Override the &#x60;sequence_number&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
   * @return sequenceNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Override the `sequence_number` field. Can only be set if `type` is `student`.")

  public String getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public LiabilityOverride servicerAddress(Address servicerAddress) {
    
    this.servicerAddress = servicerAddress;
    return this;
  }

   /**
   * Get servicerAddress
   * @return servicerAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Address getServicerAddress() {
    return servicerAddress;
  }


  public void setServicerAddress(Address servicerAddress) {
    this.servicerAddress = servicerAddress;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public LiabilityOverride putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiabilityOverride liabilityOverride = (LiabilityOverride) o;
    return Objects.equals(this.type, liabilityOverride.type) &&
        Objects.equals(this.purchaseApr, liabilityOverride.purchaseApr) &&
        Objects.equals(this.cashApr, liabilityOverride.cashApr) &&
        Objects.equals(this.balanceTransferApr, liabilityOverride.balanceTransferApr) &&
        Objects.equals(this.specialApr, liabilityOverride.specialApr) &&
        Objects.equals(this.lastPaymentAmount, liabilityOverride.lastPaymentAmount) &&
        Objects.equals(this.minimumPaymentAmount, liabilityOverride.minimumPaymentAmount) &&
        Objects.equals(this.isOverdue, liabilityOverride.isOverdue) &&
        Objects.equals(this.originationDate, liabilityOverride.originationDate) &&
        Objects.equals(this.principal, liabilityOverride.principal) &&
        Objects.equals(this.nominalApr, liabilityOverride.nominalApr) &&
        Objects.equals(this.interestCapitalizationGracePeriodMonths, liabilityOverride.interestCapitalizationGracePeriodMonths) &&
        Objects.equals(this.repaymentModel, liabilityOverride.repaymentModel) &&
        Objects.equals(this.expectedPayoffDate, liabilityOverride.expectedPayoffDate) &&
        Objects.equals(this.guarantor, liabilityOverride.guarantor) &&
        Objects.equals(this.isFederal, liabilityOverride.isFederal) &&
        Objects.equals(this.loanName, liabilityOverride.loanName) &&
        Objects.equals(this.loanStatus, liabilityOverride.loanStatus) &&
        Objects.equals(this.paymentReferenceNumber, liabilityOverride.paymentReferenceNumber) &&
        Objects.equals(this.pslfStatus, liabilityOverride.pslfStatus) &&
        Objects.equals(this.repaymentPlanDescription, liabilityOverride.repaymentPlanDescription) &&
        Objects.equals(this.repaymentPlanType, liabilityOverride.repaymentPlanType) &&
        Objects.equals(this.sequenceNumber, liabilityOverride.sequenceNumber) &&
        Objects.equals(this.servicerAddress, liabilityOverride.servicerAddress)&&
        Objects.equals(this.additionalProperties, liabilityOverride.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, purchaseApr, cashApr, balanceTransferApr, specialApr, lastPaymentAmount, minimumPaymentAmount, isOverdue, originationDate, principal, nominalApr, interestCapitalizationGracePeriodMonths, repaymentModel, expectedPayoffDate, guarantor, isFederal, loanName, loanStatus, paymentReferenceNumber, pslfStatus, repaymentPlanDescription, repaymentPlanType, sequenceNumber, servicerAddress, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiabilityOverride {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    purchaseApr: ").append(toIndentedString(purchaseApr)).append("\n");
    sb.append("    cashApr: ").append(toIndentedString(cashApr)).append("\n");
    sb.append("    balanceTransferApr: ").append(toIndentedString(balanceTransferApr)).append("\n");
    sb.append("    specialApr: ").append(toIndentedString(specialApr)).append("\n");
    sb.append("    lastPaymentAmount: ").append(toIndentedString(lastPaymentAmount)).append("\n");
    sb.append("    minimumPaymentAmount: ").append(toIndentedString(minimumPaymentAmount)).append("\n");
    sb.append("    isOverdue: ").append(toIndentedString(isOverdue)).append("\n");
    sb.append("    originationDate: ").append(toIndentedString(originationDate)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    nominalApr: ").append(toIndentedString(nominalApr)).append("\n");
    sb.append("    interestCapitalizationGracePeriodMonths: ").append(toIndentedString(interestCapitalizationGracePeriodMonths)).append("\n");
    sb.append("    repaymentModel: ").append(toIndentedString(repaymentModel)).append("\n");
    sb.append("    expectedPayoffDate: ").append(toIndentedString(expectedPayoffDate)).append("\n");
    sb.append("    guarantor: ").append(toIndentedString(guarantor)).append("\n");
    sb.append("    isFederal: ").append(toIndentedString(isFederal)).append("\n");
    sb.append("    loanName: ").append(toIndentedString(loanName)).append("\n");
    sb.append("    loanStatus: ").append(toIndentedString(loanStatus)).append("\n");
    sb.append("    paymentReferenceNumber: ").append(toIndentedString(paymentReferenceNumber)).append("\n");
    sb.append("    pslfStatus: ").append(toIndentedString(pslfStatus)).append("\n");
    sb.append("    repaymentPlanDescription: ").append(toIndentedString(repaymentPlanDescription)).append("\n");
    sb.append("    repaymentPlanType: ").append(toIndentedString(repaymentPlanType)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    servicerAddress: ").append(toIndentedString(servicerAddress)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("purchase_apr");
    openapiFields.add("cash_apr");
    openapiFields.add("balance_transfer_apr");
    openapiFields.add("special_apr");
    openapiFields.add("last_payment_amount");
    openapiFields.add("minimum_payment_amount");
    openapiFields.add("is_overdue");
    openapiFields.add("origination_date");
    openapiFields.add("principal");
    openapiFields.add("nominal_apr");
    openapiFields.add("interest_capitalization_grace_period_months");
    openapiFields.add("repayment_model");
    openapiFields.add("expected_payoff_date");
    openapiFields.add("guarantor");
    openapiFields.add("is_federal");
    openapiFields.add("loan_name");
    openapiFields.add("loan_status");
    openapiFields.add("payment_reference_number");
    openapiFields.add("pslf_status");
    openapiFields.add("repayment_plan_description");
    openapiFields.add("repayment_plan_type");
    openapiFields.add("sequence_number");
    openapiFields.add("servicer_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("purchase_apr");
    openapiRequiredFields.add("cash_apr");
    openapiRequiredFields.add("balance_transfer_apr");
    openapiRequiredFields.add("special_apr");
    openapiRequiredFields.add("last_payment_amount");
    openapiRequiredFields.add("minimum_payment_amount");
    openapiRequiredFields.add("is_overdue");
    openapiRequiredFields.add("origination_date");
    openapiRequiredFields.add("principal");
    openapiRequiredFields.add("nominal_apr");
    openapiRequiredFields.add("interest_capitalization_grace_period_months");
    openapiRequiredFields.add("repayment_model");
    openapiRequiredFields.add("expected_payoff_date");
    openapiRequiredFields.add("guarantor");
    openapiRequiredFields.add("is_federal");
    openapiRequiredFields.add("loan_name");
    openapiRequiredFields.add("loan_status");
    openapiRequiredFields.add("payment_reference_number");
    openapiRequiredFields.add("pslf_status");
    openapiRequiredFields.add("repayment_plan_description");
    openapiRequiredFields.add("repayment_plan_type");
    openapiRequiredFields.add("sequence_number");
    openapiRequiredFields.add("servicer_address");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiabilityOverride
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LiabilityOverride.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiabilityOverride is not found in the empty JSON string", LiabilityOverride.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiabilityOverride.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("guarantor") != null && !jsonObj.get("guarantor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guarantor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guarantor").toString()));
      }
      if (jsonObj.get("loan_name") != null && !jsonObj.get("loan_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loan_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loan_name").toString()));
      }
      if (jsonObj.get("payment_reference_number") != null && !jsonObj.get("payment_reference_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_reference_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_reference_number").toString()));
      }
      if (jsonObj.get("repayment_plan_description") != null && !jsonObj.get("repayment_plan_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repayment_plan_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repayment_plan_description").toString()));
      }
      if (jsonObj.get("repayment_plan_type") != null && !jsonObj.get("repayment_plan_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repayment_plan_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repayment_plan_type").toString()));
      }
      if (jsonObj.get("sequence_number") != null && !jsonObj.get("sequence_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequence_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequence_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiabilityOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiabilityOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiabilityOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiabilityOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<LiabilityOverride>() {
           @Override
           public void write(JsonWriter out, LiabilityOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiabilityOverride read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiabilityOverride instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiabilityOverride given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiabilityOverride
  * @throws IOException if the JSON string is invalid with respect to LiabilityOverride
  */
  public static LiabilityOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiabilityOverride.class);
  }

 /**
  * Convert an instance of LiabilityOverride to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

