/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies options for initializing Link for use with the Income (beta) product. This field is required if &#x60;income_verification&#x60; is included in the &#x60;products&#x60; array.
 */
@ApiModel(description = "Specifies options for initializing Link for use with the Income (beta) product. This field is required if `income_verification` is included in the `products` array.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class LinkTokenCreateRequestIncomeVerification {
  public static final String SERIALIZED_NAME_INCOME_VERIFICATION_ID = "income_verification_id";
  @SerializedName(SERIALIZED_NAME_INCOME_VERIFICATION_ID)
  private String incomeVerificationId;

  public static final String SERIALIZED_NAME_ASSET_REPORT_ID = "asset_report_id";
  @SerializedName(SERIALIZED_NAME_ASSET_REPORT_ID)
  private String assetReportId;

  public static final String SERIALIZED_NAME_PRECHECK_ID = "precheck_id";
  @SerializedName(SERIALIZED_NAME_PRECHECK_ID)
  private String precheckId;

  public static final String SERIALIZED_NAME_ACCESS_TOKENS = "access_tokens";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKENS)
  private List<String> accessTokens = null;

  public LinkTokenCreateRequestIncomeVerification() { 
  }

  public LinkTokenCreateRequestIncomeVerification incomeVerificationId(String incomeVerificationId) {
    
    this.incomeVerificationId = incomeVerificationId;
    return this;
  }

   /**
   * The &#x60;income_verification_id&#x60; of the verification instance, as provided by &#x60;/income/verification/create&#x60;.
   * @return incomeVerificationId
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The `income_verification_id` of the verification instance, as provided by `/income/verification/create`.")

  public String getIncomeVerificationId() {
    return incomeVerificationId;
  }


  public void setIncomeVerificationId(String incomeVerificationId) {
    this.incomeVerificationId = incomeVerificationId;
  }


  public LinkTokenCreateRequestIncomeVerification assetReportId(String assetReportId) {
    
    this.assetReportId = assetReportId;
    return this;
  }

   /**
   * The &#x60;asset_report_id&#x60; of an asset report associated with the user, as provided by &#x60;/asset_report/create&#x60;. Providing an &#x60;asset_report_id&#x60; is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped.
   * @return assetReportId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped.")

  public String getAssetReportId() {
    return assetReportId;
  }


  public void setAssetReportId(String assetReportId) {
    this.assetReportId = assetReportId;
  }


  public LinkTokenCreateRequestIncomeVerification precheckId(String precheckId) {
    
    this.precheckId = precheckId;
    return this;
  }

   /**
   * The ID of a precheck created with &#x60;/income/verification/precheck&#x60;. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user.
   * @return precheckId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user.")

  public String getPrecheckId() {
    return precheckId;
  }


  public void setPrecheckId(String precheckId) {
    this.precheckId = precheckId;
  }


  public LinkTokenCreateRequestIncomeVerification accessTokens(List<String> accessTokens) {
    
    this.accessTokens = accessTokens;
    return this;
  }

  public LinkTokenCreateRequestIncomeVerification addAccessTokensItem(String accessTokensItem) {
    if (this.accessTokens == null) {
      this.accessTokens = new ArrayList<>();
    }
    this.accessTokens.add(accessTokensItem);
    return this;
  }

   /**
   * An array of access tokens corresponding to the Items that will be cross-referenced with the product data. If the &#x60;transactions&#x60; product was not initialized for the Items during link, it will be initialized after this Link session.
   * @return accessTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of access tokens corresponding to the Items that will be cross-referenced with the product data. If the `transactions` product was not initialized for the Items during link, it will be initialized after this Link session.")

  public List<String> getAccessTokens() {
    return accessTokens;
  }


  public void setAccessTokens(List<String> accessTokens) {
    this.accessTokens = accessTokens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkTokenCreateRequestIncomeVerification linkTokenCreateRequestIncomeVerification = (LinkTokenCreateRequestIncomeVerification) o;
    return Objects.equals(this.incomeVerificationId, linkTokenCreateRequestIncomeVerification.incomeVerificationId) &&
        Objects.equals(this.assetReportId, linkTokenCreateRequestIncomeVerification.assetReportId) &&
        Objects.equals(this.precheckId, linkTokenCreateRequestIncomeVerification.precheckId) &&
        Objects.equals(this.accessTokens, linkTokenCreateRequestIncomeVerification.accessTokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(incomeVerificationId, assetReportId, precheckId, accessTokens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkTokenCreateRequestIncomeVerification {\n");
    sb.append("    incomeVerificationId: ").append(toIndentedString(incomeVerificationId)).append("\n");
    sb.append("    assetReportId: ").append(toIndentedString(assetReportId)).append("\n");
    sb.append("    precheckId: ").append(toIndentedString(precheckId)).append("\n");
    sb.append("    accessTokens: ").append(toIndentedString(accessTokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("income_verification_id");
    openapiFields.add("asset_report_id");
    openapiFields.add("precheck_id");
    openapiFields.add("access_tokens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LinkTokenCreateRequestIncomeVerification
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LinkTokenCreateRequestIncomeVerification.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkTokenCreateRequestIncomeVerification is not found in the empty JSON string", LinkTokenCreateRequestIncomeVerification.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LinkTokenCreateRequestIncomeVerification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkTokenCreateRequestIncomeVerification` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("income_verification_id") != null && !jsonObj.get("income_verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `income_verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("income_verification_id").toString()));
      }
      if (jsonObj.get("asset_report_id") != null && !jsonObj.get("asset_report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_report_id").toString()));
      }
      if (jsonObj.get("precheck_id") != null && !jsonObj.get("precheck_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `precheck_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("precheck_id").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("access_tokens") != null && !jsonObj.get("access_tokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_tokens` to be an array in the JSON string but got `%s`", jsonObj.get("access_tokens").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkTokenCreateRequestIncomeVerification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkTokenCreateRequestIncomeVerification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkTokenCreateRequestIncomeVerification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkTokenCreateRequestIncomeVerification.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkTokenCreateRequestIncomeVerification>() {
           @Override
           public void write(JsonWriter out, LinkTokenCreateRequestIncomeVerification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkTokenCreateRequestIncomeVerification read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LinkTokenCreateRequestIncomeVerification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LinkTokenCreateRequestIncomeVerification
  * @throws IOException if the JSON string is invalid with respect to LinkTokenCreateRequestIncomeVerification
  */
  public static LinkTokenCreateRequestIncomeVerification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkTokenCreateRequestIncomeVerification.class);
  }

 /**
  * Convert an instance of LinkTokenCreateRequestIncomeVerification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

