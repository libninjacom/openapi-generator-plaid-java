/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account and bank identifier number data used to configure the test account. All values are optional.
 */
@ApiModel(description = "Account and bank identifier number data used to configure the test account. All values are optional.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-13T10:01:14.758140-04:00[America/New_York]")
public class Numbers {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_ACH_ROUTING = "ach_routing";
  @SerializedName(SERIALIZED_NAME_ACH_ROUTING)
  private String achRouting;

  public static final String SERIALIZED_NAME_ACH_WIRE_ROUTING = "ach_wire_routing";
  @SerializedName(SERIALIZED_NAME_ACH_WIRE_ROUTING)
  private String achWireRouting;

  public static final String SERIALIZED_NAME_EFT_INSTITUTION = "eft_institution";
  @SerializedName(SERIALIZED_NAME_EFT_INSTITUTION)
  private String eftInstitution;

  public static final String SERIALIZED_NAME_EFT_BRANCH = "eft_branch";
  @SerializedName(SERIALIZED_NAME_EFT_BRANCH)
  private String eftBranch;

  public static final String SERIALIZED_NAME_INTERNATIONAL_BIC = "international_bic";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_BIC)
  private String internationalBic;

  public static final String SERIALIZED_NAME_INTERNATIONAL_IBAN = "international_iban";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_IBAN)
  private String internationalIban;

  public static final String SERIALIZED_NAME_BACS_SORT_CODE = "bacs_sort_code";
  @SerializedName(SERIALIZED_NAME_BACS_SORT_CODE)
  private String bacsSortCode;

  public Numbers() { 
  }

  public Numbers account(String account) {
    
    this.account = account;
    return this;
  }

   /**
   * Will be used for the account number.
   * @return account
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Will be used for the account number.")

  public String getAccount() {
    return account;
  }


  public void setAccount(String account) {
    this.account = account;
  }


  public Numbers achRouting(String achRouting) {
    
    this.achRouting = achRouting;
    return this;
  }

   /**
   * Must be a valid ACH routing number.
   * @return achRouting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Must be a valid ACH routing number.")

  public String getAchRouting() {
    return achRouting;
  }


  public void setAchRouting(String achRouting) {
    this.achRouting = achRouting;
  }


  public Numbers achWireRouting(String achWireRouting) {
    
    this.achWireRouting = achWireRouting;
    return this;
  }

   /**
   * Must be a valid wire transfer routing number.
   * @return achWireRouting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Must be a valid wire transfer routing number.")

  public String getAchWireRouting() {
    return achWireRouting;
  }


  public void setAchWireRouting(String achWireRouting) {
    this.achWireRouting = achWireRouting;
  }


  public Numbers eftInstitution(String eftInstitution) {
    
    this.eftInstitution = eftInstitution;
    return this;
  }

   /**
   * EFT institution number. Must be specified alongside &#x60;eft_branch&#x60;.
   * @return eftInstitution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EFT institution number. Must be specified alongside `eft_branch`.")

  public String getEftInstitution() {
    return eftInstitution;
  }


  public void setEftInstitution(String eftInstitution) {
    this.eftInstitution = eftInstitution;
  }


  public Numbers eftBranch(String eftBranch) {
    
    this.eftBranch = eftBranch;
    return this;
  }

   /**
   * EFT branch number. Must be specified alongside &#x60;eft_institution&#x60;.
   * @return eftBranch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EFT branch number. Must be specified alongside `eft_institution`.")

  public String getEftBranch() {
    return eftBranch;
  }


  public void setEftBranch(String eftBranch) {
    this.eftBranch = eftBranch;
  }


  public Numbers internationalBic(String internationalBic) {
    
    this.internationalBic = internationalBic;
    return this;
  }

   /**
   * Bank identifier code (BIC). Must be specified alongside &#x60;international_iban&#x60;.
   * @return internationalBic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank identifier code (BIC). Must be specified alongside `international_iban`.")

  public String getInternationalBic() {
    return internationalBic;
  }


  public void setInternationalBic(String internationalBic) {
    this.internationalBic = internationalBic;
  }


  public Numbers internationalIban(String internationalIban) {
    
    this.internationalIban = internationalIban;
    return this;
  }

   /**
   * International bank account number (IBAN). If no account number is specified via &#x60;account&#x60;, will also be used as the account number by default. Must be specified alongside &#x60;international_bic&#x60;.
   * @return internationalIban
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`.")

  public String getInternationalIban() {
    return internationalIban;
  }


  public void setInternationalIban(String internationalIban) {
    this.internationalIban = internationalIban;
  }


  public Numbers bacsSortCode(String bacsSortCode) {
    
    this.bacsSortCode = bacsSortCode;
    return this;
  }

   /**
   * BACS sort code
   * @return bacsSortCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BACS sort code")

  public String getBacsSortCode() {
    return bacsSortCode;
  }


  public void setBacsSortCode(String bacsSortCode) {
    this.bacsSortCode = bacsSortCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public Numbers putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Numbers numbers = (Numbers) o;
    return Objects.equals(this.account, numbers.account) &&
        Objects.equals(this.achRouting, numbers.achRouting) &&
        Objects.equals(this.achWireRouting, numbers.achWireRouting) &&
        Objects.equals(this.eftInstitution, numbers.eftInstitution) &&
        Objects.equals(this.eftBranch, numbers.eftBranch) &&
        Objects.equals(this.internationalBic, numbers.internationalBic) &&
        Objects.equals(this.internationalIban, numbers.internationalIban) &&
        Objects.equals(this.bacsSortCode, numbers.bacsSortCode)&&
        Objects.equals(this.additionalProperties, numbers.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, achRouting, achWireRouting, eftInstitution, eftBranch, internationalBic, internationalIban, bacsSortCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Numbers {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    achRouting: ").append(toIndentedString(achRouting)).append("\n");
    sb.append("    achWireRouting: ").append(toIndentedString(achWireRouting)).append("\n");
    sb.append("    eftInstitution: ").append(toIndentedString(eftInstitution)).append("\n");
    sb.append("    eftBranch: ").append(toIndentedString(eftBranch)).append("\n");
    sb.append("    internationalBic: ").append(toIndentedString(internationalBic)).append("\n");
    sb.append("    internationalIban: ").append(toIndentedString(internationalIban)).append("\n");
    sb.append("    bacsSortCode: ").append(toIndentedString(bacsSortCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("ach_routing");
    openapiFields.add("ach_wire_routing");
    openapiFields.add("eft_institution");
    openapiFields.add("eft_branch");
    openapiFields.add("international_bic");
    openapiFields.add("international_iban");
    openapiFields.add("bacs_sort_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Numbers
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Numbers.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Numbers is not found in the empty JSON string", Numbers.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if (jsonObj.get("ach_routing") != null && !jsonObj.get("ach_routing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ach_routing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ach_routing").toString()));
      }
      if (jsonObj.get("ach_wire_routing") != null && !jsonObj.get("ach_wire_routing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ach_wire_routing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ach_wire_routing").toString()));
      }
      if (jsonObj.get("eft_institution") != null && !jsonObj.get("eft_institution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eft_institution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eft_institution").toString()));
      }
      if (jsonObj.get("eft_branch") != null && !jsonObj.get("eft_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eft_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eft_branch").toString()));
      }
      if (jsonObj.get("international_bic") != null && !jsonObj.get("international_bic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international_bic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international_bic").toString()));
      }
      if (jsonObj.get("international_iban") != null && !jsonObj.get("international_iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international_iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international_iban").toString()));
      }
      if (jsonObj.get("bacs_sort_code") != null && !jsonObj.get("bacs_sort_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bacs_sort_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bacs_sort_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Numbers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Numbers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Numbers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Numbers.class));

       return (TypeAdapter<T>) new TypeAdapter<Numbers>() {
           @Override
           public void write(JsonWriter out, Numbers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Numbers read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Numbers instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Numbers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Numbers
  * @throws IOException if the JSON string is invalid with respect to Numbers
  */
  public static Numbers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Numbers.class);
  }

 /**
  * Convert an instance of Numbers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

