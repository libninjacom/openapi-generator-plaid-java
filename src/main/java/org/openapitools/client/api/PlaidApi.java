/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsBalanceGetRequest;
import org.openapitools.client.model.AccountsGetRequest;
import org.openapitools.client.model.AccountsGetResponse;
import org.openapitools.client.model.ApplicationGetRequest;
import org.openapitools.client.model.ApplicationGetResponse;
import org.openapitools.client.model.AssetReportAuditCopyCreateRequest;
import org.openapitools.client.model.AssetReportAuditCopyCreateResponse;
import org.openapitools.client.model.AssetReportAuditCopyGetRequest;
import org.openapitools.client.model.AssetReportAuditCopyRemoveRequest;
import org.openapitools.client.model.AssetReportAuditCopyRemoveResponse;
import org.openapitools.client.model.AssetReportCreateRequest;
import org.openapitools.client.model.AssetReportCreateResponse;
import org.openapitools.client.model.AssetReportFilterRequest;
import org.openapitools.client.model.AssetReportFilterResponse;
import org.openapitools.client.model.AssetReportGetRequest;
import org.openapitools.client.model.AssetReportGetResponse;
import org.openapitools.client.model.AssetReportPDFGetRequest;
import org.openapitools.client.model.AssetReportRefreshRequest;
import org.openapitools.client.model.AssetReportRefreshResponse;
import org.openapitools.client.model.AssetReportRemoveRequest;
import org.openapitools.client.model.AssetReportRemoveResponse;
import org.openapitools.client.model.AuthGetRequest;
import org.openapitools.client.model.AuthGetResponse;
import org.openapitools.client.model.BankTransferBalanceGetRequest;
import org.openapitools.client.model.BankTransferBalanceGetResponse;
import org.openapitools.client.model.BankTransferCancelRequest;
import org.openapitools.client.model.BankTransferCancelResponse;
import org.openapitools.client.model.BankTransferCreateRequest;
import org.openapitools.client.model.BankTransferCreateResponse;
import org.openapitools.client.model.BankTransferEventListRequest;
import org.openapitools.client.model.BankTransferEventListResponse;
import org.openapitools.client.model.BankTransferEventSyncRequest;
import org.openapitools.client.model.BankTransferEventSyncResponse;
import org.openapitools.client.model.BankTransferGetRequest;
import org.openapitools.client.model.BankTransferGetResponse;
import org.openapitools.client.model.BankTransferListRequest;
import org.openapitools.client.model.BankTransferListResponse;
import org.openapitools.client.model.BankTransferMigrateAccountRequest;
import org.openapitools.client.model.BankTransferMigrateAccountResponse;
import org.openapitools.client.model.BankTransferSweepGetRequest;
import org.openapitools.client.model.BankTransferSweepGetResponse;
import org.openapitools.client.model.BankTransferSweepListRequest;
import org.openapitools.client.model.BankTransferSweepListResponse;
import org.openapitools.client.model.CategoriesGetResponse;
import org.openapitools.client.model.DepositSwitchAltCreateRequest;
import org.openapitools.client.model.DepositSwitchAltCreateResponse;
import org.openapitools.client.model.DepositSwitchCreateRequest;
import org.openapitools.client.model.DepositSwitchCreateResponse;
import org.openapitools.client.model.DepositSwitchGetRequest;
import org.openapitools.client.model.DepositSwitchGetResponse;
import org.openapitools.client.model.DepositSwitchTokenCreateRequest;
import org.openapitools.client.model.DepositSwitchTokenCreateResponse;
import org.openapitools.client.model.EmployersSearchRequest;
import org.openapitools.client.model.EmployersSearchResponse;
import org.openapitools.client.model.EmploymentVerificationGetRequest;
import org.openapitools.client.model.EmploymentVerificationGetResponse;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.IdentityGetRequest;
import org.openapitools.client.model.IdentityGetResponse;
import org.openapitools.client.model.IncomeVerificationCreateRequest;
import org.openapitools.client.model.IncomeVerificationCreateResponse;
import org.openapitools.client.model.IncomeVerificationDocumentsDownloadRequest;
import org.openapitools.client.model.IncomeVerificationPaystubGetRequest;
import org.openapitools.client.model.IncomeVerificationPaystubGetResponse;
import org.openapitools.client.model.IncomeVerificationPaystubsGetRequest;
import org.openapitools.client.model.IncomeVerificationPaystubsGetResponse;
import org.openapitools.client.model.IncomeVerificationPrecheckRequest;
import org.openapitools.client.model.IncomeVerificationPrecheckResponse;
import org.openapitools.client.model.IncomeVerificationRefreshRequest;
import org.openapitools.client.model.IncomeVerificationRefreshResponse;
import org.openapitools.client.model.IncomeVerificationSummaryGetRequest;
import org.openapitools.client.model.IncomeVerificationSummaryGetResponse;
import org.openapitools.client.model.IncomeVerificationTaxformsGetRequest;
import org.openapitools.client.model.IncomeVerificationTaxformsGetResponse;
import org.openapitools.client.model.InstitutionsGetByIdRequest;
import org.openapitools.client.model.InstitutionsGetByIdResponse;
import org.openapitools.client.model.InstitutionsGetRequest;
import org.openapitools.client.model.InstitutionsGetResponse;
import org.openapitools.client.model.InstitutionsSearchRequest;
import org.openapitools.client.model.InstitutionsSearchResponse;
import org.openapitools.client.model.InvestmentsHoldingsGetRequest;
import org.openapitools.client.model.InvestmentsHoldingsGetResponse;
import org.openapitools.client.model.InvestmentsTransactionsGetRequest;
import org.openapitools.client.model.InvestmentsTransactionsGetResponse;
import org.openapitools.client.model.ItemAccessTokenInvalidateRequest;
import org.openapitools.client.model.ItemAccessTokenInvalidateResponse;
import org.openapitools.client.model.ItemApplicationListRequest;
import org.openapitools.client.model.ItemApplicationListResponse;
import org.openapitools.client.model.ItemApplicationScopesUpdateRequest;
import org.openapitools.client.model.ItemApplicationScopesUpdateResponse;
import org.openapitools.client.model.ItemGetRequest;
import org.openapitools.client.model.ItemGetResponse;
import org.openapitools.client.model.ItemImportRequest;
import org.openapitools.client.model.ItemImportResponse;
import org.openapitools.client.model.ItemPublicTokenCreateRequest;
import org.openapitools.client.model.ItemPublicTokenCreateResponse;
import org.openapitools.client.model.ItemPublicTokenExchangeRequest;
import org.openapitools.client.model.ItemPublicTokenExchangeResponse;
import org.openapitools.client.model.ItemRemoveRequest;
import org.openapitools.client.model.ItemRemoveResponse;
import org.openapitools.client.model.ItemWebhookUpdateRequest;
import org.openapitools.client.model.ItemWebhookUpdateResponse;
import org.openapitools.client.model.LiabilitiesGetRequest;
import org.openapitools.client.model.LiabilitiesGetResponse;
import org.openapitools.client.model.LinkTokenCreateRequest;
import org.openapitools.client.model.LinkTokenCreateResponse;
import org.openapitools.client.model.LinkTokenGetRequest;
import org.openapitools.client.model.LinkTokenGetResponse;
import org.openapitools.client.model.PaymentInitiationPaymentCreateRequest;
import org.openapitools.client.model.PaymentInitiationPaymentCreateResponse;
import org.openapitools.client.model.PaymentInitiationPaymentGetRequest;
import org.openapitools.client.model.PaymentInitiationPaymentGetResponse;
import org.openapitools.client.model.PaymentInitiationPaymentListRequest;
import org.openapitools.client.model.PaymentInitiationPaymentListResponse;
import org.openapitools.client.model.PaymentInitiationPaymentReverseRequest;
import org.openapitools.client.model.PaymentInitiationPaymentReverseResponse;
import org.openapitools.client.model.PaymentInitiationPaymentTokenCreateRequest;
import org.openapitools.client.model.PaymentInitiationPaymentTokenCreateResponse;
import org.openapitools.client.model.PaymentInitiationRecipientCreateRequest;
import org.openapitools.client.model.PaymentInitiationRecipientCreateResponse;
import org.openapitools.client.model.PaymentInitiationRecipientGetRequest;
import org.openapitools.client.model.PaymentInitiationRecipientGetResponse;
import org.openapitools.client.model.PaymentInitiationRecipientListRequest;
import org.openapitools.client.model.PaymentInitiationRecipientListResponse;
import org.openapitools.client.model.ProcessorApexProcessorTokenCreateRequest;
import org.openapitools.client.model.ProcessorAuthGetRequest;
import org.openapitools.client.model.ProcessorAuthGetResponse;
import org.openapitools.client.model.ProcessorBalanceGetRequest;
import org.openapitools.client.model.ProcessorBalanceGetResponse;
import org.openapitools.client.model.ProcessorBankTransferCreateRequest;
import org.openapitools.client.model.ProcessorBankTransferCreateResponse;
import org.openapitools.client.model.ProcessorIdentityGetRequest;
import org.openapitools.client.model.ProcessorIdentityGetResponse;
import org.openapitools.client.model.ProcessorStripeBankAccountTokenCreateRequest;
import org.openapitools.client.model.ProcessorStripeBankAccountTokenCreateResponse;
import org.openapitools.client.model.ProcessorTokenCreateRequest;
import org.openapitools.client.model.ProcessorTokenCreateResponse;
import org.openapitools.client.model.SandboxBankTransferFireWebhookRequest;
import org.openapitools.client.model.SandboxBankTransferFireWebhookResponse;
import org.openapitools.client.model.SandboxBankTransferSimulateRequest;
import org.openapitools.client.model.SandboxBankTransferSimulateResponse;
import org.openapitools.client.model.SandboxIncomeFireWebhookRequest;
import org.openapitools.client.model.SandboxIncomeFireWebhookResponse;
import org.openapitools.client.model.SandboxItemFireWebhookRequest;
import org.openapitools.client.model.SandboxItemFireWebhookResponse;
import org.openapitools.client.model.SandboxItemResetLoginRequest;
import org.openapitools.client.model.SandboxItemResetLoginResponse;
import org.openapitools.client.model.SandboxItemSetVerificationStatusRequest;
import org.openapitools.client.model.SandboxItemSetVerificationStatusResponse;
import org.openapitools.client.model.SandboxOauthSelectAccountsRequest;
import org.openapitools.client.model.SandboxProcessorTokenCreateRequest;
import org.openapitools.client.model.SandboxProcessorTokenCreateResponse;
import org.openapitools.client.model.SandboxPublicTokenCreateRequest;
import org.openapitools.client.model.SandboxPublicTokenCreateResponse;
import org.openapitools.client.model.SandboxTransferRepaymentSimulateRequest;
import org.openapitools.client.model.SandboxTransferRepaymentSimulateResponse;
import org.openapitools.client.model.SandboxTransferSimulateRequest;
import org.openapitools.client.model.SandboxTransferSimulateResponse;
import org.openapitools.client.model.SandboxTransferSweepSimulateRequest;
import org.openapitools.client.model.SandboxTransferSweepSimulateResponse;
import org.openapitools.client.model.SignalDecisionReportRequest;
import org.openapitools.client.model.SignalDecisionReportResponse;
import org.openapitools.client.model.SignalEvaluateRequest;
import org.openapitools.client.model.SignalEvaluateResponse;
import org.openapitools.client.model.SignalReturnReportRequest;
import org.openapitools.client.model.SignalReturnReportResponse;
import org.openapitools.client.model.TransactionsGetRequest;
import org.openapitools.client.model.TransactionsGetResponse;
import org.openapitools.client.model.TransactionsRecurringGetRequest;
import org.openapitools.client.model.TransactionsRecurringGetResponse;
import org.openapitools.client.model.TransactionsRefreshRequest;
import org.openapitools.client.model.TransactionsRefreshResponse;
import org.openapitools.client.model.TransactionsSyncRequest;
import org.openapitools.client.model.TransactionsSyncResponse;
import org.openapitools.client.model.TransferAuthorizationCreateRequest;
import org.openapitools.client.model.TransferAuthorizationCreateResponse;
import org.openapitools.client.model.TransferCancelRequest;
import org.openapitools.client.model.TransferCancelResponse;
import org.openapitools.client.model.TransferCreateRequest;
import org.openapitools.client.model.TransferCreateResponse;
import org.openapitools.client.model.TransferEventListRequest;
import org.openapitools.client.model.TransferEventListResponse;
import org.openapitools.client.model.TransferEventSyncRequest;
import org.openapitools.client.model.TransferEventSyncResponse;
import org.openapitools.client.model.TransferGetRequest;
import org.openapitools.client.model.TransferGetResponse;
import org.openapitools.client.model.TransferIntentCreateRequest;
import org.openapitools.client.model.TransferIntentCreateResponse;
import org.openapitools.client.model.TransferIntentGetRequest;
import org.openapitools.client.model.TransferIntentGetResponse;
import org.openapitools.client.model.TransferListRequest;
import org.openapitools.client.model.TransferListResponse;
import org.openapitools.client.model.TransferRepaymentListRequest;
import org.openapitools.client.model.TransferRepaymentListResponse;
import org.openapitools.client.model.TransferRepaymentReturnListRequest;
import org.openapitools.client.model.TransferRepaymentReturnListResponse;
import org.openapitools.client.model.TransferSweepGetRequest;
import org.openapitools.client.model.TransferSweepGetResponse;
import org.openapitools.client.model.TransferSweepListRequest;
import org.openapitools.client.model.TransferSweepListResponse;
import org.openapitools.client.model.WalletGetRequest;
import org.openapitools.client.model.WalletGetResponse;
import org.openapitools.client.model.WalletTransactionExecuteRequest;
import org.openapitools.client.model.WalletTransactionExecuteResponse;
import org.openapitools.client.model.WalletTransactionsListRequest;
import org.openapitools.client.model.WalletTransactionsListResponse;
import org.openapitools.client.model.WebhookVerificationKeyGetRequest;
import org.openapitools.client.model.WebhookVerificationKeyGetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlaidApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaidApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaidApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsBalanceGet
     * @param accountsBalanceGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#accountsbalanceget">Retrieve real-time balance data Documentation</a>
     */
    public okhttp3.Call accountsBalanceGetCall(AccountsBalanceGetRequest accountsBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsBalanceGetRequest;

        // create path and map variables
        String localVarPath = "/accounts/balance/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsBalanceGetValidateBeforeCall(AccountsBalanceGetRequest accountsBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountsBalanceGetRequest' is set
        if (accountsBalanceGetRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsBalanceGetRequest' when calling accountsBalanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = accountsBalanceGetCall(accountsBalanceGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve real-time balance data
     * The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
     * @param accountsBalanceGetRequest  (required)
     * @return AccountsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#accountsbalanceget">Retrieve real-time balance data Documentation</a>
     */
    public AccountsGetResponse accountsBalanceGet(AccountsBalanceGetRequest accountsBalanceGetRequest) throws ApiException {
        ApiResponse<AccountsGetResponse> localVarResp = accountsBalanceGetWithHttpInfo(accountsBalanceGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve real-time balance data
     * The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
     * @param accountsBalanceGetRequest  (required)
     * @return ApiResponse&lt;AccountsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#accountsbalanceget">Retrieve real-time balance data Documentation</a>
     */
    public ApiResponse<AccountsGetResponse> accountsBalanceGetWithHttpInfo(AccountsBalanceGetRequest accountsBalanceGetRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsBalanceGetValidateBeforeCall(accountsBalanceGetRequest, null);
        Type localVarReturnType = new TypeToken<AccountsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve real-time balance data (asynchronously)
     * The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
     * @param accountsBalanceGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#accountsbalanceget">Retrieve real-time balance data Documentation</a>
     */
    public okhttp3.Call accountsBalanceGetAsync(AccountsBalanceGetRequest accountsBalanceGetRequest, final ApiCallback<AccountsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsBalanceGetValidateBeforeCall(accountsBalanceGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGet
     * @param accountsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/accounts/#accountsget">Retrieve accounts Documentation</a>
     */
    public okhttp3.Call accountsGetCall(AccountsGetRequest accountsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsGetRequest;

        // create path and map variables
        String localVarPath = "/accounts/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetValidateBeforeCall(AccountsGetRequest accountsGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountsGetRequest' is set
        if (accountsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsGetRequest' when calling accountsGet(Async)");
        }
        

        okhttp3.Call localVarCall = accountsGetCall(accountsGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve accounts
     * The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
     * @param accountsGetRequest  (required)
     * @return AccountsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/accounts/#accountsget">Retrieve accounts Documentation</a>
     */
    public AccountsGetResponse accountsGet(AccountsGetRequest accountsGetRequest) throws ApiException {
        ApiResponse<AccountsGetResponse> localVarResp = accountsGetWithHttpInfo(accountsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve accounts
     * The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
     * @param accountsGetRequest  (required)
     * @return ApiResponse&lt;AccountsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/accounts/#accountsget">Retrieve accounts Documentation</a>
     */
    public ApiResponse<AccountsGetResponse> accountsGetWithHttpInfo(AccountsGetRequest accountsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(accountsGetRequest, null);
        Type localVarReturnType = new TypeToken<AccountsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve accounts (asynchronously)
     * The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
     * @param accountsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/accounts/#accountsget">Retrieve accounts Documentation</a>
     */
    public okhttp3.Call accountsGetAsync(AccountsGetRequest accountsGetRequest, final ApiCallback<AccountsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(accountsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGet
     * @param applicationGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetCall(ApplicationGetRequest applicationGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationGetRequest;

        // create path and map variables
        String localVarPath = "/application/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGetValidateBeforeCall(ApplicationGetRequest applicationGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationGetRequest' is set
        if (applicationGetRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationGetRequest' when calling applicationGet(Async)");
        }
        

        okhttp3.Call localVarCall = applicationGetCall(applicationGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve information about a Plaid application
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @param applicationGetRequest  (required)
     * @return ApplicationGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGetResponse applicationGet(ApplicationGetRequest applicationGetRequest) throws ApiException {
        ApiResponse<ApplicationGetResponse> localVarResp = applicationGetWithHttpInfo(applicationGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve information about a Plaid application
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @param applicationGetRequest  (required)
     * @return ApiResponse&lt;ApplicationGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGetResponse> applicationGetWithHttpInfo(ApplicationGetRequest applicationGetRequest) throws ApiException {
        okhttp3.Call localVarCall = applicationGetValidateBeforeCall(applicationGetRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information about a Plaid application (asynchronously)
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @param applicationGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetAsync(ApplicationGetRequest applicationGetRequest, final ApiCallback<ApplicationGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGetValidateBeforeCall(applicationGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportAuditCopyCreate
     * @param assetReportAuditCopyCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportaudit_copycreate">Create Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyCreateCall(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportAuditCopyCreateRequest;

        // create path and map variables
        String localVarPath = "/asset_report/audit_copy/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportAuditCopyCreateValidateBeforeCall(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportAuditCopyCreateRequest' is set
        if (assetReportAuditCopyCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportAuditCopyCreateRequest' when calling assetReportAuditCopyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportAuditCopyCreateCall(assetReportAuditCopyCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Asset Report Audit Copy
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param assetReportAuditCopyCreateRequest  (required)
     * @return AssetReportAuditCopyCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportaudit_copycreate">Create Asset Report Audit Copy Documentation</a>
     */
    public AssetReportAuditCopyCreateResponse assetReportAuditCopyCreate(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest) throws ApiException {
        ApiResponse<AssetReportAuditCopyCreateResponse> localVarResp = assetReportAuditCopyCreateWithHttpInfo(assetReportAuditCopyCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Asset Report Audit Copy
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param assetReportAuditCopyCreateRequest  (required)
     * @return ApiResponse&lt;AssetReportAuditCopyCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportaudit_copycreate">Create Asset Report Audit Copy Documentation</a>
     */
    public ApiResponse<AssetReportAuditCopyCreateResponse> assetReportAuditCopyCreateWithHttpInfo(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportAuditCopyCreateValidateBeforeCall(assetReportAuditCopyCreateRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportAuditCopyCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Asset Report Audit Copy (asynchronously)
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param assetReportAuditCopyCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportaudit_copycreate">Create Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyCreateAsync(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, final ApiCallback<AssetReportAuditCopyCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportAuditCopyCreateValidateBeforeCall(assetReportAuditCopyCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportAuditCopyCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportAuditCopyGet
     * @param assetReportAuditCopyGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyGetCall(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportAuditCopyGetRequest;

        // create path and map variables
        String localVarPath = "/asset_report/audit_copy/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportAuditCopyGetValidateBeforeCall(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportAuditCopyGetRequest' is set
        if (assetReportAuditCopyGetRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportAuditCopyGetRequest' when calling assetReportAuditCopyGet(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportAuditCopyGetCall(assetReportAuditCopyGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an Asset Report Audit Copy
     * &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
     * @param assetReportAuditCopyGetRequest  (required)
     * @return AssetReportGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report Audit Copy Documentation</a>
     */
    public AssetReportGetResponse assetReportAuditCopyGet(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest) throws ApiException {
        ApiResponse<AssetReportGetResponse> localVarResp = assetReportAuditCopyGetWithHttpInfo(assetReportAuditCopyGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Report Audit Copy
     * &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
     * @param assetReportAuditCopyGetRequest  (required)
     * @return ApiResponse&lt;AssetReportGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report Audit Copy Documentation</a>
     */
    public ApiResponse<AssetReportGetResponse> assetReportAuditCopyGetWithHttpInfo(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportAuditCopyGetValidateBeforeCall(assetReportAuditCopyGetRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Report Audit Copy (asynchronously)
     * &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
     * @param assetReportAuditCopyGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyGetAsync(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, final ApiCallback<AssetReportGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportAuditCopyGetValidateBeforeCall(assetReportAuditCopyGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportAuditCopyRemove
     * @param assetReportAuditCopyRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportaudit_copyremove">Remove Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyRemoveCall(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportAuditCopyRemoveRequest;

        // create path and map variables
        String localVarPath = "/asset_report/audit_copy/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportAuditCopyRemoveValidateBeforeCall(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportAuditCopyRemoveRequest' is set
        if (assetReportAuditCopyRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportAuditCopyRemoveRequest' when calling assetReportAuditCopyRemove(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportAuditCopyRemoveCall(assetReportAuditCopyRemoveRequest, _callback);
        return localVarCall;

    }

    /**
     * Remove Asset Report Audit Copy
     * The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param assetReportAuditCopyRemoveRequest  (required)
     * @return AssetReportAuditCopyRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportaudit_copyremove">Remove Asset Report Audit Copy Documentation</a>
     */
    public AssetReportAuditCopyRemoveResponse assetReportAuditCopyRemove(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest) throws ApiException {
        ApiResponse<AssetReportAuditCopyRemoveResponse> localVarResp = assetReportAuditCopyRemoveWithHttpInfo(assetReportAuditCopyRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Remove Asset Report Audit Copy
     * The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param assetReportAuditCopyRemoveRequest  (required)
     * @return ApiResponse&lt;AssetReportAuditCopyRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportaudit_copyremove">Remove Asset Report Audit Copy Documentation</a>
     */
    public ApiResponse<AssetReportAuditCopyRemoveResponse> assetReportAuditCopyRemoveWithHttpInfo(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportAuditCopyRemoveValidateBeforeCall(assetReportAuditCopyRemoveRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportAuditCopyRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Asset Report Audit Copy (asynchronously)
     * The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param assetReportAuditCopyRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportaudit_copyremove">Remove Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyRemoveAsync(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, final ApiCallback<AssetReportAuditCopyRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportAuditCopyRemoveValidateBeforeCall(assetReportAuditCopyRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportAuditCopyRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportCreate
     * @param assetReportCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportcreate">Create an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportCreateCall(AssetReportCreateRequest assetReportCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportCreateRequest;

        // create path and map variables
        String localVarPath = "/asset_report/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportCreateValidateBeforeCall(AssetReportCreateRequest assetReportCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportCreateRequest' is set
        if (assetReportCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportCreateRequest' when calling assetReportCreate(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportCreateCall(assetReportCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create an Asset Report
     * The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
     * @param assetReportCreateRequest  (required)
     * @return AssetReportCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportcreate">Create an Asset Report Documentation</a>
     */
    public AssetReportCreateResponse assetReportCreate(AssetReportCreateRequest assetReportCreateRequest) throws ApiException {
        ApiResponse<AssetReportCreateResponse> localVarResp = assetReportCreateWithHttpInfo(assetReportCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Asset Report
     * The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
     * @param assetReportCreateRequest  (required)
     * @return ApiResponse&lt;AssetReportCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportcreate">Create an Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportCreateResponse> assetReportCreateWithHttpInfo(AssetReportCreateRequest assetReportCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportCreateValidateBeforeCall(assetReportCreateRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Asset Report (asynchronously)
     * The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
     * @param assetReportCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportcreate">Create an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportCreateAsync(AssetReportCreateRequest assetReportCreateRequest, final ApiCallback<AssetReportCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportCreateValidateBeforeCall(assetReportCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportFilter
     * @param assetReportFilterRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportfilter">Filter Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportFilterCall(AssetReportFilterRequest assetReportFilterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportFilterRequest;

        // create path and map variables
        String localVarPath = "/asset_report/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportFilterValidateBeforeCall(AssetReportFilterRequest assetReportFilterRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportFilterRequest' is set
        if (assetReportFilterRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportFilterRequest' when calling assetReportFilter(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportFilterCall(assetReportFilterRequest, _callback);
        return localVarCall;

    }

    /**
     * Filter Asset Report
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
     * @param assetReportFilterRequest  (required)
     * @return AssetReportFilterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportfilter">Filter Asset Report Documentation</a>
     */
    public AssetReportFilterResponse assetReportFilter(AssetReportFilterRequest assetReportFilterRequest) throws ApiException {
        ApiResponse<AssetReportFilterResponse> localVarResp = assetReportFilterWithHttpInfo(assetReportFilterRequest);
        return localVarResp.getData();
    }

    /**
     * Filter Asset Report
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
     * @param assetReportFilterRequest  (required)
     * @return ApiResponse&lt;AssetReportFilterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportfilter">Filter Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportFilterResponse> assetReportFilterWithHttpInfo(AssetReportFilterRequest assetReportFilterRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportFilterValidateBeforeCall(assetReportFilterRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportFilterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filter Asset Report (asynchronously)
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
     * @param assetReportFilterRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportfilter">Filter Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportFilterAsync(AssetReportFilterRequest assetReportFilterRequest, final ApiCallback<AssetReportFilterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportFilterValidateBeforeCall(assetReportFilterRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportFilterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportGet
     * @param assetReportGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportget">Retrieve an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportGetCall(AssetReportGetRequest assetReportGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportGetRequest;

        // create path and map variables
        String localVarPath = "/asset_report/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportGetValidateBeforeCall(AssetReportGetRequest assetReportGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportGetRequest' is set
        if (assetReportGetRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportGetRequest' when calling assetReportGet(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportGetCall(assetReportGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an Asset Report
     * The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
     * @param assetReportGetRequest  (required)
     * @return AssetReportGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportget">Retrieve an Asset Report Documentation</a>
     */
    public AssetReportGetResponse assetReportGet(AssetReportGetRequest assetReportGetRequest) throws ApiException {
        ApiResponse<AssetReportGetResponse> localVarResp = assetReportGetWithHttpInfo(assetReportGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Report
     * The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
     * @param assetReportGetRequest  (required)
     * @return ApiResponse&lt;AssetReportGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportget">Retrieve an Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportGetResponse> assetReportGetWithHttpInfo(AssetReportGetRequest assetReportGetRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportGetValidateBeforeCall(assetReportGetRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Report (asynchronously)
     * The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
     * @param assetReportGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportget">Retrieve an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportGetAsync(AssetReportGetRequest assetReportGetRequest, final ApiCallback<AssetReportGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportGetValidateBeforeCall(assetReportGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportPdfGet
     * @param assetReportPDFGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Asset Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportpdfget">Retrieve a PDF Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportPdfGetCall(AssetReportPDFGetRequest assetReportPDFGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportPDFGetRequest;

        // create path and map variables
        String localVarPath = "/asset_report/pdf/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportPdfGetValidateBeforeCall(AssetReportPDFGetRequest assetReportPDFGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportPDFGetRequest' is set
        if (assetReportPDFGetRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportPDFGetRequest' when calling assetReportPdfGet(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportPdfGetCall(assetReportPDFGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a PDF Asset Report
     * The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @param assetReportPDFGetRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Asset Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportpdfget">Retrieve a PDF Asset Report Documentation</a>
     */
    public File assetReportPdfGet(AssetReportPDFGetRequest assetReportPDFGetRequest) throws ApiException {
        ApiResponse<File> localVarResp = assetReportPdfGetWithHttpInfo(assetReportPDFGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a PDF Asset Report
     * The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @param assetReportPDFGetRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Asset Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportpdfget">Retrieve a PDF Asset Report Documentation</a>
     */
    public ApiResponse<File> assetReportPdfGetWithHttpInfo(AssetReportPDFGetRequest assetReportPDFGetRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportPdfGetValidateBeforeCall(assetReportPDFGetRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a PDF Asset Report (asynchronously)
     * The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @param assetReportPDFGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Asset Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportpdfget">Retrieve a PDF Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportPdfGetAsync(AssetReportPDFGetRequest assetReportPDFGetRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportPdfGetValidateBeforeCall(assetReportPDFGetRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportRefresh
     * @param assetReportRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportrefresh">Refresh an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportRefreshCall(AssetReportRefreshRequest assetReportRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportRefreshRequest;

        // create path and map variables
        String localVarPath = "/asset_report/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportRefreshValidateBeforeCall(AssetReportRefreshRequest assetReportRefreshRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportRefreshRequest' is set
        if (assetReportRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportRefreshRequest' when calling assetReportRefresh(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportRefreshCall(assetReportRefreshRequest, _callback);
        return localVarCall;

    }

    /**
     * Refresh an Asset Report
     * An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
     * @param assetReportRefreshRequest  (required)
     * @return AssetReportRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportrefresh">Refresh an Asset Report Documentation</a>
     */
    public AssetReportRefreshResponse assetReportRefresh(AssetReportRefreshRequest assetReportRefreshRequest) throws ApiException {
        ApiResponse<AssetReportRefreshResponse> localVarResp = assetReportRefreshWithHttpInfo(assetReportRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh an Asset Report
     * An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
     * @param assetReportRefreshRequest  (required)
     * @return ApiResponse&lt;AssetReportRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportrefresh">Refresh an Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportRefreshResponse> assetReportRefreshWithHttpInfo(AssetReportRefreshRequest assetReportRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportRefreshValidateBeforeCall(assetReportRefreshRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh an Asset Report (asynchronously)
     * An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
     * @param assetReportRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportrefresh">Refresh an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportRefreshAsync(AssetReportRefreshRequest assetReportRefreshRequest, final ApiCallback<AssetReportRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportRefreshValidateBeforeCall(assetReportRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportRemove
     * @param assetReportRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportremove">Delete an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportRemoveCall(AssetReportRemoveRequest assetReportRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportRemoveRequest;

        // create path and map variables
        String localVarPath = "/asset_report/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportRemoveValidateBeforeCall(AssetReportRemoveRequest assetReportRemoveRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetReportRemoveRequest' is set
        if (assetReportRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportRemoveRequest' when calling assetReportRemove(Async)");
        }
        

        okhttp3.Call localVarCall = assetReportRemoveCall(assetReportRemoveRequest, _callback);
        return localVarCall;

    }

    /**
     * Delete an Asset Report
     * The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
     * @param assetReportRemoveRequest  (required)
     * @return AssetReportRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportremove">Delete an Asset Report Documentation</a>
     */
    public AssetReportRemoveResponse assetReportRemove(AssetReportRemoveRequest assetReportRemoveRequest) throws ApiException {
        ApiResponse<AssetReportRemoveResponse> localVarResp = assetReportRemoveWithHttpInfo(assetReportRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Delete an Asset Report
     * The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
     * @param assetReportRemoveRequest  (required)
     * @return ApiResponse&lt;AssetReportRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportremove">Delete an Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportRemoveResponse> assetReportRemoveWithHttpInfo(AssetReportRemoveRequest assetReportRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportRemoveValidateBeforeCall(assetReportRemoveRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Asset Report (asynchronously)
     * The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
     * @param assetReportRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#asset_reportremove">Delete an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportRemoveAsync(AssetReportRemoveRequest assetReportRemoveRequest, final ApiCallback<AssetReportRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportRemoveValidateBeforeCall(assetReportRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authGet
     * @param authGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#authget">Retrieve auth data Documentation</a>
     */
    public okhttp3.Call authGetCall(AuthGetRequest authGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authGetRequest;

        // create path and map variables
        String localVarPath = "/auth/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authGetValidateBeforeCall(AuthGetRequest authGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authGetRequest' is set
        if (authGetRequest == null) {
            throw new ApiException("Missing the required parameter 'authGetRequest' when calling authGet(Async)");
        }
        

        okhttp3.Call localVarCall = authGetCall(authGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve auth data
     * The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @param authGetRequest  (required)
     * @return AuthGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#authget">Retrieve auth data Documentation</a>
     */
    public AuthGetResponse authGet(AuthGetRequest authGetRequest) throws ApiException {
        ApiResponse<AuthGetResponse> localVarResp = authGetWithHttpInfo(authGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve auth data
     * The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @param authGetRequest  (required)
     * @return ApiResponse&lt;AuthGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#authget">Retrieve auth data Documentation</a>
     */
    public ApiResponse<AuthGetResponse> authGetWithHttpInfo(AuthGetRequest authGetRequest) throws ApiException {
        okhttp3.Call localVarCall = authGetValidateBeforeCall(authGetRequest, null);
        Type localVarReturnType = new TypeToken<AuthGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve auth data (asynchronously)
     * The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @param authGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#authget">Retrieve auth data Documentation</a>
     */
    public okhttp3.Call authGetAsync(AuthGetRequest authGetRequest, final ApiCallback<AuthGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authGetValidateBeforeCall(authGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferBalanceGet
     * @param bankTransferBalanceGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferbalanceget">Get balance of your Bank Transfer account Documentation</a>
     */
    public okhttp3.Call bankTransferBalanceGetCall(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferBalanceGetRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/balance/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferBalanceGetValidateBeforeCall(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferBalanceGetRequest' is set
        if (bankTransferBalanceGetRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferBalanceGetRequest' when calling bankTransferBalanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferBalanceGetCall(bankTransferBalanceGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get balance of your Bank Transfer account
     * Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @param bankTransferBalanceGetRequest  (required)
     * @return BankTransferBalanceGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferbalanceget">Get balance of your Bank Transfer account Documentation</a>
     */
    public BankTransferBalanceGetResponse bankTransferBalanceGet(BankTransferBalanceGetRequest bankTransferBalanceGetRequest) throws ApiException {
        ApiResponse<BankTransferBalanceGetResponse> localVarResp = bankTransferBalanceGetWithHttpInfo(bankTransferBalanceGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get balance of your Bank Transfer account
     * Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @param bankTransferBalanceGetRequest  (required)
     * @return ApiResponse&lt;BankTransferBalanceGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferbalanceget">Get balance of your Bank Transfer account Documentation</a>
     */
    public ApiResponse<BankTransferBalanceGetResponse> bankTransferBalanceGetWithHttpInfo(BankTransferBalanceGetRequest bankTransferBalanceGetRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferBalanceGetValidateBeforeCall(bankTransferBalanceGetRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferBalanceGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get balance of your Bank Transfer account (asynchronously)
     * Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @param bankTransferBalanceGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferbalanceget">Get balance of your Bank Transfer account Documentation</a>
     */
    public okhttp3.Call bankTransferBalanceGetAsync(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, final ApiCallback<BankTransferBalanceGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferBalanceGetValidateBeforeCall(bankTransferBalanceGetRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferBalanceGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferCancel
     * @param bankTransferCancelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercancel">Cancel a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferCancelCall(BankTransferCancelRequest bankTransferCancelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferCancelRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferCancelValidateBeforeCall(BankTransferCancelRequest bankTransferCancelRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferCancelRequest' is set
        if (bankTransferCancelRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferCancelRequest' when calling bankTransferCancel(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferCancelCall(bankTransferCancelRequest, _callback);
        return localVarCall;

    }

    /**
     * Cancel a bank transfer
     * Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
     * @param bankTransferCancelRequest  (required)
     * @return BankTransferCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercancel">Cancel a bank transfer Documentation</a>
     */
    public BankTransferCancelResponse bankTransferCancel(BankTransferCancelRequest bankTransferCancelRequest) throws ApiException {
        ApiResponse<BankTransferCancelResponse> localVarResp = bankTransferCancelWithHttpInfo(bankTransferCancelRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel a bank transfer
     * Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
     * @param bankTransferCancelRequest  (required)
     * @return ApiResponse&lt;BankTransferCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercancel">Cancel a bank transfer Documentation</a>
     */
    public ApiResponse<BankTransferCancelResponse> bankTransferCancelWithHttpInfo(BankTransferCancelRequest bankTransferCancelRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferCancelValidateBeforeCall(bankTransferCancelRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a bank transfer (asynchronously)
     * Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
     * @param bankTransferCancelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercancel">Cancel a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferCancelAsync(BankTransferCancelRequest bankTransferCancelRequest, final ApiCallback<BankTransferCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferCancelValidateBeforeCall(bankTransferCancelRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferCreate
     * @param bankTransferCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercreate">Create a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferCreateCall(BankTransferCreateRequest bankTransferCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferCreateRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferCreateValidateBeforeCall(BankTransferCreateRequest bankTransferCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferCreateRequest' is set
        if (bankTransferCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferCreateRequest' when calling bankTransferCreate(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferCreateCall(bankTransferCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a bank transfer
     * Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
     * @param bankTransferCreateRequest  (required)
     * @return BankTransferCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercreate">Create a bank transfer Documentation</a>
     */
    public BankTransferCreateResponse bankTransferCreate(BankTransferCreateRequest bankTransferCreateRequest) throws ApiException {
        ApiResponse<BankTransferCreateResponse> localVarResp = bankTransferCreateWithHttpInfo(bankTransferCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a bank transfer
     * Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
     * @param bankTransferCreateRequest  (required)
     * @return ApiResponse&lt;BankTransferCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercreate">Create a bank transfer Documentation</a>
     */
    public ApiResponse<BankTransferCreateResponse> bankTransferCreateWithHttpInfo(BankTransferCreateRequest bankTransferCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferCreateValidateBeforeCall(bankTransferCreateRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a bank transfer (asynchronously)
     * Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
     * @param bankTransferCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercreate">Create a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferCreateAsync(BankTransferCreateRequest bankTransferCreateRequest, final ApiCallback<BankTransferCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferCreateValidateBeforeCall(bankTransferCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferEventList
     * @param bankTransferEventListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfereventlist">List bank transfer events Documentation</a>
     */
    public okhttp3.Call bankTransferEventListCall(BankTransferEventListRequest bankTransferEventListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferEventListRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/event/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferEventListValidateBeforeCall(BankTransferEventListRequest bankTransferEventListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferEventListRequest' is set
        if (bankTransferEventListRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferEventListRequest' when calling bankTransferEventList(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferEventListCall(bankTransferEventListRequest, _callback);
        return localVarCall;

    }

    /**
     * List bank transfer events
     * Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
     * @param bankTransferEventListRequest  (required)
     * @return BankTransferEventListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfereventlist">List bank transfer events Documentation</a>
     */
    public BankTransferEventListResponse bankTransferEventList(BankTransferEventListRequest bankTransferEventListRequest) throws ApiException {
        ApiResponse<BankTransferEventListResponse> localVarResp = bankTransferEventListWithHttpInfo(bankTransferEventListRequest);
        return localVarResp.getData();
    }

    /**
     * List bank transfer events
     * Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
     * @param bankTransferEventListRequest  (required)
     * @return ApiResponse&lt;BankTransferEventListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfereventlist">List bank transfer events Documentation</a>
     */
    public ApiResponse<BankTransferEventListResponse> bankTransferEventListWithHttpInfo(BankTransferEventListRequest bankTransferEventListRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferEventListValidateBeforeCall(bankTransferEventListRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferEventListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List bank transfer events (asynchronously)
     * Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
     * @param bankTransferEventListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfereventlist">List bank transfer events Documentation</a>
     */
    public okhttp3.Call bankTransferEventListAsync(BankTransferEventListRequest bankTransferEventListRequest, final ApiCallback<BankTransferEventListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferEventListValidateBeforeCall(bankTransferEventListRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferEventListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferEventSync
     * @param bankTransferEventSyncRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfereventsync">Sync bank transfer events Documentation</a>
     */
    public okhttp3.Call bankTransferEventSyncCall(BankTransferEventSyncRequest bankTransferEventSyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferEventSyncRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/event/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferEventSyncValidateBeforeCall(BankTransferEventSyncRequest bankTransferEventSyncRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferEventSyncRequest' is set
        if (bankTransferEventSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferEventSyncRequest' when calling bankTransferEventSync(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferEventSyncCall(bankTransferEventSyncRequest, _callback);
        return localVarCall;

    }

    /**
     * Sync bank transfer events
     * &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
     * @param bankTransferEventSyncRequest  (required)
     * @return BankTransferEventSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfereventsync">Sync bank transfer events Documentation</a>
     */
    public BankTransferEventSyncResponse bankTransferEventSync(BankTransferEventSyncRequest bankTransferEventSyncRequest) throws ApiException {
        ApiResponse<BankTransferEventSyncResponse> localVarResp = bankTransferEventSyncWithHttpInfo(bankTransferEventSyncRequest);
        return localVarResp.getData();
    }

    /**
     * Sync bank transfer events
     * &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
     * @param bankTransferEventSyncRequest  (required)
     * @return ApiResponse&lt;BankTransferEventSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfereventsync">Sync bank transfer events Documentation</a>
     */
    public ApiResponse<BankTransferEventSyncResponse> bankTransferEventSyncWithHttpInfo(BankTransferEventSyncRequest bankTransferEventSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferEventSyncValidateBeforeCall(bankTransferEventSyncRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferEventSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync bank transfer events (asynchronously)
     * &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
     * @param bankTransferEventSyncRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfereventsync">Sync bank transfer events Documentation</a>
     */
    public okhttp3.Call bankTransferEventSyncAsync(BankTransferEventSyncRequest bankTransferEventSyncRequest, final ApiCallback<BankTransferEventSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferEventSyncValidateBeforeCall(bankTransferEventSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferEventSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferGet
     * @param bankTransferGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferget">Retrieve a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferGetCall(BankTransferGetRequest bankTransferGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferGetRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferGetValidateBeforeCall(BankTransferGetRequest bankTransferGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferGetRequest' is set
        if (bankTransferGetRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferGetRequest' when calling bankTransferGet(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferGetCall(bankTransferGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a bank transfer
     * The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
     * @param bankTransferGetRequest  (required)
     * @return BankTransferGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferget">Retrieve a bank transfer Documentation</a>
     */
    public BankTransferGetResponse bankTransferGet(BankTransferGetRequest bankTransferGetRequest) throws ApiException {
        ApiResponse<BankTransferGetResponse> localVarResp = bankTransferGetWithHttpInfo(bankTransferGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a bank transfer
     * The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
     * @param bankTransferGetRequest  (required)
     * @return ApiResponse&lt;BankTransferGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferget">Retrieve a bank transfer Documentation</a>
     */
    public ApiResponse<BankTransferGetResponse> bankTransferGetWithHttpInfo(BankTransferGetRequest bankTransferGetRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferGetValidateBeforeCall(bankTransferGetRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a bank transfer (asynchronously)
     * The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
     * @param bankTransferGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferget">Retrieve a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferGetAsync(BankTransferGetRequest bankTransferGetRequest, final ApiCallback<BankTransferGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferGetValidateBeforeCall(bankTransferGetRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferList
     * @param bankTransferListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferlist">List bank transfers Documentation</a>
     */
    public okhttp3.Call bankTransferListCall(BankTransferListRequest bankTransferListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferListRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferListValidateBeforeCall(BankTransferListRequest bankTransferListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferListRequest' is set
        if (bankTransferListRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferListRequest' when calling bankTransferList(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferListCall(bankTransferListRequest, _callback);
        return localVarCall;

    }

    /**
     * List bank transfers
     * Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
     * @param bankTransferListRequest  (required)
     * @return BankTransferListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferlist">List bank transfers Documentation</a>
     */
    public BankTransferListResponse bankTransferList(BankTransferListRequest bankTransferListRequest) throws ApiException {
        ApiResponse<BankTransferListResponse> localVarResp = bankTransferListWithHttpInfo(bankTransferListRequest);
        return localVarResp.getData();
    }

    /**
     * List bank transfers
     * Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
     * @param bankTransferListRequest  (required)
     * @return ApiResponse&lt;BankTransferListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferlist">List bank transfers Documentation</a>
     */
    public ApiResponse<BankTransferListResponse> bankTransferListWithHttpInfo(BankTransferListRequest bankTransferListRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferListValidateBeforeCall(bankTransferListRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List bank transfers (asynchronously)
     * Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
     * @param bankTransferListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferlist">List bank transfers Documentation</a>
     */
    public okhttp3.Call bankTransferListAsync(BankTransferListRequest bankTransferListRequest, final ApiCallback<BankTransferListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferListValidateBeforeCall(bankTransferListRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferMigrateAccount
     * @param bankTransferMigrateAccountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfermigrate_account">Migrate account into Bank Transfers Documentation</a>
     */
    public okhttp3.Call bankTransferMigrateAccountCall(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferMigrateAccountRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/migrate_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferMigrateAccountValidateBeforeCall(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferMigrateAccountRequest' is set
        if (bankTransferMigrateAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferMigrateAccountRequest' when calling bankTransferMigrateAccount(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferMigrateAccountCall(bankTransferMigrateAccountRequest, _callback);
        return localVarCall;

    }

    /**
     * Migrate account into Bank Transfers
     * As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param bankTransferMigrateAccountRequest  (required)
     * @return BankTransferMigrateAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfermigrate_account">Migrate account into Bank Transfers Documentation</a>
     */
    public BankTransferMigrateAccountResponse bankTransferMigrateAccount(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest) throws ApiException {
        ApiResponse<BankTransferMigrateAccountResponse> localVarResp = bankTransferMigrateAccountWithHttpInfo(bankTransferMigrateAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Migrate account into Bank Transfers
     * As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param bankTransferMigrateAccountRequest  (required)
     * @return ApiResponse&lt;BankTransferMigrateAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfermigrate_account">Migrate account into Bank Transfers Documentation</a>
     */
    public ApiResponse<BankTransferMigrateAccountResponse> bankTransferMigrateAccountWithHttpInfo(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferMigrateAccountValidateBeforeCall(bankTransferMigrateAccountRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferMigrateAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Migrate account into Bank Transfers (asynchronously)
     * As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param bankTransferMigrateAccountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfermigrate_account">Migrate account into Bank Transfers Documentation</a>
     */
    public okhttp3.Call bankTransferMigrateAccountAsync(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, final ApiCallback<BankTransferMigrateAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferMigrateAccountValidateBeforeCall(bankTransferMigrateAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferMigrateAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferSweepGet
     * @param bankTransferSweepGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#bank_transfersweepget">Retrieve a sweep Documentation</a>
     */
    public okhttp3.Call bankTransferSweepGetCall(BankTransferSweepGetRequest bankTransferSweepGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferSweepGetRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/sweep/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferSweepGetValidateBeforeCall(BankTransferSweepGetRequest bankTransferSweepGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferSweepGetRequest' is set
        if (bankTransferSweepGetRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferSweepGetRequest' when calling bankTransferSweepGet(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferSweepGetCall(bankTransferSweepGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a sweep
     * The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param bankTransferSweepGetRequest  (required)
     * @return BankTransferSweepGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#bank_transfersweepget">Retrieve a sweep Documentation</a>
     */
    public BankTransferSweepGetResponse bankTransferSweepGet(BankTransferSweepGetRequest bankTransferSweepGetRequest) throws ApiException {
        ApiResponse<BankTransferSweepGetResponse> localVarResp = bankTransferSweepGetWithHttpInfo(bankTransferSweepGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a sweep
     * The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param bankTransferSweepGetRequest  (required)
     * @return ApiResponse&lt;BankTransferSweepGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#bank_transfersweepget">Retrieve a sweep Documentation</a>
     */
    public ApiResponse<BankTransferSweepGetResponse> bankTransferSweepGetWithHttpInfo(BankTransferSweepGetRequest bankTransferSweepGetRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferSweepGetValidateBeforeCall(bankTransferSweepGetRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferSweepGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a sweep (asynchronously)
     * The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param bankTransferSweepGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#bank_transfersweepget">Retrieve a sweep Documentation</a>
     */
    public okhttp3.Call bankTransferSweepGetAsync(BankTransferSweepGetRequest bankTransferSweepGetRequest, final ApiCallback<BankTransferSweepGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferSweepGetValidateBeforeCall(bankTransferSweepGetRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferSweepGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferSweepList
     * @param bankTransferSweepListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#bank_transfersweeplist">List sweeps Documentation</a>
     */
    public okhttp3.Call bankTransferSweepListCall(BankTransferSweepListRequest bankTransferSweepListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferSweepListRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/sweep/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferSweepListValidateBeforeCall(BankTransferSweepListRequest bankTransferSweepListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bankTransferSweepListRequest' is set
        if (bankTransferSweepListRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferSweepListRequest' when calling bankTransferSweepList(Async)");
        }
        

        okhttp3.Call localVarCall = bankTransferSweepListCall(bankTransferSweepListRequest, _callback);
        return localVarCall;

    }

    /**
     * List sweeps
     * The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
     * @param bankTransferSweepListRequest  (required)
     * @return BankTransferSweepListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#bank_transfersweeplist">List sweeps Documentation</a>
     */
    public BankTransferSweepListResponse bankTransferSweepList(BankTransferSweepListRequest bankTransferSweepListRequest) throws ApiException {
        ApiResponse<BankTransferSweepListResponse> localVarResp = bankTransferSweepListWithHttpInfo(bankTransferSweepListRequest);
        return localVarResp.getData();
    }

    /**
     * List sweeps
     * The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
     * @param bankTransferSweepListRequest  (required)
     * @return ApiResponse&lt;BankTransferSweepListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#bank_transfersweeplist">List sweeps Documentation</a>
     */
    public ApiResponse<BankTransferSweepListResponse> bankTransferSweepListWithHttpInfo(BankTransferSweepListRequest bankTransferSweepListRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferSweepListValidateBeforeCall(bankTransferSweepListRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferSweepListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List sweeps (asynchronously)
     * The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
     * @param bankTransferSweepListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#bank_transfersweeplist">List sweeps Documentation</a>
     */
    public okhttp3.Call bankTransferSweepListAsync(BankTransferSweepListRequest bankTransferSweepListRequest, final ApiCallback<BankTransferSweepListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferSweepListValidateBeforeCall(bankTransferSweepListRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferSweepListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesGet
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#categoriesget">Get Categories Documentation</a>
     */
    public okhttp3.Call categoriesGetCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/categories/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesGetValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling categoriesGet(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesGetCall(body, _callback);
        return localVarCall;

    }

    /**
     * Get Categories
     * Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @param body  (required)
     * @return CategoriesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#categoriesget">Get Categories Documentation</a>
     */
    public CategoriesGetResponse categoriesGet(Object body) throws ApiException {
        ApiResponse<CategoriesGetResponse> localVarResp = categoriesGetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Get Categories
     * Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @param body  (required)
     * @return ApiResponse&lt;CategoriesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#categoriesget">Get Categories Documentation</a>
     */
    public ApiResponse<CategoriesGetResponse> categoriesGetWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CategoriesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Categories (asynchronously)
     * Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#categoriesget">Get Categories Documentation</a>
     */
    public okhttp3.Call categoriesGetAsync(Object body, final ApiCallback<CategoriesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CategoriesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentToken
     * @param paymentInitiationPaymentTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/link/maintain-legacy-integration/#creating-a-payment-token">Create payment token Documentation</a>
     */
    @Deprecated
    public okhttp3.Call createPaymentTokenCall(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentTokenValidateBeforeCall(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInitiationPaymentTokenCreateRequest' is set
        if (paymentInitiationPaymentTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentTokenCreateRequest' when calling createPaymentToken(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentTokenCall(paymentInitiationPaymentTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create payment token
     * The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @param paymentInitiationPaymentTokenCreateRequest  (required)
     * @return PaymentInitiationPaymentTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/link/maintain-legacy-integration/#creating-a-payment-token">Create payment token Documentation</a>
     */
    @Deprecated
    public PaymentInitiationPaymentTokenCreateResponse createPaymentToken(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentTokenCreateResponse> localVarResp = createPaymentTokenWithHttpInfo(paymentInitiationPaymentTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create payment token
     * The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @param paymentInitiationPaymentTokenCreateRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/link/maintain-legacy-integration/#creating-a-payment-token">Create payment token Documentation</a>
     */
    @Deprecated
    public ApiResponse<PaymentInitiationPaymentTokenCreateResponse> createPaymentTokenWithHttpInfo(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentTokenValidateBeforeCall(paymentInitiationPaymentTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create payment token (asynchronously)
     * The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @param paymentInitiationPaymentTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/link/maintain-legacy-integration/#creating-a-payment-token">Create payment token Documentation</a>
     */
    @Deprecated
    public okhttp3.Call createPaymentTokenAsync(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, final ApiCallback<PaymentInitiationPaymentTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentTokenValidateBeforeCall(paymentInitiationPaymentTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositSwitchAltCreate
     * @param depositSwitchAltCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchaltcreate">Create a deposit switch without using Plaid Exchange Documentation</a>
     */
    public okhttp3.Call depositSwitchAltCreateCall(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositSwitchAltCreateRequest;

        // create path and map variables
        String localVarPath = "/deposit_switch/alt/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositSwitchAltCreateValidateBeforeCall(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'depositSwitchAltCreateRequest' is set
        if (depositSwitchAltCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'depositSwitchAltCreateRequest' when calling depositSwitchAltCreate(Async)");
        }
        

        okhttp3.Call localVarCall = depositSwitchAltCreateCall(depositSwitchAltCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a deposit switch without using Plaid Exchange
     * This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchAltCreateRequest  (required)
     * @return DepositSwitchAltCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchaltcreate">Create a deposit switch without using Plaid Exchange Documentation</a>
     */
    public DepositSwitchAltCreateResponse depositSwitchAltCreate(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest) throws ApiException {
        ApiResponse<DepositSwitchAltCreateResponse> localVarResp = depositSwitchAltCreateWithHttpInfo(depositSwitchAltCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deposit switch without using Plaid Exchange
     * This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchAltCreateRequest  (required)
     * @return ApiResponse&lt;DepositSwitchAltCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchaltcreate">Create a deposit switch without using Plaid Exchange Documentation</a>
     */
    public ApiResponse<DepositSwitchAltCreateResponse> depositSwitchAltCreateWithHttpInfo(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = depositSwitchAltCreateValidateBeforeCall(depositSwitchAltCreateRequest, null);
        Type localVarReturnType = new TypeToken<DepositSwitchAltCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deposit switch without using Plaid Exchange (asynchronously)
     * This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchAltCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchaltcreate">Create a deposit switch without using Plaid Exchange Documentation</a>
     */
    public okhttp3.Call depositSwitchAltCreateAsync(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, final ApiCallback<DepositSwitchAltCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositSwitchAltCreateValidateBeforeCall(depositSwitchAltCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DepositSwitchAltCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositSwitchCreate
     * @param depositSwitchCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchcreate">Create a deposit switch Documentation</a>
     */
    public okhttp3.Call depositSwitchCreateCall(DepositSwitchCreateRequest depositSwitchCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositSwitchCreateRequest;

        // create path and map variables
        String localVarPath = "/deposit_switch/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositSwitchCreateValidateBeforeCall(DepositSwitchCreateRequest depositSwitchCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'depositSwitchCreateRequest' is set
        if (depositSwitchCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'depositSwitchCreateRequest' when calling depositSwitchCreate(Async)");
        }
        

        okhttp3.Call localVarCall = depositSwitchCreateCall(depositSwitchCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a deposit switch
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchCreateRequest  (required)
     * @return DepositSwitchCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchcreate">Create a deposit switch Documentation</a>
     */
    public DepositSwitchCreateResponse depositSwitchCreate(DepositSwitchCreateRequest depositSwitchCreateRequest) throws ApiException {
        ApiResponse<DepositSwitchCreateResponse> localVarResp = depositSwitchCreateWithHttpInfo(depositSwitchCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deposit switch
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchCreateRequest  (required)
     * @return ApiResponse&lt;DepositSwitchCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchcreate">Create a deposit switch Documentation</a>
     */
    public ApiResponse<DepositSwitchCreateResponse> depositSwitchCreateWithHttpInfo(DepositSwitchCreateRequest depositSwitchCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = depositSwitchCreateValidateBeforeCall(depositSwitchCreateRequest, null);
        Type localVarReturnType = new TypeToken<DepositSwitchCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deposit switch (asynchronously)
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchcreate">Create a deposit switch Documentation</a>
     */
    public okhttp3.Call depositSwitchCreateAsync(DepositSwitchCreateRequest depositSwitchCreateRequest, final ApiCallback<DepositSwitchCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositSwitchCreateValidateBeforeCall(depositSwitchCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DepositSwitchCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositSwitchGet
     * @param depositSwitchGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchget">Retrieve a deposit switch Documentation</a>
     */
    public okhttp3.Call depositSwitchGetCall(DepositSwitchGetRequest depositSwitchGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositSwitchGetRequest;

        // create path and map variables
        String localVarPath = "/deposit_switch/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositSwitchGetValidateBeforeCall(DepositSwitchGetRequest depositSwitchGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'depositSwitchGetRequest' is set
        if (depositSwitchGetRequest == null) {
            throw new ApiException("Missing the required parameter 'depositSwitchGetRequest' when calling depositSwitchGet(Async)");
        }
        

        okhttp3.Call localVarCall = depositSwitchGetCall(depositSwitchGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a deposit switch
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
     * @param depositSwitchGetRequest  (required)
     * @return DepositSwitchGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchget">Retrieve a deposit switch Documentation</a>
     */
    public DepositSwitchGetResponse depositSwitchGet(DepositSwitchGetRequest depositSwitchGetRequest) throws ApiException {
        ApiResponse<DepositSwitchGetResponse> localVarResp = depositSwitchGetWithHttpInfo(depositSwitchGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a deposit switch
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
     * @param depositSwitchGetRequest  (required)
     * @return ApiResponse&lt;DepositSwitchGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchget">Retrieve a deposit switch Documentation</a>
     */
    public ApiResponse<DepositSwitchGetResponse> depositSwitchGetWithHttpInfo(DepositSwitchGetRequest depositSwitchGetRequest) throws ApiException {
        okhttp3.Call localVarCall = depositSwitchGetValidateBeforeCall(depositSwitchGetRequest, null);
        Type localVarReturnType = new TypeToken<DepositSwitchGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a deposit switch (asynchronously)
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
     * @param depositSwitchGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchget">Retrieve a deposit switch Documentation</a>
     */
    public okhttp3.Call depositSwitchGetAsync(DepositSwitchGetRequest depositSwitchGetRequest, final ApiCallback<DepositSwitchGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositSwitchGetValidateBeforeCall(depositSwitchGetRequest, _callback);
        Type localVarReturnType = new TypeToken<DepositSwitchGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositSwitchTokenCreate
     * @param depositSwitchTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchtokencreate">Create a deposit switch token Documentation</a>
     */
    public okhttp3.Call depositSwitchTokenCreateCall(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositSwitchTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/deposit_switch/token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositSwitchTokenCreateValidateBeforeCall(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'depositSwitchTokenCreateRequest' is set
        if (depositSwitchTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'depositSwitchTokenCreateRequest' when calling depositSwitchTokenCreate(Async)");
        }
        

        okhttp3.Call localVarCall = depositSwitchTokenCreateCall(depositSwitchTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a deposit switch token
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @param depositSwitchTokenCreateRequest  (required)
     * @return DepositSwitchTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchtokencreate">Create a deposit switch token Documentation</a>
     */
    public DepositSwitchTokenCreateResponse depositSwitchTokenCreate(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest) throws ApiException {
        ApiResponse<DepositSwitchTokenCreateResponse> localVarResp = depositSwitchTokenCreateWithHttpInfo(depositSwitchTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deposit switch token
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @param depositSwitchTokenCreateRequest  (required)
     * @return ApiResponse&lt;DepositSwitchTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchtokencreate">Create a deposit switch token Documentation</a>
     */
    public ApiResponse<DepositSwitchTokenCreateResponse> depositSwitchTokenCreateWithHttpInfo(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = depositSwitchTokenCreateValidateBeforeCall(depositSwitchTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<DepositSwitchTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deposit switch token (asynchronously)
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @param depositSwitchTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchtokencreate">Create a deposit switch token Documentation</a>
     */
    public okhttp3.Call depositSwitchTokenCreateAsync(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, final ApiCallback<DepositSwitchTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositSwitchTokenCreateValidateBeforeCall(depositSwitchTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DepositSwitchTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for employersSearch
     * @param employersSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/employers/#employerssearch">Search employer database Documentation</a>
     */
    public okhttp3.Call employersSearchCall(EmployersSearchRequest employersSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employersSearchRequest;

        // create path and map variables
        String localVarPath = "/employers/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employersSearchValidateBeforeCall(EmployersSearchRequest employersSearchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'employersSearchRequest' is set
        if (employersSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'employersSearchRequest' when calling employersSearch(Async)");
        }
        

        okhttp3.Call localVarCall = employersSearchCall(employersSearchRequest, _callback);
        return localVarCall;

    }

    /**
     * Search employer database
     * &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @param employersSearchRequest  (required)
     * @return EmployersSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/employers/#employerssearch">Search employer database Documentation</a>
     */
    public EmployersSearchResponse employersSearch(EmployersSearchRequest employersSearchRequest) throws ApiException {
        ApiResponse<EmployersSearchResponse> localVarResp = employersSearchWithHttpInfo(employersSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search employer database
     * &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @param employersSearchRequest  (required)
     * @return ApiResponse&lt;EmployersSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/employers/#employerssearch">Search employer database Documentation</a>
     */
    public ApiResponse<EmployersSearchResponse> employersSearchWithHttpInfo(EmployersSearchRequest employersSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = employersSearchValidateBeforeCall(employersSearchRequest, null);
        Type localVarReturnType = new TypeToken<EmployersSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search employer database (asynchronously)
     * &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @param employersSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/employers/#employerssearch">Search employer database Documentation</a>
     */
    public okhttp3.Call employersSearchAsync(EmployersSearchRequest employersSearchRequest, final ApiCallback<EmployersSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = employersSearchValidateBeforeCall(employersSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployersSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for employmentVerificationGet
     * @param employmentVerificationGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#employmentverificationget">Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    public okhttp3.Call employmentVerificationGetCall(EmploymentVerificationGetRequest employmentVerificationGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employmentVerificationGetRequest;

        // create path and map variables
        String localVarPath = "/employment/verification/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employmentVerificationGetValidateBeforeCall(EmploymentVerificationGetRequest employmentVerificationGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'employmentVerificationGetRequest' is set
        if (employmentVerificationGetRequest == null) {
            throw new ApiException("Missing the required parameter 'employmentVerificationGetRequest' when calling employmentVerificationGet(Async)");
        }
        

        okhttp3.Call localVarCall = employmentVerificationGetCall(employmentVerificationGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a summary of an individual&#39;s employment information
     * &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
     * @param employmentVerificationGetRequest  (required)
     * @return EmploymentVerificationGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#employmentverificationget">Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    public EmploymentVerificationGetResponse employmentVerificationGet(EmploymentVerificationGetRequest employmentVerificationGetRequest) throws ApiException {
        ApiResponse<EmploymentVerificationGetResponse> localVarResp = employmentVerificationGetWithHttpInfo(employmentVerificationGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a summary of an individual&#39;s employment information
     * &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
     * @param employmentVerificationGetRequest  (required)
     * @return ApiResponse&lt;EmploymentVerificationGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#employmentverificationget">Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    public ApiResponse<EmploymentVerificationGetResponse> employmentVerificationGetWithHttpInfo(EmploymentVerificationGetRequest employmentVerificationGetRequest) throws ApiException {
        okhttp3.Call localVarCall = employmentVerificationGetValidateBeforeCall(employmentVerificationGetRequest, null);
        Type localVarReturnType = new TypeToken<EmploymentVerificationGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a summary of an individual&#39;s employment information (asynchronously)
     * &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
     * @param employmentVerificationGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#employmentverificationget">Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    public okhttp3.Call employmentVerificationGetAsync(EmploymentVerificationGetRequest employmentVerificationGetRequest, final ApiCallback<EmploymentVerificationGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = employmentVerificationGetValidateBeforeCall(employmentVerificationGetRequest, _callback);
        Type localVarReturnType = new TypeToken<EmploymentVerificationGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identityGet
     * @param identityGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#identityget">Retrieve identity data Documentation</a>
     */
    public okhttp3.Call identityGetCall(IdentityGetRequest identityGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityGetRequest;

        // create path and map variables
        String localVarPath = "/identity/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identityGetValidateBeforeCall(IdentityGetRequest identityGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'identityGetRequest' is set
        if (identityGetRequest == null) {
            throw new ApiException("Missing the required parameter 'identityGetRequest' when calling identityGet(Async)");
        }
        

        okhttp3.Call localVarCall = identityGetCall(identityGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve identity data
     * The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @param identityGetRequest  (required)
     * @return IdentityGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#identityget">Retrieve identity data Documentation</a>
     */
    public IdentityGetResponse identityGet(IdentityGetRequest identityGetRequest) throws ApiException {
        ApiResponse<IdentityGetResponse> localVarResp = identityGetWithHttpInfo(identityGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve identity data
     * The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @param identityGetRequest  (required)
     * @return ApiResponse&lt;IdentityGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#identityget">Retrieve identity data Documentation</a>
     */
    public ApiResponse<IdentityGetResponse> identityGetWithHttpInfo(IdentityGetRequest identityGetRequest) throws ApiException {
        okhttp3.Call localVarCall = identityGetValidateBeforeCall(identityGetRequest, null);
        Type localVarReturnType = new TypeToken<IdentityGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve identity data (asynchronously)
     * The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @param identityGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#identityget">Retrieve identity data Documentation</a>
     */
    public okhttp3.Call identityGetAsync(IdentityGetRequest identityGetRequest, final ApiCallback<IdentityGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = identityGetValidateBeforeCall(identityGetRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentityGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationCreate
     * @param incomeVerificationCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/#incomeverificationcreate">(Deprecated) Create an income verification instance Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationCreateCall(IncomeVerificationCreateRequest incomeVerificationCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationCreateRequest;

        // create path and map variables
        String localVarPath = "/income/verification/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationCreateValidateBeforeCall(IncomeVerificationCreateRequest incomeVerificationCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'incomeVerificationCreateRequest' is set
        if (incomeVerificationCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationCreateRequest' when calling incomeVerificationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = incomeVerificationCreateCall(incomeVerificationCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * (Deprecated) Create an income verification instance
     * &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @param incomeVerificationCreateRequest  (required)
     * @return IncomeVerificationCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/#incomeverificationcreate">(Deprecated) Create an income verification instance Documentation</a>
     */
    @Deprecated
    public IncomeVerificationCreateResponse incomeVerificationCreate(IncomeVerificationCreateRequest incomeVerificationCreateRequest) throws ApiException {
        ApiResponse<IncomeVerificationCreateResponse> localVarResp = incomeVerificationCreateWithHttpInfo(incomeVerificationCreateRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Create an income verification instance
     * &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @param incomeVerificationCreateRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/#incomeverificationcreate">(Deprecated) Create an income verification instance Documentation</a>
     */
    @Deprecated
    public ApiResponse<IncomeVerificationCreateResponse> incomeVerificationCreateWithHttpInfo(IncomeVerificationCreateRequest incomeVerificationCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationCreateValidateBeforeCall(incomeVerificationCreateRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Create an income verification instance (asynchronously)
     * &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @param incomeVerificationCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/#incomeverificationcreate">(Deprecated) Create an income verification instance Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationCreateAsync(IncomeVerificationCreateRequest incomeVerificationCreateRequest, final ApiCallback<IncomeVerificationCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationCreateValidateBeforeCall(incomeVerificationCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationDocumentsDownload
     * @param incomeVerificationDocumentsDownloadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ZIP file containing source documents(s) used as the basis for income verification. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationdocumentsdownload">Download the original documents used for income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationDocumentsDownloadCall(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationDocumentsDownloadRequest;

        // create path and map variables
        String localVarPath = "/income/verification/documents/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationDocumentsDownloadValidateBeforeCall(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'incomeVerificationDocumentsDownloadRequest' is set
        if (incomeVerificationDocumentsDownloadRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationDocumentsDownloadRequest' when calling incomeVerificationDocumentsDownload(Async)");
        }
        

        okhttp3.Call localVarCall = incomeVerificationDocumentsDownloadCall(incomeVerificationDocumentsDownloadRequest, _callback);
        return localVarCall;

    }

    /**
     * Download the original documents used for income verification
     * &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
     * @param incomeVerificationDocumentsDownloadRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ZIP file containing source documents(s) used as the basis for income verification. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationdocumentsdownload">Download the original documents used for income verification Documentation</a>
     */
    public File incomeVerificationDocumentsDownload(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest) throws ApiException {
        ApiResponse<File> localVarResp = incomeVerificationDocumentsDownloadWithHttpInfo(incomeVerificationDocumentsDownloadRequest);
        return localVarResp.getData();
    }

    /**
     * Download the original documents used for income verification
     * &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
     * @param incomeVerificationDocumentsDownloadRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ZIP file containing source documents(s) used as the basis for income verification. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationdocumentsdownload">Download the original documents used for income verification Documentation</a>
     */
    public ApiResponse<File> incomeVerificationDocumentsDownloadWithHttpInfo(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationDocumentsDownloadValidateBeforeCall(incomeVerificationDocumentsDownloadRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the original documents used for income verification (asynchronously)
     * &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
     * @param incomeVerificationDocumentsDownloadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ZIP file containing source documents(s) used as the basis for income verification. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationdocumentsdownload">Download the original documents used for income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationDocumentsDownloadAsync(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationDocumentsDownloadValidateBeforeCall(incomeVerificationDocumentsDownloadRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationPaystubGet
     * @param incomeVerificationPaystubGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call incomeVerificationPaystubGetCall(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationPaystubGetRequest;

        // create path and map variables
        String localVarPath = "/income/verification/paystub/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationPaystubGetValidateBeforeCall(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'incomeVerificationPaystubGetRequest' is set
        if (incomeVerificationPaystubGetRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationPaystubGetRequest' when calling incomeVerificationPaystubGet(Async)");
        }
        

        okhttp3.Call localVarCall = incomeVerificationPaystubGetCall(incomeVerificationPaystubGetRequest, _callback);
        return localVarCall;

    }

    /**
     * (Deprecated) Retrieve information from a single paystub used for income verification
     * /income/verification/paystub/get returns information from a single paystub used for income verification
     * @param incomeVerificationPaystubGetRequest  (required)
     * @return IncomeVerificationPaystubGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public IncomeVerificationPaystubGetResponse incomeVerificationPaystubGet(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest) throws ApiException {
        ApiResponse<IncomeVerificationPaystubGetResponse> localVarResp = incomeVerificationPaystubGetWithHttpInfo(incomeVerificationPaystubGetRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Retrieve information from a single paystub used for income verification
     * /income/verification/paystub/get returns information from a single paystub used for income verification
     * @param incomeVerificationPaystubGetRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationPaystubGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<IncomeVerificationPaystubGetResponse> incomeVerificationPaystubGetWithHttpInfo(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationPaystubGetValidateBeforeCall(incomeVerificationPaystubGetRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationPaystubGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Retrieve information from a single paystub used for income verification (asynchronously)
     * /income/verification/paystub/get returns information from a single paystub used for income verification
     * @param incomeVerificationPaystubGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call incomeVerificationPaystubGetAsync(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, final ApiCallback<IncomeVerificationPaystubGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationPaystubGetValidateBeforeCall(incomeVerificationPaystubGetRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationPaystubGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationPaystubsGet
     * @param incomeVerificationPaystubsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationpaystubsget">Retrieve information from the paystubs used for income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationPaystubsGetCall(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationPaystubsGetRequest;

        // create path and map variables
        String localVarPath = "/income/verification/paystubs/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationPaystubsGetValidateBeforeCall(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'incomeVerificationPaystubsGetRequest' is set
        if (incomeVerificationPaystubsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationPaystubsGetRequest' when calling incomeVerificationPaystubsGet(Async)");
        }
        

        okhttp3.Call localVarCall = incomeVerificationPaystubsGetCall(incomeVerificationPaystubsGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve information from the paystubs used for income verification
     * &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param incomeVerificationPaystubsGetRequest  (required)
     * @return IncomeVerificationPaystubsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationpaystubsget">Retrieve information from the paystubs used for income verification Documentation</a>
     */
    public IncomeVerificationPaystubsGetResponse incomeVerificationPaystubsGet(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest) throws ApiException {
        ApiResponse<IncomeVerificationPaystubsGetResponse> localVarResp = incomeVerificationPaystubsGetWithHttpInfo(incomeVerificationPaystubsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve information from the paystubs used for income verification
     * &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param incomeVerificationPaystubsGetRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationPaystubsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationpaystubsget">Retrieve information from the paystubs used for income verification Documentation</a>
     */
    public ApiResponse<IncomeVerificationPaystubsGetResponse> incomeVerificationPaystubsGetWithHttpInfo(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationPaystubsGetValidateBeforeCall(incomeVerificationPaystubsGetRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationPaystubsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information from the paystubs used for income verification (asynchronously)
     * &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param incomeVerificationPaystubsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationpaystubsget">Retrieve information from the paystubs used for income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationPaystubsGetAsync(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, final ApiCallback<IncomeVerificationPaystubsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationPaystubsGetValidateBeforeCall(incomeVerificationPaystubsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationPaystubsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationPrecheck
     * @param incomeVerificationPrecheckRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationprecheck">Check digital income verification eligibility and optimize conversion Documentation</a>
     */
    public okhttp3.Call incomeVerificationPrecheckCall(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationPrecheckRequest;

        // create path and map variables
        String localVarPath = "/income/verification/precheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationPrecheckValidateBeforeCall(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'incomeVerificationPrecheckRequest' is set
        if (incomeVerificationPrecheckRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationPrecheckRequest' when calling incomeVerificationPrecheck(Async)");
        }
        

        okhttp3.Call localVarCall = incomeVerificationPrecheckCall(incomeVerificationPrecheckRequest, _callback);
        return localVarCall;

    }

    /**
     * Check digital income verification eligibility and optimize conversion
     * &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
     * @param incomeVerificationPrecheckRequest  (required)
     * @return IncomeVerificationPrecheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationprecheck">Check digital income verification eligibility and optimize conversion Documentation</a>
     */
    public IncomeVerificationPrecheckResponse incomeVerificationPrecheck(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest) throws ApiException {
        ApiResponse<IncomeVerificationPrecheckResponse> localVarResp = incomeVerificationPrecheckWithHttpInfo(incomeVerificationPrecheckRequest);
        return localVarResp.getData();
    }

    /**
     * Check digital income verification eligibility and optimize conversion
     * &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
     * @param incomeVerificationPrecheckRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationPrecheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationprecheck">Check digital income verification eligibility and optimize conversion Documentation</a>
     */
    public ApiResponse<IncomeVerificationPrecheckResponse> incomeVerificationPrecheckWithHttpInfo(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationPrecheckValidateBeforeCall(incomeVerificationPrecheckRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationPrecheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check digital income verification eligibility and optimize conversion (asynchronously)
     * &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
     * @param incomeVerificationPrecheckRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationprecheck">Check digital income verification eligibility and optimize conversion Documentation</a>
     */
    public okhttp3.Call incomeVerificationPrecheckAsync(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, final ApiCallback<IncomeVerificationPrecheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationPrecheckValidateBeforeCall(incomeVerificationPrecheckRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationPrecheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationRefresh
     * @param incomeVerificationRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationrefresh">Refresh an income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationRefreshCall(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationRefreshRequest;

        // create path and map variables
        String localVarPath = "/income/verification/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationRefreshValidateBeforeCall(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'incomeVerificationRefreshRequest' is set
        if (incomeVerificationRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationRefreshRequest' when calling incomeVerificationRefresh(Async)");
        }
        

        okhttp3.Call localVarCall = incomeVerificationRefreshCall(incomeVerificationRefreshRequest, _callback);
        return localVarCall;

    }

    /**
     * Refresh an income verification
     * &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
     * @param incomeVerificationRefreshRequest  (required)
     * @return IncomeVerificationRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationrefresh">Refresh an income verification Documentation</a>
     */
    public IncomeVerificationRefreshResponse incomeVerificationRefresh(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest) throws ApiException {
        ApiResponse<IncomeVerificationRefreshResponse> localVarResp = incomeVerificationRefreshWithHttpInfo(incomeVerificationRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh an income verification
     * &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
     * @param incomeVerificationRefreshRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationrefresh">Refresh an income verification Documentation</a>
     */
    public ApiResponse<IncomeVerificationRefreshResponse> incomeVerificationRefreshWithHttpInfo(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationRefreshValidateBeforeCall(incomeVerificationRefreshRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh an income verification (asynchronously)
     * &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
     * @param incomeVerificationRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationrefresh">Refresh an income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationRefreshAsync(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, final ApiCallback<IncomeVerificationRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationRefreshValidateBeforeCall(incomeVerificationRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationSummaryGet
     * @param incomeVerificationSummaryGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationsummaryget">(Deprecated) Retrieve a summary of information derived from income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationSummaryGetCall(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationSummaryGetRequest;

        // create path and map variables
        String localVarPath = "/income/verification/summary/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationSummaryGetValidateBeforeCall(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'incomeVerificationSummaryGetRequest' is set
        if (incomeVerificationSummaryGetRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationSummaryGetRequest' when calling incomeVerificationSummaryGet(Async)");
        }
        

        okhttp3.Call localVarCall = incomeVerificationSummaryGetCall(incomeVerificationSummaryGetRequest, _callback);
        return localVarCall;

    }

    /**
     * (Deprecated) Retrieve a summary of information derived from income verification
     * &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param incomeVerificationSummaryGetRequest  (required)
     * @return IncomeVerificationSummaryGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationsummaryget">(Deprecated) Retrieve a summary of information derived from income verification Documentation</a>
     */
    public IncomeVerificationSummaryGetResponse incomeVerificationSummaryGet(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest) throws ApiException {
        ApiResponse<IncomeVerificationSummaryGetResponse> localVarResp = incomeVerificationSummaryGetWithHttpInfo(incomeVerificationSummaryGetRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Retrieve a summary of information derived from income verification
     * &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param incomeVerificationSummaryGetRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationSummaryGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationsummaryget">(Deprecated) Retrieve a summary of information derived from income verification Documentation</a>
     */
    public ApiResponse<IncomeVerificationSummaryGetResponse> incomeVerificationSummaryGetWithHttpInfo(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationSummaryGetValidateBeforeCall(incomeVerificationSummaryGetRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationSummaryGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Retrieve a summary of information derived from income verification (asynchronously)
     * &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param incomeVerificationSummaryGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationsummaryget">(Deprecated) Retrieve a summary of information derived from income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationSummaryGetAsync(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, final ApiCallback<IncomeVerificationSummaryGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationSummaryGetValidateBeforeCall(incomeVerificationSummaryGetRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationSummaryGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationTaxformsGet
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationtaxformsget">Retrieve information from the tax documents used for income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationTaxformsGetCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/income/verification/taxforms/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationTaxformsGetValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling incomeVerificationTaxformsGet(Async)");
        }
        

        okhttp3.Call localVarCall = incomeVerificationTaxformsGetCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * Retrieve information from the tax documents used for income verification
     * &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param requestBody  (required)
     * @return IncomeVerificationTaxformsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationtaxformsget">Retrieve information from the tax documents used for income verification Documentation</a>
     */
    public IncomeVerificationTaxformsGetResponse incomeVerificationTaxformsGet(Map<String, Object> requestBody) throws ApiException {
        ApiResponse<IncomeVerificationTaxformsGetResponse> localVarResp = incomeVerificationTaxformsGetWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * Retrieve information from the tax documents used for income verification
     * &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param requestBody  (required)
     * @return ApiResponse&lt;IncomeVerificationTaxformsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationtaxformsget">Retrieve information from the tax documents used for income verification Documentation</a>
     */
    public ApiResponse<IncomeVerificationTaxformsGetResponse> incomeVerificationTaxformsGetWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationTaxformsGetValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationTaxformsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information from the tax documents used for income verification (asynchronously)
     * &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#incomeverificationtaxformsget">Retrieve information from the tax documents used for income verification Documentation</a>
     */
    public okhttp3.Call incomeVerificationTaxformsGetAsync(Map<String, Object> requestBody, final ApiCallback<IncomeVerificationTaxformsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationTaxformsGetValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationTaxformsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for institutionsGet
     * @param institutionsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget">Get details of all supported institutions Documentation</a>
     */
    public okhttp3.Call institutionsGetCall(InstitutionsGetRequest institutionsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = institutionsGetRequest;

        // create path and map variables
        String localVarPath = "/institutions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call institutionsGetValidateBeforeCall(InstitutionsGetRequest institutionsGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'institutionsGetRequest' is set
        if (institutionsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'institutionsGetRequest' when calling institutionsGet(Async)");
        }
        

        okhttp3.Call localVarCall = institutionsGetCall(institutionsGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get details of all supported institutions
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @param institutionsGetRequest  (required)
     * @return InstitutionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget">Get details of all supported institutions Documentation</a>
     */
    public InstitutionsGetResponse institutionsGet(InstitutionsGetRequest institutionsGetRequest) throws ApiException {
        ApiResponse<InstitutionsGetResponse> localVarResp = institutionsGetWithHttpInfo(institutionsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get details of all supported institutions
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @param institutionsGetRequest  (required)
     * @return ApiResponse&lt;InstitutionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget">Get details of all supported institutions Documentation</a>
     */
    public ApiResponse<InstitutionsGetResponse> institutionsGetWithHttpInfo(InstitutionsGetRequest institutionsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = institutionsGetValidateBeforeCall(institutionsGetRequest, null);
        Type localVarReturnType = new TypeToken<InstitutionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of all supported institutions (asynchronously)
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @param institutionsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget">Get details of all supported institutions Documentation</a>
     */
    public okhttp3.Call institutionsGetAsync(InstitutionsGetRequest institutionsGetRequest, final ApiCallback<InstitutionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = institutionsGetValidateBeforeCall(institutionsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<InstitutionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for institutionsGetById
     * @param institutionsGetByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget_by_id">Get details of an institution Documentation</a>
     */
    public okhttp3.Call institutionsGetByIdCall(InstitutionsGetByIdRequest institutionsGetByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = institutionsGetByIdRequest;

        // create path and map variables
        String localVarPath = "/institutions/get_by_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call institutionsGetByIdValidateBeforeCall(InstitutionsGetByIdRequest institutionsGetByIdRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'institutionsGetByIdRequest' is set
        if (institutionsGetByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'institutionsGetByIdRequest' when calling institutionsGetById(Async)");
        }
        

        okhttp3.Call localVarCall = institutionsGetByIdCall(institutionsGetByIdRequest, _callback);
        return localVarCall;

    }

    /**
     * Get details of an institution
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsGetByIdRequest  (required)
     * @return InstitutionsGetByIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget_by_id">Get details of an institution Documentation</a>
     */
    public InstitutionsGetByIdResponse institutionsGetById(InstitutionsGetByIdRequest institutionsGetByIdRequest) throws ApiException {
        ApiResponse<InstitutionsGetByIdResponse> localVarResp = institutionsGetByIdWithHttpInfo(institutionsGetByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Get details of an institution
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsGetByIdRequest  (required)
     * @return ApiResponse&lt;InstitutionsGetByIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget_by_id">Get details of an institution Documentation</a>
     */
    public ApiResponse<InstitutionsGetByIdResponse> institutionsGetByIdWithHttpInfo(InstitutionsGetByIdRequest institutionsGetByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = institutionsGetByIdValidateBeforeCall(institutionsGetByIdRequest, null);
        Type localVarReturnType = new TypeToken<InstitutionsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of an institution (asynchronously)
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsGetByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget_by_id">Get details of an institution Documentation</a>
     */
    public okhttp3.Call institutionsGetByIdAsync(InstitutionsGetByIdRequest institutionsGetByIdRequest, final ApiCallback<InstitutionsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = institutionsGetByIdValidateBeforeCall(institutionsGetByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<InstitutionsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for institutionsSearch
     * @param institutionsSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionssearch">Search institutions Documentation</a>
     */
    public okhttp3.Call institutionsSearchCall(InstitutionsSearchRequest institutionsSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = institutionsSearchRequest;

        // create path and map variables
        String localVarPath = "/institutions/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call institutionsSearchValidateBeforeCall(InstitutionsSearchRequest institutionsSearchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'institutionsSearchRequest' is set
        if (institutionsSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'institutionsSearchRequest' when calling institutionsSearch(Async)");
        }
        

        okhttp3.Call localVarCall = institutionsSearchCall(institutionsSearchRequest, _callback);
        return localVarCall;

    }

    /**
     * Search institutions
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsSearchRequest  (required)
     * @return InstitutionsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionssearch">Search institutions Documentation</a>
     */
    public InstitutionsSearchResponse institutionsSearch(InstitutionsSearchRequest institutionsSearchRequest) throws ApiException {
        ApiResponse<InstitutionsSearchResponse> localVarResp = institutionsSearchWithHttpInfo(institutionsSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search institutions
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsSearchRequest  (required)
     * @return ApiResponse&lt;InstitutionsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionssearch">Search institutions Documentation</a>
     */
    public ApiResponse<InstitutionsSearchResponse> institutionsSearchWithHttpInfo(InstitutionsSearchRequest institutionsSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = institutionsSearchValidateBeforeCall(institutionsSearchRequest, null);
        Type localVarReturnType = new TypeToken<InstitutionsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search institutions (asynchronously)
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionssearch">Search institutions Documentation</a>
     */
    public okhttp3.Call institutionsSearchAsync(InstitutionsSearchRequest institutionsSearchRequest, final ApiCallback<InstitutionsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = institutionsSearchValidateBeforeCall(institutionsSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<InstitutionsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for investmentsHoldingsGet
     * @param investmentsHoldingsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#investmentsholdingsget">Get Investment holdings Documentation</a>
     */
    public okhttp3.Call investmentsHoldingsGetCall(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = investmentsHoldingsGetRequest;

        // create path and map variables
        String localVarPath = "/investments/holdings/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call investmentsHoldingsGetValidateBeforeCall(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'investmentsHoldingsGetRequest' is set
        if (investmentsHoldingsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'investmentsHoldingsGetRequest' when calling investmentsHoldingsGet(Async)");
        }
        

        okhttp3.Call localVarCall = investmentsHoldingsGetCall(investmentsHoldingsGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Investment holdings
     * The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
     * @param investmentsHoldingsGetRequest  (required)
     * @return InvestmentsHoldingsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#investmentsholdingsget">Get Investment holdings Documentation</a>
     */
    public InvestmentsHoldingsGetResponse investmentsHoldingsGet(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest) throws ApiException {
        ApiResponse<InvestmentsHoldingsGetResponse> localVarResp = investmentsHoldingsGetWithHttpInfo(investmentsHoldingsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get Investment holdings
     * The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
     * @param investmentsHoldingsGetRequest  (required)
     * @return ApiResponse&lt;InvestmentsHoldingsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#investmentsholdingsget">Get Investment holdings Documentation</a>
     */
    public ApiResponse<InvestmentsHoldingsGetResponse> investmentsHoldingsGetWithHttpInfo(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = investmentsHoldingsGetValidateBeforeCall(investmentsHoldingsGetRequest, null);
        Type localVarReturnType = new TypeToken<InvestmentsHoldingsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Investment holdings (asynchronously)
     * The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
     * @param investmentsHoldingsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#investmentsholdingsget">Get Investment holdings Documentation</a>
     */
    public okhttp3.Call investmentsHoldingsGetAsync(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, final ApiCallback<InvestmentsHoldingsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = investmentsHoldingsGetValidateBeforeCall(investmentsHoldingsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<InvestmentsHoldingsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for investmentsTransactionsGet
     * @param investmentsTransactionsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#investmentstransactionsget">Get investment transactions Documentation</a>
     */
    public okhttp3.Call investmentsTransactionsGetCall(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = investmentsTransactionsGetRequest;

        // create path and map variables
        String localVarPath = "/investments/transactions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call investmentsTransactionsGetValidateBeforeCall(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'investmentsTransactionsGetRequest' is set
        if (investmentsTransactionsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'investmentsTransactionsGetRequest' when calling investmentsTransactionsGet(Async)");
        }
        

        okhttp3.Call localVarCall = investmentsTransactionsGetCall(investmentsTransactionsGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get investment transactions
     * The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
     * @param investmentsTransactionsGetRequest  (required)
     * @return InvestmentsTransactionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#investmentstransactionsget">Get investment transactions Documentation</a>
     */
    public InvestmentsTransactionsGetResponse investmentsTransactionsGet(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest) throws ApiException {
        ApiResponse<InvestmentsTransactionsGetResponse> localVarResp = investmentsTransactionsGetWithHttpInfo(investmentsTransactionsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get investment transactions
     * The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
     * @param investmentsTransactionsGetRequest  (required)
     * @return ApiResponse&lt;InvestmentsTransactionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#investmentstransactionsget">Get investment transactions Documentation</a>
     */
    public ApiResponse<InvestmentsTransactionsGetResponse> investmentsTransactionsGetWithHttpInfo(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = investmentsTransactionsGetValidateBeforeCall(investmentsTransactionsGetRequest, null);
        Type localVarReturnType = new TypeToken<InvestmentsTransactionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get investment transactions (asynchronously)
     * The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
     * @param investmentsTransactionsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#investmentstransactionsget">Get investment transactions Documentation</a>
     */
    public okhttp3.Call investmentsTransactionsGetAsync(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, final ApiCallback<InvestmentsTransactionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = investmentsTransactionsGetValidateBeforeCall(investmentsTransactionsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<InvestmentsTransactionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemAccessTokenInvalidate
     * @param itemAccessTokenInvalidateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itemaccess_tokeninvalidate">Invalidate access_token Documentation</a>
     */
    public okhttp3.Call itemAccessTokenInvalidateCall(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemAccessTokenInvalidateRequest;

        // create path and map variables
        String localVarPath = "/item/access_token/invalidate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemAccessTokenInvalidateValidateBeforeCall(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemAccessTokenInvalidateRequest' is set
        if (itemAccessTokenInvalidateRequest == null) {
            throw new ApiException("Missing the required parameter 'itemAccessTokenInvalidateRequest' when calling itemAccessTokenInvalidate(Async)");
        }
        

        okhttp3.Call localVarCall = itemAccessTokenInvalidateCall(itemAccessTokenInvalidateRequest, _callback);
        return localVarCall;

    }

    /**
     * Invalidate access_token
     * By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
     * @param itemAccessTokenInvalidateRequest  (required)
     * @return ItemAccessTokenInvalidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itemaccess_tokeninvalidate">Invalidate access_token Documentation</a>
     */
    public ItemAccessTokenInvalidateResponse itemAccessTokenInvalidate(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest) throws ApiException {
        ApiResponse<ItemAccessTokenInvalidateResponse> localVarResp = itemAccessTokenInvalidateWithHttpInfo(itemAccessTokenInvalidateRequest);
        return localVarResp.getData();
    }

    /**
     * Invalidate access_token
     * By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
     * @param itemAccessTokenInvalidateRequest  (required)
     * @return ApiResponse&lt;ItemAccessTokenInvalidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itemaccess_tokeninvalidate">Invalidate access_token Documentation</a>
     */
    public ApiResponse<ItemAccessTokenInvalidateResponse> itemAccessTokenInvalidateWithHttpInfo(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest) throws ApiException {
        okhttp3.Call localVarCall = itemAccessTokenInvalidateValidateBeforeCall(itemAccessTokenInvalidateRequest, null);
        Type localVarReturnType = new TypeToken<ItemAccessTokenInvalidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invalidate access_token (asynchronously)
     * By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
     * @param itemAccessTokenInvalidateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itemaccess_tokeninvalidate">Invalidate access_token Documentation</a>
     */
    public okhttp3.Call itemAccessTokenInvalidateAsync(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, final ApiCallback<ItemAccessTokenInvalidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemAccessTokenInvalidateValidateBeforeCall(itemAccessTokenInvalidateRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemAccessTokenInvalidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemApplicationList
     * @param itemApplicationListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemApplicationListCall(ItemApplicationListRequest itemApplicationListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemApplicationListRequest;

        // create path and map variables
        String localVarPath = "/item/application/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemApplicationListValidateBeforeCall(ItemApplicationListRequest itemApplicationListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemApplicationListRequest' is set
        if (itemApplicationListRequest == null) {
            throw new ApiException("Missing the required parameter 'itemApplicationListRequest' when calling itemApplicationList(Async)");
        }
        

        okhttp3.Call localVarCall = itemApplicationListCall(itemApplicationListRequest, _callback);
        return localVarCall;

    }

    /**
     * List a user’s connected applications
     * List a user’s connected applications
     * @param itemApplicationListRequest  (required)
     * @return ItemApplicationListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ItemApplicationListResponse itemApplicationList(ItemApplicationListRequest itemApplicationListRequest) throws ApiException {
        ApiResponse<ItemApplicationListResponse> localVarResp = itemApplicationListWithHttpInfo(itemApplicationListRequest);
        return localVarResp.getData();
    }

    /**
     * List a user’s connected applications
     * List a user’s connected applications
     * @param itemApplicationListRequest  (required)
     * @return ApiResponse&lt;ItemApplicationListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemApplicationListResponse> itemApplicationListWithHttpInfo(ItemApplicationListRequest itemApplicationListRequest) throws ApiException {
        okhttp3.Call localVarCall = itemApplicationListValidateBeforeCall(itemApplicationListRequest, null);
        Type localVarReturnType = new TypeToken<ItemApplicationListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a user’s connected applications (asynchronously)
     * List a user’s connected applications
     * @param itemApplicationListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemApplicationListAsync(ItemApplicationListRequest itemApplicationListRequest, final ApiCallback<ItemApplicationListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemApplicationListValidateBeforeCall(itemApplicationListRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemApplicationListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemApplicationScopesUpdate
     * @param itemApplicationScopesUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemApplicationScopesUpdateCall(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemApplicationScopesUpdateRequest;

        // create path and map variables
        String localVarPath = "/item/application/scopes/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemApplicationScopesUpdateValidateBeforeCall(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemApplicationScopesUpdateRequest' is set
        if (itemApplicationScopesUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'itemApplicationScopesUpdateRequest' when calling itemApplicationScopesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = itemApplicationScopesUpdateCall(itemApplicationScopesUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update the scopes of access for a particular application
     * Enable consumers to update product access on selected accounts for an application.
     * @param itemApplicationScopesUpdateRequest  (required)
     * @return ItemApplicationScopesUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ItemApplicationScopesUpdateResponse itemApplicationScopesUpdate(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest) throws ApiException {
        ApiResponse<ItemApplicationScopesUpdateResponse> localVarResp = itemApplicationScopesUpdateWithHttpInfo(itemApplicationScopesUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update the scopes of access for a particular application
     * Enable consumers to update product access on selected accounts for an application.
     * @param itemApplicationScopesUpdateRequest  (required)
     * @return ApiResponse&lt;ItemApplicationScopesUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemApplicationScopesUpdateResponse> itemApplicationScopesUpdateWithHttpInfo(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = itemApplicationScopesUpdateValidateBeforeCall(itemApplicationScopesUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ItemApplicationScopesUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the scopes of access for a particular application (asynchronously)
     * Enable consumers to update product access on selected accounts for an application.
     * @param itemApplicationScopesUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemApplicationScopesUpdateAsync(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, final ApiCallback<ItemApplicationScopesUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemApplicationScopesUpdateValidateBeforeCall(itemApplicationScopesUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemApplicationScopesUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemCreatePublicToken
     * @param itemPublicTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokencreate">Create public token Documentation</a>
     */
    public okhttp3.Call itemCreatePublicTokenCall(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemPublicTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/item/public_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemCreatePublicTokenValidateBeforeCall(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemPublicTokenCreateRequest' is set
        if (itemPublicTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'itemPublicTokenCreateRequest' when calling itemCreatePublicToken(Async)");
        }
        

        okhttp3.Call localVarCall = itemCreatePublicTokenCall(itemPublicTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create public token
     * Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @param itemPublicTokenCreateRequest  (required)
     * @return ItemPublicTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokencreate">Create public token Documentation</a>
     */
    public ItemPublicTokenCreateResponse itemCreatePublicToken(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest) throws ApiException {
        ApiResponse<ItemPublicTokenCreateResponse> localVarResp = itemCreatePublicTokenWithHttpInfo(itemPublicTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create public token
     * Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @param itemPublicTokenCreateRequest  (required)
     * @return ApiResponse&lt;ItemPublicTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokencreate">Create public token Documentation</a>
     */
    public ApiResponse<ItemPublicTokenCreateResponse> itemCreatePublicTokenWithHttpInfo(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = itemCreatePublicTokenValidateBeforeCall(itemPublicTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<ItemPublicTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create public token (asynchronously)
     * Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @param itemPublicTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokencreate">Create public token Documentation</a>
     */
    public okhttp3.Call itemCreatePublicTokenAsync(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, final ApiCallback<ItemPublicTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemCreatePublicTokenValidateBeforeCall(itemPublicTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemPublicTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemGet
     * @param itemGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemget">Retrieve an Item Documentation</a>
     */
    public okhttp3.Call itemGetCall(ItemGetRequest itemGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemGetRequest;

        // create path and map variables
        String localVarPath = "/item/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemGetValidateBeforeCall(ItemGetRequest itemGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemGetRequest' is set
        if (itemGetRequest == null) {
            throw new ApiException("Missing the required parameter 'itemGetRequest' when calling itemGet(Async)");
        }
        

        okhttp3.Call localVarCall = itemGetCall(itemGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an Item
     * Returns information about the status of an Item.
     * @param itemGetRequest  (required)
     * @return ItemGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemget">Retrieve an Item Documentation</a>
     */
    public ItemGetResponse itemGet(ItemGetRequest itemGetRequest) throws ApiException {
        ApiResponse<ItemGetResponse> localVarResp = itemGetWithHttpInfo(itemGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Item
     * Returns information about the status of an Item.
     * @param itemGetRequest  (required)
     * @return ApiResponse&lt;ItemGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemget">Retrieve an Item Documentation</a>
     */
    public ApiResponse<ItemGetResponse> itemGetWithHttpInfo(ItemGetRequest itemGetRequest) throws ApiException {
        okhttp3.Call localVarCall = itemGetValidateBeforeCall(itemGetRequest, null);
        Type localVarReturnType = new TypeToken<ItemGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Item (asynchronously)
     * Returns information about the status of an Item.
     * @param itemGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemget">Retrieve an Item Documentation</a>
     */
    public okhttp3.Call itemGetAsync(ItemGetRequest itemGetRequest, final ApiCallback<ItemGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemGetValidateBeforeCall(itemGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemImport
     * @param itemImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemImportCall(ItemImportRequest itemImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemImportRequest;

        // create path and map variables
        String localVarPath = "/item/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemImportValidateBeforeCall(ItemImportRequest itemImportRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemImportRequest' is set
        if (itemImportRequest == null) {
            throw new ApiException("Missing the required parameter 'itemImportRequest' when calling itemImport(Async)");
        }
        

        okhttp3.Call localVarCall = itemImportCall(itemImportRequest, _callback);
        return localVarCall;

    }

    /**
     * Import Item
     * &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
     * @param itemImportRequest  (required)
     * @return ItemImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ItemImportResponse itemImport(ItemImportRequest itemImportRequest) throws ApiException {
        ApiResponse<ItemImportResponse> localVarResp = itemImportWithHttpInfo(itemImportRequest);
        return localVarResp.getData();
    }

    /**
     * Import Item
     * &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
     * @param itemImportRequest  (required)
     * @return ApiResponse&lt;ItemImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemImportResponse> itemImportWithHttpInfo(ItemImportRequest itemImportRequest) throws ApiException {
        okhttp3.Call localVarCall = itemImportValidateBeforeCall(itemImportRequest, null);
        Type localVarReturnType = new TypeToken<ItemImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import Item (asynchronously)
     * &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
     * @param itemImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemImportAsync(ItemImportRequest itemImportRequest, final ApiCallback<ItemImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemImportValidateBeforeCall(itemImportRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemPublicTokenExchange
     * @param itemPublicTokenExchangeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokenexchange">Exchange public token for an access token Documentation</a>
     */
    public okhttp3.Call itemPublicTokenExchangeCall(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemPublicTokenExchangeRequest;

        // create path and map variables
        String localVarPath = "/item/public_token/exchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemPublicTokenExchangeValidateBeforeCall(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemPublicTokenExchangeRequest' is set
        if (itemPublicTokenExchangeRequest == null) {
            throw new ApiException("Missing the required parameter 'itemPublicTokenExchangeRequest' when calling itemPublicTokenExchange(Async)");
        }
        

        okhttp3.Call localVarCall = itemPublicTokenExchangeCall(itemPublicTokenExchangeRequest, _callback);
        return localVarCall;

    }

    /**
     * Exchange public token for an access token
     * Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
     * @param itemPublicTokenExchangeRequest  (required)
     * @return ItemPublicTokenExchangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokenexchange">Exchange public token for an access token Documentation</a>
     */
    public ItemPublicTokenExchangeResponse itemPublicTokenExchange(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest) throws ApiException {
        ApiResponse<ItemPublicTokenExchangeResponse> localVarResp = itemPublicTokenExchangeWithHttpInfo(itemPublicTokenExchangeRequest);
        return localVarResp.getData();
    }

    /**
     * Exchange public token for an access token
     * Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
     * @param itemPublicTokenExchangeRequest  (required)
     * @return ApiResponse&lt;ItemPublicTokenExchangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokenexchange">Exchange public token for an access token Documentation</a>
     */
    public ApiResponse<ItemPublicTokenExchangeResponse> itemPublicTokenExchangeWithHttpInfo(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest) throws ApiException {
        okhttp3.Call localVarCall = itemPublicTokenExchangeValidateBeforeCall(itemPublicTokenExchangeRequest, null);
        Type localVarReturnType = new TypeToken<ItemPublicTokenExchangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exchange public token for an access token (asynchronously)
     * Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
     * @param itemPublicTokenExchangeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokenexchange">Exchange public token for an access token Documentation</a>
     */
    public okhttp3.Call itemPublicTokenExchangeAsync(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, final ApiCallback<ItemPublicTokenExchangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemPublicTokenExchangeValidateBeforeCall(itemPublicTokenExchangeRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemPublicTokenExchangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemRemove
     * @param itemRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemremove">Remove an Item Documentation</a>
     */
    public okhttp3.Call itemRemoveCall(ItemRemoveRequest itemRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemRemoveRequest;

        // create path and map variables
        String localVarPath = "/item/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemRemoveValidateBeforeCall(ItemRemoveRequest itemRemoveRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemRemoveRequest' is set
        if (itemRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'itemRemoveRequest' when calling itemRemove(Async)");
        }
        

        okhttp3.Call localVarCall = itemRemoveCall(itemRemoveRequest, _callback);
        return localVarCall;

    }

    /**
     * Remove an Item
     * The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
     * @param itemRemoveRequest  (required)
     * @return ItemRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemremove">Remove an Item Documentation</a>
     */
    public ItemRemoveResponse itemRemove(ItemRemoveRequest itemRemoveRequest) throws ApiException {
        ApiResponse<ItemRemoveResponse> localVarResp = itemRemoveWithHttpInfo(itemRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Remove an Item
     * The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
     * @param itemRemoveRequest  (required)
     * @return ApiResponse&lt;ItemRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemremove">Remove an Item Documentation</a>
     */
    public ApiResponse<ItemRemoveResponse> itemRemoveWithHttpInfo(ItemRemoveRequest itemRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = itemRemoveValidateBeforeCall(itemRemoveRequest, null);
        Type localVarReturnType = new TypeToken<ItemRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an Item (asynchronously)
     * The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
     * @param itemRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemremove">Remove an Item Documentation</a>
     */
    public okhttp3.Call itemRemoveAsync(ItemRemoveRequest itemRemoveRequest, final ApiCallback<ItemRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemRemoveValidateBeforeCall(itemRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemWebhookUpdate
     * @param itemWebhookUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemwebhookupdate">Update Webhook URL Documentation</a>
     */
    public okhttp3.Call itemWebhookUpdateCall(ItemWebhookUpdateRequest itemWebhookUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemWebhookUpdateRequest;

        // create path and map variables
        String localVarPath = "/item/webhook/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemWebhookUpdateValidateBeforeCall(ItemWebhookUpdateRequest itemWebhookUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemWebhookUpdateRequest' is set
        if (itemWebhookUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'itemWebhookUpdateRequest' when calling itemWebhookUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = itemWebhookUpdateCall(itemWebhookUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update Webhook URL
     * The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
     * @param itemWebhookUpdateRequest  (required)
     * @return ItemWebhookUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemwebhookupdate">Update Webhook URL Documentation</a>
     */
    public ItemWebhookUpdateResponse itemWebhookUpdate(ItemWebhookUpdateRequest itemWebhookUpdateRequest) throws ApiException {
        ApiResponse<ItemWebhookUpdateResponse> localVarResp = itemWebhookUpdateWithHttpInfo(itemWebhookUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update Webhook URL
     * The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
     * @param itemWebhookUpdateRequest  (required)
     * @return ApiResponse&lt;ItemWebhookUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemwebhookupdate">Update Webhook URL Documentation</a>
     */
    public ApiResponse<ItemWebhookUpdateResponse> itemWebhookUpdateWithHttpInfo(ItemWebhookUpdateRequest itemWebhookUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = itemWebhookUpdateValidateBeforeCall(itemWebhookUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ItemWebhookUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Webhook URL (asynchronously)
     * The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
     * @param itemWebhookUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemwebhookupdate">Update Webhook URL Documentation</a>
     */
    public okhttp3.Call itemWebhookUpdateAsync(ItemWebhookUpdateRequest itemWebhookUpdateRequest, final ApiCallback<ItemWebhookUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemWebhookUpdateValidateBeforeCall(itemWebhookUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemWebhookUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for liabilitiesGet
     * @param liabilitiesGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#liabilitiesget">Retrieve Liabilities data Documentation</a>
     */
    public okhttp3.Call liabilitiesGetCall(LiabilitiesGetRequest liabilitiesGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liabilitiesGetRequest;

        // create path and map variables
        String localVarPath = "/liabilities/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liabilitiesGetValidateBeforeCall(LiabilitiesGetRequest liabilitiesGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liabilitiesGetRequest' is set
        if (liabilitiesGetRequest == null) {
            throw new ApiException("Missing the required parameter 'liabilitiesGetRequest' when calling liabilitiesGet(Async)");
        }
        

        okhttp3.Call localVarCall = liabilitiesGetCall(liabilitiesGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Liabilities data
     * The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @param liabilitiesGetRequest  (required)
     * @return LiabilitiesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#liabilitiesget">Retrieve Liabilities data Documentation</a>
     */
    public LiabilitiesGetResponse liabilitiesGet(LiabilitiesGetRequest liabilitiesGetRequest) throws ApiException {
        ApiResponse<LiabilitiesGetResponse> localVarResp = liabilitiesGetWithHttpInfo(liabilitiesGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Liabilities data
     * The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @param liabilitiesGetRequest  (required)
     * @return ApiResponse&lt;LiabilitiesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#liabilitiesget">Retrieve Liabilities data Documentation</a>
     */
    public ApiResponse<LiabilitiesGetResponse> liabilitiesGetWithHttpInfo(LiabilitiesGetRequest liabilitiesGetRequest) throws ApiException {
        okhttp3.Call localVarCall = liabilitiesGetValidateBeforeCall(liabilitiesGetRequest, null);
        Type localVarReturnType = new TypeToken<LiabilitiesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Liabilities data (asynchronously)
     * The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @param liabilitiesGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#liabilitiesget">Retrieve Liabilities data Documentation</a>
     */
    public okhttp3.Call liabilitiesGetAsync(LiabilitiesGetRequest liabilitiesGetRequest, final ApiCallback<LiabilitiesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = liabilitiesGetValidateBeforeCall(liabilitiesGetRequest, _callback);
        Type localVarReturnType = new TypeToken<LiabilitiesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkTokenCreate
     * @param linkTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokencreate">Create Link Token Documentation</a>
     */
    public okhttp3.Call linkTokenCreateCall(LinkTokenCreateRequest linkTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/link/token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkTokenCreateValidateBeforeCall(LinkTokenCreateRequest linkTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'linkTokenCreateRequest' is set
        if (linkTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'linkTokenCreateRequest' when calling linkTokenCreate(Async)");
        }
        

        okhttp3.Call localVarCall = linkTokenCreateCall(linkTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Link Token
     * The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @param linkTokenCreateRequest  (required)
     * @return LinkTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokencreate">Create Link Token Documentation</a>
     */
    public LinkTokenCreateResponse linkTokenCreate(LinkTokenCreateRequest linkTokenCreateRequest) throws ApiException {
        ApiResponse<LinkTokenCreateResponse> localVarResp = linkTokenCreateWithHttpInfo(linkTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Link Token
     * The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @param linkTokenCreateRequest  (required)
     * @return ApiResponse&lt;LinkTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokencreate">Create Link Token Documentation</a>
     */
    public ApiResponse<LinkTokenCreateResponse> linkTokenCreateWithHttpInfo(LinkTokenCreateRequest linkTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = linkTokenCreateValidateBeforeCall(linkTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<LinkTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Link Token (asynchronously)
     * The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @param linkTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokencreate">Create Link Token Documentation</a>
     */
    public okhttp3.Call linkTokenCreateAsync(LinkTokenCreateRequest linkTokenCreateRequest, final ApiCallback<LinkTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkTokenCreateValidateBeforeCall(linkTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkTokenGet
     * @param linkTokenGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokenget">Get Link Token Documentation</a>
     */
    public okhttp3.Call linkTokenGetCall(LinkTokenGetRequest linkTokenGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkTokenGetRequest;

        // create path and map variables
        String localVarPath = "/link/token/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkTokenGetValidateBeforeCall(LinkTokenGetRequest linkTokenGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'linkTokenGetRequest' is set
        if (linkTokenGetRequest == null) {
            throw new ApiException("Missing the required parameter 'linkTokenGetRequest' when calling linkTokenGet(Async)");
        }
        

        okhttp3.Call localVarCall = linkTokenGetCall(linkTokenGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Link Token
     * The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
     * @param linkTokenGetRequest  (required)
     * @return LinkTokenGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokenget">Get Link Token Documentation</a>
     */
    public LinkTokenGetResponse linkTokenGet(LinkTokenGetRequest linkTokenGetRequest) throws ApiException {
        ApiResponse<LinkTokenGetResponse> localVarResp = linkTokenGetWithHttpInfo(linkTokenGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get Link Token
     * The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
     * @param linkTokenGetRequest  (required)
     * @return ApiResponse&lt;LinkTokenGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokenget">Get Link Token Documentation</a>
     */
    public ApiResponse<LinkTokenGetResponse> linkTokenGetWithHttpInfo(LinkTokenGetRequest linkTokenGetRequest) throws ApiException {
        okhttp3.Call localVarCall = linkTokenGetValidateBeforeCall(linkTokenGetRequest, null);
        Type localVarReturnType = new TypeToken<LinkTokenGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Link Token (asynchronously)
     * The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
     * @param linkTokenGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokenget">Get Link Token Documentation</a>
     */
    public okhttp3.Call linkTokenGetAsync(LinkTokenGetRequest linkTokenGetRequest, final ApiCallback<LinkTokenGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkTokenGetValidateBeforeCall(linkTokenGetRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkTokenGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationPaymentCreate
     * @param paymentInitiationPaymentCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentcreate">Create a payment Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentCreateCall(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentCreateRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationPaymentCreateValidateBeforeCall(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInitiationPaymentCreateRequest' is set
        if (paymentInitiationPaymentCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentCreateRequest' when calling paymentInitiationPaymentCreate(Async)");
        }
        

        okhttp3.Call localVarCall = paymentInitiationPaymentCreateCall(paymentInitiationPaymentCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a payment
     * After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
     * @param paymentInitiationPaymentCreateRequest  (required)
     * @return PaymentInitiationPaymentCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentcreate">Create a payment Documentation</a>
     */
    public PaymentInitiationPaymentCreateResponse paymentInitiationPaymentCreate(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentCreateResponse> localVarResp = paymentInitiationPaymentCreateWithHttpInfo(paymentInitiationPaymentCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a payment
     * After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
     * @param paymentInitiationPaymentCreateRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentcreate">Create a payment Documentation</a>
     */
    public ApiResponse<PaymentInitiationPaymentCreateResponse> paymentInitiationPaymentCreateWithHttpInfo(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationPaymentCreateValidateBeforeCall(paymentInitiationPaymentCreateRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a payment (asynchronously)
     * After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
     * @param paymentInitiationPaymentCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentcreate">Create a payment Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentCreateAsync(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, final ApiCallback<PaymentInitiationPaymentCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationPaymentCreateValidateBeforeCall(paymentInitiationPaymentCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationPaymentGet
     * @param paymentInitiationPaymentGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentget">Get payment details Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentGetCall(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentGetRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationPaymentGetValidateBeforeCall(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInitiationPaymentGetRequest' is set
        if (paymentInitiationPaymentGetRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentGetRequest' when calling paymentInitiationPaymentGet(Async)");
        }
        

        okhttp3.Call localVarCall = paymentInitiationPaymentGetCall(paymentInitiationPaymentGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get payment details
     * The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @param paymentInitiationPaymentGetRequest  (required)
     * @return PaymentInitiationPaymentGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentget">Get payment details Documentation</a>
     */
    public PaymentInitiationPaymentGetResponse paymentInitiationPaymentGet(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentGetResponse> localVarResp = paymentInitiationPaymentGetWithHttpInfo(paymentInitiationPaymentGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get payment details
     * The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @param paymentInitiationPaymentGetRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentget">Get payment details Documentation</a>
     */
    public ApiResponse<PaymentInitiationPaymentGetResponse> paymentInitiationPaymentGetWithHttpInfo(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationPaymentGetValidateBeforeCall(paymentInitiationPaymentGetRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment details (asynchronously)
     * The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @param paymentInitiationPaymentGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentget">Get payment details Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentGetAsync(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, final ApiCallback<PaymentInitiationPaymentGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationPaymentGetValidateBeforeCall(paymentInitiationPaymentGetRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationPaymentList
     * @param paymentInitiationPaymentListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentlist">List payments Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentListCall(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentListRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationPaymentListValidateBeforeCall(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInitiationPaymentListRequest' is set
        if (paymentInitiationPaymentListRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentListRequest' when calling paymentInitiationPaymentList(Async)");
        }
        

        okhttp3.Call localVarCall = paymentInitiationPaymentListCall(paymentInitiationPaymentListRequest, _callback);
        return localVarCall;

    }

    /**
     * List payments
     * The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
     * @param paymentInitiationPaymentListRequest  (required)
     * @return PaymentInitiationPaymentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentlist">List payments Documentation</a>
     */
    public PaymentInitiationPaymentListResponse paymentInitiationPaymentList(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentListResponse> localVarResp = paymentInitiationPaymentListWithHttpInfo(paymentInitiationPaymentListRequest);
        return localVarResp.getData();
    }

    /**
     * List payments
     * The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
     * @param paymentInitiationPaymentListRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentlist">List payments Documentation</a>
     */
    public ApiResponse<PaymentInitiationPaymentListResponse> paymentInitiationPaymentListWithHttpInfo(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationPaymentListValidateBeforeCall(paymentInitiationPaymentListRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List payments (asynchronously)
     * The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
     * @param paymentInitiationPaymentListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentlist">List payments Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentListAsync(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, final ApiCallback<PaymentInitiationPaymentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationPaymentListValidateBeforeCall(paymentInitiationPaymentListRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationPaymentReverse
     * @param paymentInitiationPaymentReverseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentreverse">Reverse an existing payment Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentReverseCall(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentReverseRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/reverse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationPaymentReverseValidateBeforeCall(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInitiationPaymentReverseRequest' is set
        if (paymentInitiationPaymentReverseRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentReverseRequest' when calling paymentInitiationPaymentReverse(Async)");
        }
        

        okhttp3.Call localVarCall = paymentInitiationPaymentReverseCall(paymentInitiationPaymentReverseRequest, _callback);
        return localVarCall;

    }

    /**
     * Reverse an existing payment
     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
     * @param paymentInitiationPaymentReverseRequest  (required)
     * @return PaymentInitiationPaymentReverseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentreverse">Reverse an existing payment Documentation</a>
     */
    public PaymentInitiationPaymentReverseResponse paymentInitiationPaymentReverse(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentReverseResponse> localVarResp = paymentInitiationPaymentReverseWithHttpInfo(paymentInitiationPaymentReverseRequest);
        return localVarResp.getData();
    }

    /**
     * Reverse an existing payment
     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
     * @param paymentInitiationPaymentReverseRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentReverseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentreverse">Reverse an existing payment Documentation</a>
     */
    public ApiResponse<PaymentInitiationPaymentReverseResponse> paymentInitiationPaymentReverseWithHttpInfo(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationPaymentReverseValidateBeforeCall(paymentInitiationPaymentReverseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentReverseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reverse an existing payment (asynchronously)
     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
     * @param paymentInitiationPaymentReverseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationpaymentreverse">Reverse an existing payment Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentReverseAsync(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, final ApiCallback<PaymentInitiationPaymentReverseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationPaymentReverseValidateBeforeCall(paymentInitiationPaymentReverseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentReverseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationRecipientCreate
     * @param paymentInitiationRecipientCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientcreate">Create payment recipient Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientCreateCall(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationRecipientCreateRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/recipient/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationRecipientCreateValidateBeforeCall(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInitiationRecipientCreateRequest' is set
        if (paymentInitiationRecipientCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationRecipientCreateRequest' when calling paymentInitiationRecipientCreate(Async)");
        }
        

        okhttp3.Call localVarCall = paymentInitiationRecipientCreateCall(paymentInitiationRecipientCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create payment recipient
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
     * @param paymentInitiationRecipientCreateRequest  (required)
     * @return PaymentInitiationRecipientCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientcreate">Create payment recipient Documentation</a>
     */
    public PaymentInitiationRecipientCreateResponse paymentInitiationRecipientCreate(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest) throws ApiException {
        ApiResponse<PaymentInitiationRecipientCreateResponse> localVarResp = paymentInitiationRecipientCreateWithHttpInfo(paymentInitiationRecipientCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create payment recipient
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
     * @param paymentInitiationRecipientCreateRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationRecipientCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientcreate">Create payment recipient Documentation</a>
     */
    public ApiResponse<PaymentInitiationRecipientCreateResponse> paymentInitiationRecipientCreateWithHttpInfo(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationRecipientCreateValidateBeforeCall(paymentInitiationRecipientCreateRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create payment recipient (asynchronously)
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
     * @param paymentInitiationRecipientCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientcreate">Create payment recipient Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientCreateAsync(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, final ApiCallback<PaymentInitiationRecipientCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationRecipientCreateValidateBeforeCall(paymentInitiationRecipientCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationRecipientGet
     * @param paymentInitiationRecipientGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientget">Get payment recipient Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientGetCall(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationRecipientGetRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/recipient/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationRecipientGetValidateBeforeCall(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInitiationRecipientGetRequest' is set
        if (paymentInitiationRecipientGetRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationRecipientGetRequest' when calling paymentInitiationRecipientGet(Async)");
        }
        

        okhttp3.Call localVarCall = paymentInitiationRecipientGetCall(paymentInitiationRecipientGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get payment recipient
     * Get details about a payment recipient you have previously created.
     * @param paymentInitiationRecipientGetRequest  (required)
     * @return PaymentInitiationRecipientGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientget">Get payment recipient Documentation</a>
     */
    public PaymentInitiationRecipientGetResponse paymentInitiationRecipientGet(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest) throws ApiException {
        ApiResponse<PaymentInitiationRecipientGetResponse> localVarResp = paymentInitiationRecipientGetWithHttpInfo(paymentInitiationRecipientGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get payment recipient
     * Get details about a payment recipient you have previously created.
     * @param paymentInitiationRecipientGetRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationRecipientGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientget">Get payment recipient Documentation</a>
     */
    public ApiResponse<PaymentInitiationRecipientGetResponse> paymentInitiationRecipientGetWithHttpInfo(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationRecipientGetValidateBeforeCall(paymentInitiationRecipientGetRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment recipient (asynchronously)
     * Get details about a payment recipient you have previously created.
     * @param paymentInitiationRecipientGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientget">Get payment recipient Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientGetAsync(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, final ApiCallback<PaymentInitiationRecipientGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationRecipientGetValidateBeforeCall(paymentInitiationRecipientGetRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationRecipientList
     * @param paymentInitiationRecipientListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientlist">List payment recipients Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientListCall(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationRecipientListRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/recipient/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationRecipientListValidateBeforeCall(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInitiationRecipientListRequest' is set
        if (paymentInitiationRecipientListRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationRecipientListRequest' when calling paymentInitiationRecipientList(Async)");
        }
        

        okhttp3.Call localVarCall = paymentInitiationRecipientListCall(paymentInitiationRecipientListRequest, _callback);
        return localVarCall;

    }

    /**
     * List payment recipients
     * The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
     * @param paymentInitiationRecipientListRequest  (required)
     * @return PaymentInitiationRecipientListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientlist">List payment recipients Documentation</a>
     */
    public PaymentInitiationRecipientListResponse paymentInitiationRecipientList(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest) throws ApiException {
        ApiResponse<PaymentInitiationRecipientListResponse> localVarResp = paymentInitiationRecipientListWithHttpInfo(paymentInitiationRecipientListRequest);
        return localVarResp.getData();
    }

    /**
     * List payment recipients
     * The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
     * @param paymentInitiationRecipientListRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationRecipientListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientlist">List payment recipients Documentation</a>
     */
    public ApiResponse<PaymentInitiationRecipientListResponse> paymentInitiationRecipientListWithHttpInfo(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationRecipientListValidateBeforeCall(paymentInitiationRecipientListRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List payment recipients (asynchronously)
     * The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
     * @param paymentInitiationRecipientListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#payment_initiationrecipientlist">List payment recipients Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientListAsync(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, final ApiCallback<PaymentInitiationRecipientListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationRecipientListValidateBeforeCall(paymentInitiationRecipientListRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorApexProcessorTokenCreate
     * @param processorApexProcessorTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Create Apex bank account token Documentation</a>
     */
    public okhttp3.Call processorApexProcessorTokenCreateCall(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorApexProcessorTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/processor/apex/processor_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorApexProcessorTokenCreateValidateBeforeCall(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'processorApexProcessorTokenCreateRequest' is set
        if (processorApexProcessorTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorApexProcessorTokenCreateRequest' when calling processorApexProcessorTokenCreate(Async)");
        }
        

        okhttp3.Call localVarCall = processorApexProcessorTokenCreateCall(processorApexProcessorTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Apex bank account token
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @param processorApexProcessorTokenCreateRequest  (required)
     * @return ProcessorTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Create Apex bank account token Documentation</a>
     */
    public ProcessorTokenCreateResponse processorApexProcessorTokenCreate(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest) throws ApiException {
        ApiResponse<ProcessorTokenCreateResponse> localVarResp = processorApexProcessorTokenCreateWithHttpInfo(processorApexProcessorTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Apex bank account token
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @param processorApexProcessorTokenCreateRequest  (required)
     * @return ApiResponse&lt;ProcessorTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Create Apex bank account token Documentation</a>
     */
    public ApiResponse<ProcessorTokenCreateResponse> processorApexProcessorTokenCreateWithHttpInfo(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorApexProcessorTokenCreateValidateBeforeCall(processorApexProcessorTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Apex bank account token (asynchronously)
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @param processorApexProcessorTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Create Apex bank account token Documentation</a>
     */
    public okhttp3.Call processorApexProcessorTokenCreateAsync(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, final ApiCallback<ProcessorTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorApexProcessorTokenCreateValidateBeforeCall(processorApexProcessorTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorAuthGet
     * @param processorAuthGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorauthget">Retrieve Auth data Documentation</a>
     */
    public okhttp3.Call processorAuthGetCall(ProcessorAuthGetRequest processorAuthGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorAuthGetRequest;

        // create path and map variables
        String localVarPath = "/processor/auth/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorAuthGetValidateBeforeCall(ProcessorAuthGetRequest processorAuthGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'processorAuthGetRequest' is set
        if (processorAuthGetRequest == null) {
            throw new ApiException("Missing the required parameter 'processorAuthGetRequest' when calling processorAuthGet(Async)");
        }
        

        okhttp3.Call localVarCall = processorAuthGetCall(processorAuthGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Auth data
     * The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @param processorAuthGetRequest  (required)
     * @return ProcessorAuthGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorauthget">Retrieve Auth data Documentation</a>
     */
    public ProcessorAuthGetResponse processorAuthGet(ProcessorAuthGetRequest processorAuthGetRequest) throws ApiException {
        ApiResponse<ProcessorAuthGetResponse> localVarResp = processorAuthGetWithHttpInfo(processorAuthGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Auth data
     * The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @param processorAuthGetRequest  (required)
     * @return ApiResponse&lt;ProcessorAuthGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorauthget">Retrieve Auth data Documentation</a>
     */
    public ApiResponse<ProcessorAuthGetResponse> processorAuthGetWithHttpInfo(ProcessorAuthGetRequest processorAuthGetRequest) throws ApiException {
        okhttp3.Call localVarCall = processorAuthGetValidateBeforeCall(processorAuthGetRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorAuthGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Auth data (asynchronously)
     * The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @param processorAuthGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorauthget">Retrieve Auth data Documentation</a>
     */
    public okhttp3.Call processorAuthGetAsync(ProcessorAuthGetRequest processorAuthGetRequest, final ApiCallback<ProcessorAuthGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorAuthGetValidateBeforeCall(processorAuthGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorAuthGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorBalanceGet
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorbalanceget">Retrieve Balance data Documentation</a>
     */
    public okhttp3.Call processorBalanceGetCall(ProcessorBalanceGetRequest processorBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorBalanceGetRequest;

        // create path and map variables
        String localVarPath = "/processor/balance/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorBalanceGetValidateBeforeCall(ProcessorBalanceGetRequest processorBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'processorBalanceGetRequest' is set
        if (processorBalanceGetRequest == null) {
            throw new ApiException("Missing the required parameter 'processorBalanceGetRequest' when calling processorBalanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = processorBalanceGetCall(processorBalanceGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Balance data
     * The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. (required)
     * @return ProcessorBalanceGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorbalanceget">Retrieve Balance data Documentation</a>
     */
    public ProcessorBalanceGetResponse processorBalanceGet(ProcessorBalanceGetRequest processorBalanceGetRequest) throws ApiException {
        ApiResponse<ProcessorBalanceGetResponse> localVarResp = processorBalanceGetWithHttpInfo(processorBalanceGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Balance data
     * The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. (required)
     * @return ApiResponse&lt;ProcessorBalanceGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorbalanceget">Retrieve Balance data Documentation</a>
     */
    public ApiResponse<ProcessorBalanceGetResponse> processorBalanceGetWithHttpInfo(ProcessorBalanceGetRequest processorBalanceGetRequest) throws ApiException {
        okhttp3.Call localVarCall = processorBalanceGetValidateBeforeCall(processorBalanceGetRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorBalanceGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Balance data (asynchronously)
     * The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorbalanceget">Retrieve Balance data Documentation</a>
     */
    public okhttp3.Call processorBalanceGetAsync(ProcessorBalanceGetRequest processorBalanceGetRequest, final ApiCallback<ProcessorBalanceGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorBalanceGetValidateBeforeCall(processorBalanceGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorBalanceGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorBankTransferCreate
     * @param processorBankTransferCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#bank_transfercreate">Create a bank transfer as a processor Documentation</a>
     */
    public okhttp3.Call processorBankTransferCreateCall(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorBankTransferCreateRequest;

        // create path and map variables
        String localVarPath = "/processor/bank_transfer/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorBankTransferCreateValidateBeforeCall(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'processorBankTransferCreateRequest' is set
        if (processorBankTransferCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorBankTransferCreateRequest' when calling processorBankTransferCreate(Async)");
        }
        

        okhttp3.Call localVarCall = processorBankTransferCreateCall(processorBankTransferCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a bank transfer as a processor
     * Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
     * @param processorBankTransferCreateRequest  (required)
     * @return ProcessorBankTransferCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#bank_transfercreate">Create a bank transfer as a processor Documentation</a>
     */
    public ProcessorBankTransferCreateResponse processorBankTransferCreate(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest) throws ApiException {
        ApiResponse<ProcessorBankTransferCreateResponse> localVarResp = processorBankTransferCreateWithHttpInfo(processorBankTransferCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a bank transfer as a processor
     * Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
     * @param processorBankTransferCreateRequest  (required)
     * @return ApiResponse&lt;ProcessorBankTransferCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#bank_transfercreate">Create a bank transfer as a processor Documentation</a>
     */
    public ApiResponse<ProcessorBankTransferCreateResponse> processorBankTransferCreateWithHttpInfo(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorBankTransferCreateValidateBeforeCall(processorBankTransferCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorBankTransferCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a bank transfer as a processor (asynchronously)
     * Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
     * @param processorBankTransferCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#bank_transfercreate">Create a bank transfer as a processor Documentation</a>
     */
    public okhttp3.Call processorBankTransferCreateAsync(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, final ApiCallback<ProcessorBankTransferCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorBankTransferCreateValidateBeforeCall(processorBankTransferCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorBankTransferCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorIdentityGet
     * @param processorIdentityGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processoridentityget">Retrieve Identity data Documentation</a>
     */
    public okhttp3.Call processorIdentityGetCall(ProcessorIdentityGetRequest processorIdentityGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorIdentityGetRequest;

        // create path and map variables
        String localVarPath = "/processor/identity/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorIdentityGetValidateBeforeCall(ProcessorIdentityGetRequest processorIdentityGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'processorIdentityGetRequest' is set
        if (processorIdentityGetRequest == null) {
            throw new ApiException("Missing the required parameter 'processorIdentityGetRequest' when calling processorIdentityGet(Async)");
        }
        

        okhttp3.Call localVarCall = processorIdentityGetCall(processorIdentityGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Identity data
     * The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @param processorIdentityGetRequest  (required)
     * @return ProcessorIdentityGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processoridentityget">Retrieve Identity data Documentation</a>
     */
    public ProcessorIdentityGetResponse processorIdentityGet(ProcessorIdentityGetRequest processorIdentityGetRequest) throws ApiException {
        ApiResponse<ProcessorIdentityGetResponse> localVarResp = processorIdentityGetWithHttpInfo(processorIdentityGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Identity data
     * The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @param processorIdentityGetRequest  (required)
     * @return ApiResponse&lt;ProcessorIdentityGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processoridentityget">Retrieve Identity data Documentation</a>
     */
    public ApiResponse<ProcessorIdentityGetResponse> processorIdentityGetWithHttpInfo(ProcessorIdentityGetRequest processorIdentityGetRequest) throws ApiException {
        okhttp3.Call localVarCall = processorIdentityGetValidateBeforeCall(processorIdentityGetRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorIdentityGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Identity data (asynchronously)
     * The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @param processorIdentityGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processoridentityget">Retrieve Identity data Documentation</a>
     */
    public okhttp3.Call processorIdentityGetAsync(ProcessorIdentityGetRequest processorIdentityGetRequest, final ApiCallback<ProcessorIdentityGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorIdentityGetValidateBeforeCall(processorIdentityGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorIdentityGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorStripeBankAccountTokenCreate
     * @param processorStripeBankAccountTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorstripebank_account_tokencreate">Create Stripe bank account token Documentation</a>
     */
    public okhttp3.Call processorStripeBankAccountTokenCreateCall(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorStripeBankAccountTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/processor/stripe/bank_account_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorStripeBankAccountTokenCreateValidateBeforeCall(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'processorStripeBankAccountTokenCreateRequest' is set
        if (processorStripeBankAccountTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorStripeBankAccountTokenCreateRequest' when calling processorStripeBankAccountTokenCreate(Async)");
        }
        

        okhttp3.Call localVarCall = processorStripeBankAccountTokenCreateCall(processorStripeBankAccountTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Stripe bank account token
     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
     * @param processorStripeBankAccountTokenCreateRequest  (required)
     * @return ProcessorStripeBankAccountTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorstripebank_account_tokencreate">Create Stripe bank account token Documentation</a>
     */
    public ProcessorStripeBankAccountTokenCreateResponse processorStripeBankAccountTokenCreate(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest) throws ApiException {
        ApiResponse<ProcessorStripeBankAccountTokenCreateResponse> localVarResp = processorStripeBankAccountTokenCreateWithHttpInfo(processorStripeBankAccountTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Stripe bank account token
     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
     * @param processorStripeBankAccountTokenCreateRequest  (required)
     * @return ApiResponse&lt;ProcessorStripeBankAccountTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorstripebank_account_tokencreate">Create Stripe bank account token Documentation</a>
     */
    public ApiResponse<ProcessorStripeBankAccountTokenCreateResponse> processorStripeBankAccountTokenCreateWithHttpInfo(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorStripeBankAccountTokenCreateValidateBeforeCall(processorStripeBankAccountTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorStripeBankAccountTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Stripe bank account token (asynchronously)
     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
     * @param processorStripeBankAccountTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorstripebank_account_tokencreate">Create Stripe bank account token Documentation</a>
     */
    public okhttp3.Call processorStripeBankAccountTokenCreateAsync(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, final ApiCallback<ProcessorStripeBankAccountTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorStripeBankAccountTokenCreateValidateBeforeCall(processorStripeBankAccountTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorStripeBankAccountTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorTokenCreate
     * @param processorTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processortokencreate">Create processor token Documentation</a>
     */
    public okhttp3.Call processorTokenCreateCall(ProcessorTokenCreateRequest processorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/processor/token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorTokenCreateValidateBeforeCall(ProcessorTokenCreateRequest processorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'processorTokenCreateRequest' is set
        if (processorTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorTokenCreateRequest' when calling processorTokenCreate(Async)");
        }
        

        okhttp3.Call localVarCall = processorTokenCreateCall(processorTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create processor token
     * Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
     * @param processorTokenCreateRequest  (required)
     * @return ProcessorTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processortokencreate">Create processor token Documentation</a>
     */
    public ProcessorTokenCreateResponse processorTokenCreate(ProcessorTokenCreateRequest processorTokenCreateRequest) throws ApiException {
        ApiResponse<ProcessorTokenCreateResponse> localVarResp = processorTokenCreateWithHttpInfo(processorTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create processor token
     * Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
     * @param processorTokenCreateRequest  (required)
     * @return ApiResponse&lt;ProcessorTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processortokencreate">Create processor token Documentation</a>
     */
    public ApiResponse<ProcessorTokenCreateResponse> processorTokenCreateWithHttpInfo(ProcessorTokenCreateRequest processorTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorTokenCreateValidateBeforeCall(processorTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create processor token (asynchronously)
     * Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
     * @param processorTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processortokencreate">Create processor token Documentation</a>
     */
    public okhttp3.Call processorTokenCreateAsync(ProcessorTokenCreateRequest processorTokenCreateRequest, final ApiCallback<ProcessorTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorTokenCreateValidateBeforeCall(processorTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxBankTransferFireWebhook
     * @param sandboxBankTransferFireWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transferfire_webhook">Manually fire a Bank Transfer webhook Documentation</a>
     */
    public okhttp3.Call sandboxBankTransferFireWebhookCall(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxBankTransferFireWebhookRequest;

        // create path and map variables
        String localVarPath = "/sandbox/bank_transfer/fire_webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxBankTransferFireWebhookValidateBeforeCall(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxBankTransferFireWebhookRequest' is set
        if (sandboxBankTransferFireWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxBankTransferFireWebhookRequest' when calling sandboxBankTransferFireWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxBankTransferFireWebhookCall(sandboxBankTransferFireWebhookRequest, _callback);
        return localVarCall;

    }

    /**
     * Manually fire a Bank Transfer webhook
     * Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @param sandboxBankTransferFireWebhookRequest  (required)
     * @return SandboxBankTransferFireWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transferfire_webhook">Manually fire a Bank Transfer webhook Documentation</a>
     */
    public SandboxBankTransferFireWebhookResponse sandboxBankTransferFireWebhook(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest) throws ApiException {
        ApiResponse<SandboxBankTransferFireWebhookResponse> localVarResp = sandboxBankTransferFireWebhookWithHttpInfo(sandboxBankTransferFireWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Manually fire a Bank Transfer webhook
     * Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @param sandboxBankTransferFireWebhookRequest  (required)
     * @return ApiResponse&lt;SandboxBankTransferFireWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transferfire_webhook">Manually fire a Bank Transfer webhook Documentation</a>
     */
    public ApiResponse<SandboxBankTransferFireWebhookResponse> sandboxBankTransferFireWebhookWithHttpInfo(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxBankTransferFireWebhookValidateBeforeCall(sandboxBankTransferFireWebhookRequest, null);
        Type localVarReturnType = new TypeToken<SandboxBankTransferFireWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manually fire a Bank Transfer webhook (asynchronously)
     * Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @param sandboxBankTransferFireWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transferfire_webhook">Manually fire a Bank Transfer webhook Documentation</a>
     */
    public okhttp3.Call sandboxBankTransferFireWebhookAsync(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, final ApiCallback<SandboxBankTransferFireWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxBankTransferFireWebhookValidateBeforeCall(sandboxBankTransferFireWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxBankTransferFireWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxBankTransferSimulate
     * @param sandboxBankTransferSimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transfersimulate">Simulate a bank transfer event in Sandbox Documentation</a>
     */
    public okhttp3.Call sandboxBankTransferSimulateCall(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxBankTransferSimulateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/bank_transfer/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxBankTransferSimulateValidateBeforeCall(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxBankTransferSimulateRequest' is set
        if (sandboxBankTransferSimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxBankTransferSimulateRequest' when calling sandboxBankTransferSimulate(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxBankTransferSimulateCall(sandboxBankTransferSimulateRequest, _callback);
        return localVarCall;

    }

    /**
     * Simulate a bank transfer event in Sandbox
     * Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxBankTransferSimulateRequest  (required)
     * @return SandboxBankTransferSimulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transfersimulate">Simulate a bank transfer event in Sandbox Documentation</a>
     */
    public SandboxBankTransferSimulateResponse sandboxBankTransferSimulate(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest) throws ApiException {
        ApiResponse<SandboxBankTransferSimulateResponse> localVarResp = sandboxBankTransferSimulateWithHttpInfo(sandboxBankTransferSimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate a bank transfer event in Sandbox
     * Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxBankTransferSimulateRequest  (required)
     * @return ApiResponse&lt;SandboxBankTransferSimulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transfersimulate">Simulate a bank transfer event in Sandbox Documentation</a>
     */
    public ApiResponse<SandboxBankTransferSimulateResponse> sandboxBankTransferSimulateWithHttpInfo(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxBankTransferSimulateValidateBeforeCall(sandboxBankTransferSimulateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxBankTransferSimulateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate a bank transfer event in Sandbox (asynchronously)
     * Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxBankTransferSimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transfersimulate">Simulate a bank transfer event in Sandbox Documentation</a>
     */
    public okhttp3.Call sandboxBankTransferSimulateAsync(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, final ApiCallback<SandboxBankTransferSimulateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxBankTransferSimulateValidateBeforeCall(sandboxBankTransferSimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxBankTransferSimulateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxIncomeFireWebhook
     * @param sandboxIncomeFireWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxincomefire_webhook">Manually fire an Income webhook Documentation</a>
     */
    public okhttp3.Call sandboxIncomeFireWebhookCall(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxIncomeFireWebhookRequest;

        // create path and map variables
        String localVarPath = "/sandbox/income/fire_webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxIncomeFireWebhookValidateBeforeCall(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxIncomeFireWebhookRequest' is set
        if (sandboxIncomeFireWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxIncomeFireWebhookRequest' when calling sandboxIncomeFireWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxIncomeFireWebhookCall(sandboxIncomeFireWebhookRequest, _callback);
        return localVarCall;

    }

    /**
     * Manually fire an Income webhook
     * Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @param sandboxIncomeFireWebhookRequest  (required)
     * @return SandboxIncomeFireWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxincomefire_webhook">Manually fire an Income webhook Documentation</a>
     */
    public SandboxIncomeFireWebhookResponse sandboxIncomeFireWebhook(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest) throws ApiException {
        ApiResponse<SandboxIncomeFireWebhookResponse> localVarResp = sandboxIncomeFireWebhookWithHttpInfo(sandboxIncomeFireWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Manually fire an Income webhook
     * Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @param sandboxIncomeFireWebhookRequest  (required)
     * @return ApiResponse&lt;SandboxIncomeFireWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxincomefire_webhook">Manually fire an Income webhook Documentation</a>
     */
    public ApiResponse<SandboxIncomeFireWebhookResponse> sandboxIncomeFireWebhookWithHttpInfo(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxIncomeFireWebhookValidateBeforeCall(sandboxIncomeFireWebhookRequest, null);
        Type localVarReturnType = new TypeToken<SandboxIncomeFireWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manually fire an Income webhook (asynchronously)
     * Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @param sandboxIncomeFireWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxincomefire_webhook">Manually fire an Income webhook Documentation</a>
     */
    public okhttp3.Call sandboxIncomeFireWebhookAsync(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, final ApiCallback<SandboxIncomeFireWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxIncomeFireWebhookValidateBeforeCall(sandboxIncomeFireWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxIncomeFireWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxItemFireWebhook
     * @param sandboxItemFireWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemfire_webhook">Fire a test webhook Documentation</a>
     */
    public okhttp3.Call sandboxItemFireWebhookCall(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxItemFireWebhookRequest;

        // create path and map variables
        String localVarPath = "/sandbox/item/fire_webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxItemFireWebhookValidateBeforeCall(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxItemFireWebhookRequest' is set
        if (sandboxItemFireWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxItemFireWebhookRequest' when calling sandboxItemFireWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxItemFireWebhookCall(sandboxItemFireWebhookRequest, _callback);
        return localVarCall;

    }

    /**
     * Fire a test webhook
     * The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @param sandboxItemFireWebhookRequest  (required)
     * @return SandboxItemFireWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemfire_webhook">Fire a test webhook Documentation</a>
     */
    public SandboxItemFireWebhookResponse sandboxItemFireWebhook(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest) throws ApiException {
        ApiResponse<SandboxItemFireWebhookResponse> localVarResp = sandboxItemFireWebhookWithHttpInfo(sandboxItemFireWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Fire a test webhook
     * The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @param sandboxItemFireWebhookRequest  (required)
     * @return ApiResponse&lt;SandboxItemFireWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemfire_webhook">Fire a test webhook Documentation</a>
     */
    public ApiResponse<SandboxItemFireWebhookResponse> sandboxItemFireWebhookWithHttpInfo(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxItemFireWebhookValidateBeforeCall(sandboxItemFireWebhookRequest, null);
        Type localVarReturnType = new TypeToken<SandboxItemFireWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fire a test webhook (asynchronously)
     * The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @param sandboxItemFireWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemfire_webhook">Fire a test webhook Documentation</a>
     */
    public okhttp3.Call sandboxItemFireWebhookAsync(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, final ApiCallback<SandboxItemFireWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxItemFireWebhookValidateBeforeCall(sandboxItemFireWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxItemFireWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxItemResetLogin
     * @param sandboxItemResetLoginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemreset_login">Force a Sandbox Item into an error state Documentation</a>
     */
    public okhttp3.Call sandboxItemResetLoginCall(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxItemResetLoginRequest;

        // create path and map variables
        String localVarPath = "/sandbox/item/reset_login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxItemResetLoginValidateBeforeCall(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxItemResetLoginRequest' is set
        if (sandboxItemResetLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxItemResetLoginRequest' when calling sandboxItemResetLogin(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxItemResetLoginCall(sandboxItemResetLoginRequest, _callback);
        return localVarCall;

    }

    /**
     * Force a Sandbox Item into an error state
     * &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
     * @param sandboxItemResetLoginRequest  (required)
     * @return SandboxItemResetLoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemreset_login">Force a Sandbox Item into an error state Documentation</a>
     */
    public SandboxItemResetLoginResponse sandboxItemResetLogin(SandboxItemResetLoginRequest sandboxItemResetLoginRequest) throws ApiException {
        ApiResponse<SandboxItemResetLoginResponse> localVarResp = sandboxItemResetLoginWithHttpInfo(sandboxItemResetLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Force a Sandbox Item into an error state
     * &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
     * @param sandboxItemResetLoginRequest  (required)
     * @return ApiResponse&lt;SandboxItemResetLoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemreset_login">Force a Sandbox Item into an error state Documentation</a>
     */
    public ApiResponse<SandboxItemResetLoginResponse> sandboxItemResetLoginWithHttpInfo(SandboxItemResetLoginRequest sandboxItemResetLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxItemResetLoginValidateBeforeCall(sandboxItemResetLoginRequest, null);
        Type localVarReturnType = new TypeToken<SandboxItemResetLoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Force a Sandbox Item into an error state (asynchronously)
     * &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
     * @param sandboxItemResetLoginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemreset_login">Force a Sandbox Item into an error state Documentation</a>
     */
    public okhttp3.Call sandboxItemResetLoginAsync(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, final ApiCallback<SandboxItemResetLoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxItemResetLoginValidateBeforeCall(sandboxItemResetLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxItemResetLoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxItemSetVerificationStatus
     * @param sandboxItemSetVerificationStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemset_verification_status">Set verification status for Sandbox account Documentation</a>
     */
    public okhttp3.Call sandboxItemSetVerificationStatusCall(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxItemSetVerificationStatusRequest;

        // create path and map variables
        String localVarPath = "/sandbox/item/set_verification_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxItemSetVerificationStatusValidateBeforeCall(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxItemSetVerificationStatusRequest' is set
        if (sandboxItemSetVerificationStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxItemSetVerificationStatusRequest' when calling sandboxItemSetVerificationStatus(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxItemSetVerificationStatusCall(sandboxItemSetVerificationStatusRequest, _callback);
        return localVarCall;

    }

    /**
     * Set verification status for Sandbox account
     * The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @param sandboxItemSetVerificationStatusRequest  (required)
     * @return SandboxItemSetVerificationStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemset_verification_status">Set verification status for Sandbox account Documentation</a>
     */
    public SandboxItemSetVerificationStatusResponse sandboxItemSetVerificationStatus(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest) throws ApiException {
        ApiResponse<SandboxItemSetVerificationStatusResponse> localVarResp = sandboxItemSetVerificationStatusWithHttpInfo(sandboxItemSetVerificationStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Set verification status for Sandbox account
     * The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @param sandboxItemSetVerificationStatusRequest  (required)
     * @return ApiResponse&lt;SandboxItemSetVerificationStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemset_verification_status">Set verification status for Sandbox account Documentation</a>
     */
    public ApiResponse<SandboxItemSetVerificationStatusResponse> sandboxItemSetVerificationStatusWithHttpInfo(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxItemSetVerificationStatusValidateBeforeCall(sandboxItemSetVerificationStatusRequest, null);
        Type localVarReturnType = new TypeToken<SandboxItemSetVerificationStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set verification status for Sandbox account (asynchronously)
     * The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @param sandboxItemSetVerificationStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemset_verification_status">Set verification status for Sandbox account Documentation</a>
     */
    public okhttp3.Call sandboxItemSetVerificationStatusAsync(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, final ApiCallback<SandboxItemSetVerificationStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxItemSetVerificationStatusValidateBeforeCall(sandboxItemSetVerificationStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxItemSetVerificationStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxOauthSelectAccounts
     * @param sandboxOauthSelectAccountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sandboxOauthSelectAccountsCall(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxOauthSelectAccountsRequest;

        // create path and map variables
        String localVarPath = "/sandbox/oauth/select_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxOauthSelectAccountsValidateBeforeCall(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxOauthSelectAccountsRequest' is set
        if (sandboxOauthSelectAccountsRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxOauthSelectAccountsRequest' when calling sandboxOauthSelectAccounts(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxOauthSelectAccountsCall(sandboxOauthSelectAccountsRequest, _callback);
        return localVarCall;

    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @param sandboxOauthSelectAccountsRequest  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> sandboxOauthSelectAccounts(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = sandboxOauthSelectAccountsWithHttpInfo(sandboxOauthSelectAccountsRequest);
        return localVarResp.getData();
    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @param sandboxOauthSelectAccountsRequest  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> sandboxOauthSelectAccountsWithHttpInfo(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxOauthSelectAccountsValidateBeforeCall(sandboxOauthSelectAccountsRequest, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution (asynchronously)
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @param sandboxOauthSelectAccountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sandboxOauthSelectAccountsAsync(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxOauthSelectAccountsValidateBeforeCall(sandboxOauthSelectAccountsRequest, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxProcessorTokenCreate
     * @param sandboxProcessorTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxprocessor_tokencreate">Create a test Item and processor token Documentation</a>
     */
    public okhttp3.Call sandboxProcessorTokenCreateCall(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxProcessorTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/processor_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxProcessorTokenCreateValidateBeforeCall(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxProcessorTokenCreateRequest' is set
        if (sandboxProcessorTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxProcessorTokenCreateRequest' when calling sandboxProcessorTokenCreate(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxProcessorTokenCreateCall(sandboxProcessorTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a test Item and processor token
     * Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @param sandboxProcessorTokenCreateRequest  (required)
     * @return SandboxProcessorTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxprocessor_tokencreate">Create a test Item and processor token Documentation</a>
     */
    public SandboxProcessorTokenCreateResponse sandboxProcessorTokenCreate(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest) throws ApiException {
        ApiResponse<SandboxProcessorTokenCreateResponse> localVarResp = sandboxProcessorTokenCreateWithHttpInfo(sandboxProcessorTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a test Item and processor token
     * Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @param sandboxProcessorTokenCreateRequest  (required)
     * @return ApiResponse&lt;SandboxProcessorTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxprocessor_tokencreate">Create a test Item and processor token Documentation</a>
     */
    public ApiResponse<SandboxProcessorTokenCreateResponse> sandboxProcessorTokenCreateWithHttpInfo(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxProcessorTokenCreateValidateBeforeCall(sandboxProcessorTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxProcessorTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a test Item and processor token (asynchronously)
     * Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @param sandboxProcessorTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxprocessor_tokencreate">Create a test Item and processor token Documentation</a>
     */
    public okhttp3.Call sandboxProcessorTokenCreateAsync(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, final ApiCallback<SandboxProcessorTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxProcessorTokenCreateValidateBeforeCall(sandboxProcessorTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxProcessorTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxPublicTokenCreate
     * @param sandboxPublicTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpublic_tokencreate">Create a test Item Documentation</a>
     */
    public okhttp3.Call sandboxPublicTokenCreateCall(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxPublicTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/public_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxPublicTokenCreateValidateBeforeCall(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxPublicTokenCreateRequest' is set
        if (sandboxPublicTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxPublicTokenCreateRequest' when calling sandboxPublicTokenCreate(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxPublicTokenCreateCall(sandboxPublicTokenCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a test Item
     * Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
     * @param sandboxPublicTokenCreateRequest  (required)
     * @return SandboxPublicTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpublic_tokencreate">Create a test Item Documentation</a>
     */
    public SandboxPublicTokenCreateResponse sandboxPublicTokenCreate(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest) throws ApiException {
        ApiResponse<SandboxPublicTokenCreateResponse> localVarResp = sandboxPublicTokenCreateWithHttpInfo(sandboxPublicTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a test Item
     * Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
     * @param sandboxPublicTokenCreateRequest  (required)
     * @return ApiResponse&lt;SandboxPublicTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpublic_tokencreate">Create a test Item Documentation</a>
     */
    public ApiResponse<SandboxPublicTokenCreateResponse> sandboxPublicTokenCreateWithHttpInfo(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxPublicTokenCreateValidateBeforeCall(sandboxPublicTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxPublicTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a test Item (asynchronously)
     * Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
     * @param sandboxPublicTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpublic_tokencreate">Create a test Item Documentation</a>
     */
    public okhttp3.Call sandboxPublicTokenCreateAsync(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, final ApiCallback<SandboxPublicTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxPublicTokenCreateValidateBeforeCall(sandboxPublicTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxPublicTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferRepaymentSimulate
     * @param sandboxTransferRepaymentSimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferrepaymentsimulate">Trigger the creation of a repayment Documentation</a>
     */
    public okhttp3.Call sandboxTransferRepaymentSimulateCall(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferRepaymentSimulateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/repayment/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferRepaymentSimulateValidateBeforeCall(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxTransferRepaymentSimulateRequest' is set
        if (sandboxTransferRepaymentSimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferRepaymentSimulateRequest' when calling sandboxTransferRepaymentSimulate(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxTransferRepaymentSimulateCall(sandboxTransferRepaymentSimulateRequest, _callback);
        return localVarCall;

    }

    /**
     * Trigger the creation of a repayment
     * Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @param sandboxTransferRepaymentSimulateRequest  (required)
     * @return SandboxTransferRepaymentSimulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferrepaymentsimulate">Trigger the creation of a repayment Documentation</a>
     */
    public SandboxTransferRepaymentSimulateResponse sandboxTransferRepaymentSimulate(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest) throws ApiException {
        ApiResponse<SandboxTransferRepaymentSimulateResponse> localVarResp = sandboxTransferRepaymentSimulateWithHttpInfo(sandboxTransferRepaymentSimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the creation of a repayment
     * Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @param sandboxTransferRepaymentSimulateRequest  (required)
     * @return ApiResponse&lt;SandboxTransferRepaymentSimulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferrepaymentsimulate">Trigger the creation of a repayment Documentation</a>
     */
    public ApiResponse<SandboxTransferRepaymentSimulateResponse> sandboxTransferRepaymentSimulateWithHttpInfo(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferRepaymentSimulateValidateBeforeCall(sandboxTransferRepaymentSimulateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferRepaymentSimulateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the creation of a repayment (asynchronously)
     * Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @param sandboxTransferRepaymentSimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferrepaymentsimulate">Trigger the creation of a repayment Documentation</a>
     */
    public okhttp3.Call sandboxTransferRepaymentSimulateAsync(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, final ApiCallback<SandboxTransferRepaymentSimulateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferRepaymentSimulateValidateBeforeCall(sandboxTransferRepaymentSimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferRepaymentSimulateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferSimulate
     * @param sandboxTransferSimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersimulate">Simulate a transfer event in Sandbox Documentation</a>
     */
    public okhttp3.Call sandboxTransferSimulateCall(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferSimulateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferSimulateValidateBeforeCall(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxTransferSimulateRequest' is set
        if (sandboxTransferSimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferSimulateRequest' when calling sandboxTransferSimulate(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxTransferSimulateCall(sandboxTransferSimulateRequest, _callback);
        return localVarCall;

    }

    /**
     * Simulate a transfer event in Sandbox
     * Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxTransferSimulateRequest  (required)
     * @return SandboxTransferSimulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersimulate">Simulate a transfer event in Sandbox Documentation</a>
     */
    public SandboxTransferSimulateResponse sandboxTransferSimulate(SandboxTransferSimulateRequest sandboxTransferSimulateRequest) throws ApiException {
        ApiResponse<SandboxTransferSimulateResponse> localVarResp = sandboxTransferSimulateWithHttpInfo(sandboxTransferSimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate a transfer event in Sandbox
     * Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxTransferSimulateRequest  (required)
     * @return ApiResponse&lt;SandboxTransferSimulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersimulate">Simulate a transfer event in Sandbox Documentation</a>
     */
    public ApiResponse<SandboxTransferSimulateResponse> sandboxTransferSimulateWithHttpInfo(SandboxTransferSimulateRequest sandboxTransferSimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferSimulateValidateBeforeCall(sandboxTransferSimulateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferSimulateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate a transfer event in Sandbox (asynchronously)
     * Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxTransferSimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersimulate">Simulate a transfer event in Sandbox Documentation</a>
     */
    public okhttp3.Call sandboxTransferSimulateAsync(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, final ApiCallback<SandboxTransferSimulateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferSimulateValidateBeforeCall(sandboxTransferSimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferSimulateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferSweepSimulate
     * @param sandboxTransferSweepSimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersweepsimulate">Simulate creating a sweep Documentation</a>
     */
    public okhttp3.Call sandboxTransferSweepSimulateCall(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferSweepSimulateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/sweep/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferSweepSimulateValidateBeforeCall(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sandboxTransferSweepSimulateRequest' is set
        if (sandboxTransferSweepSimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferSweepSimulateRequest' when calling sandboxTransferSweepSimulate(Async)");
        }
        

        okhttp3.Call localVarCall = sandboxTransferSweepSimulateCall(sandboxTransferSweepSimulateRequest, _callback);
        return localVarCall;

    }

    /**
     * Simulate creating a sweep
     * Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
     * @param sandboxTransferSweepSimulateRequest  (required)
     * @return SandboxTransferSweepSimulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersweepsimulate">Simulate creating a sweep Documentation</a>
     */
    public SandboxTransferSweepSimulateResponse sandboxTransferSweepSimulate(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest) throws ApiException {
        ApiResponse<SandboxTransferSweepSimulateResponse> localVarResp = sandboxTransferSweepSimulateWithHttpInfo(sandboxTransferSweepSimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate creating a sweep
     * Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
     * @param sandboxTransferSweepSimulateRequest  (required)
     * @return ApiResponse&lt;SandboxTransferSweepSimulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersweepsimulate">Simulate creating a sweep Documentation</a>
     */
    public ApiResponse<SandboxTransferSweepSimulateResponse> sandboxTransferSweepSimulateWithHttpInfo(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferSweepSimulateValidateBeforeCall(sandboxTransferSweepSimulateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferSweepSimulateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate creating a sweep (asynchronously)
     * Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
     * @param sandboxTransferSweepSimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersweepsimulate">Simulate creating a sweep Documentation</a>
     */
    public okhttp3.Call sandboxTransferSweepSimulateAsync(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, final ApiCallback<SandboxTransferSweepSimulateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferSweepSimulateValidateBeforeCall(sandboxTransferSweepSimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferSweepSimulateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalDecisionReport
     * @param signalDecisionReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public okhttp3.Call signalDecisionReportCall(SignalDecisionReportRequest signalDecisionReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signalDecisionReportRequest;

        // create path and map variables
        String localVarPath = "/signal/decision/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalDecisionReportValidateBeforeCall(SignalDecisionReportRequest signalDecisionReportRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'signalDecisionReportRequest' is set
        if (signalDecisionReportRequest == null) {
            throw new ApiException("Missing the required parameter 'signalDecisionReportRequest' when calling signalDecisionReport(Async)");
        }
        

        okhttp3.Call localVarCall = signalDecisionReportCall(signalDecisionReportRequest, _callback);
        return localVarCall;

    }

    /**
     * Report whether you initiated an ACH transaction
     * After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param signalDecisionReportRequest  (required)
     * @return SignalDecisionReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public SignalDecisionReportResponse signalDecisionReport(SignalDecisionReportRequest signalDecisionReportRequest) throws ApiException {
        ApiResponse<SignalDecisionReportResponse> localVarResp = signalDecisionReportWithHttpInfo(signalDecisionReportRequest);
        return localVarResp.getData();
    }

    /**
     * Report whether you initiated an ACH transaction
     * After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param signalDecisionReportRequest  (required)
     * @return ApiResponse&lt;SignalDecisionReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public ApiResponse<SignalDecisionReportResponse> signalDecisionReportWithHttpInfo(SignalDecisionReportRequest signalDecisionReportRequest) throws ApiException {
        okhttp3.Call localVarCall = signalDecisionReportValidateBeforeCall(signalDecisionReportRequest, null);
        Type localVarReturnType = new TypeToken<SignalDecisionReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report whether you initiated an ACH transaction (asynchronously)
     * After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param signalDecisionReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public okhttp3.Call signalDecisionReportAsync(SignalDecisionReportRequest signalDecisionReportRequest, final ApiCallback<SignalDecisionReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalDecisionReportValidateBeforeCall(signalDecisionReportRequest, _callback);
        Type localVarReturnType = new TypeToken<SignalDecisionReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalEvaluate
     * @param signalEvaluateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public okhttp3.Call signalEvaluateCall(SignalEvaluateRequest signalEvaluateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signalEvaluateRequest;

        // create path and map variables
        String localVarPath = "/signal/evaluate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalEvaluateValidateBeforeCall(SignalEvaluateRequest signalEvaluateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'signalEvaluateRequest' is set
        if (signalEvaluateRequest == null) {
            throw new ApiException("Missing the required parameter 'signalEvaluateRequest' when calling signalEvaluate(Async)");
        }
        

        okhttp3.Call localVarCall = signalEvaluateCall(signalEvaluateRequest, _callback);
        return localVarCall;

    }

    /**
     * Evaluate a planned ACH transaction
     * Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
     * @param signalEvaluateRequest  (required)
     * @return SignalEvaluateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public SignalEvaluateResponse signalEvaluate(SignalEvaluateRequest signalEvaluateRequest) throws ApiException {
        ApiResponse<SignalEvaluateResponse> localVarResp = signalEvaluateWithHttpInfo(signalEvaluateRequest);
        return localVarResp.getData();
    }

    /**
     * Evaluate a planned ACH transaction
     * Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
     * @param signalEvaluateRequest  (required)
     * @return ApiResponse&lt;SignalEvaluateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public ApiResponse<SignalEvaluateResponse> signalEvaluateWithHttpInfo(SignalEvaluateRequest signalEvaluateRequest) throws ApiException {
        okhttp3.Call localVarCall = signalEvaluateValidateBeforeCall(signalEvaluateRequest, null);
        Type localVarReturnType = new TypeToken<SignalEvaluateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluate a planned ACH transaction (asynchronously)
     * Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
     * @param signalEvaluateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public okhttp3.Call signalEvaluateAsync(SignalEvaluateRequest signalEvaluateRequest, final ApiCallback<SignalEvaluateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalEvaluateValidateBeforeCall(signalEvaluateRequest, _callback);
        Type localVarReturnType = new TypeToken<SignalEvaluateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalReturnReport
     * @param signalReturnReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public okhttp3.Call signalReturnReportCall(SignalReturnReportRequest signalReturnReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signalReturnReportRequest;

        // create path and map variables
        String localVarPath = "/signal/return/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalReturnReportValidateBeforeCall(SignalReturnReportRequest signalReturnReportRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'signalReturnReportRequest' is set
        if (signalReturnReportRequest == null) {
            throw new ApiException("Missing the required parameter 'signalReturnReportRequest' when calling signalReturnReport(Async)");
        }
        

        okhttp3.Call localVarCall = signalReturnReportCall(signalReturnReportRequest, _callback);
        return localVarCall;

    }

    /**
     * Report a return for an ACH transaction
     * Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
     * @param signalReturnReportRequest  (required)
     * @return SignalReturnReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public SignalReturnReportResponse signalReturnReport(SignalReturnReportRequest signalReturnReportRequest) throws ApiException {
        ApiResponse<SignalReturnReportResponse> localVarResp = signalReturnReportWithHttpInfo(signalReturnReportRequest);
        return localVarResp.getData();
    }

    /**
     * Report a return for an ACH transaction
     * Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
     * @param signalReturnReportRequest  (required)
     * @return ApiResponse&lt;SignalReturnReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public ApiResponse<SignalReturnReportResponse> signalReturnReportWithHttpInfo(SignalReturnReportRequest signalReturnReportRequest) throws ApiException {
        okhttp3.Call localVarCall = signalReturnReportValidateBeforeCall(signalReturnReportRequest, null);
        Type localVarReturnType = new TypeToken<SignalReturnReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report a return for an ACH transaction (asynchronously)
     * Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
     * @param signalReturnReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/signal/reference#signalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public okhttp3.Call signalReturnReportAsync(SignalReturnReportRequest signalReturnReportRequest, final ApiCallback<SignalReturnReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalReturnReportValidateBeforeCall(signalReturnReportRequest, _callback);
        Type localVarReturnType = new TypeToken<SignalReturnReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsGet
     * @param transactionsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionsget">Get transaction data Documentation</a>
     */
    public okhttp3.Call transactionsGetCall(TransactionsGetRequest transactionsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsGetRequest;

        // create path and map variables
        String localVarPath = "/transactions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsGetValidateBeforeCall(TransactionsGetRequest transactionsGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionsGetRequest' is set
        if (transactionsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsGetRequest' when calling transactionsGet(Async)");
        }
        

        okhttp3.Call localVarCall = transactionsGetCall(transactionsGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get transaction data
     * The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
     * @param transactionsGetRequest  (required)
     * @return TransactionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionsget">Get transaction data Documentation</a>
     */
    public TransactionsGetResponse transactionsGet(TransactionsGetRequest transactionsGetRequest) throws ApiException {
        ApiResponse<TransactionsGetResponse> localVarResp = transactionsGetWithHttpInfo(transactionsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get transaction data
     * The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
     * @param transactionsGetRequest  (required)
     * @return ApiResponse&lt;TransactionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionsget">Get transaction data Documentation</a>
     */
    public ApiResponse<TransactionsGetResponse> transactionsGetWithHttpInfo(TransactionsGetRequest transactionsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(transactionsGetRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transaction data (asynchronously)
     * The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
     * @param transactionsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionsget">Get transaction data Documentation</a>
     */
    public okhttp3.Call transactionsGetAsync(TransactionsGetRequest transactionsGetRequest, final ApiCallback<TransactionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(transactionsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRecurringGet
     * @param transactionsRecurringGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringGetCall(TransactionsRecurringGetRequest transactionsRecurringGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsRecurringGetRequest;

        // create path and map variables
        String localVarPath = "/transactions/recurring/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRecurringGetValidateBeforeCall(TransactionsRecurringGetRequest transactionsRecurringGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionsRecurringGetRequest' is set
        if (transactionsRecurringGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsRecurringGetRequest' when calling transactionsRecurringGet(Async)");
        }
        

        okhttp3.Call localVarCall = transactionsRecurringGetCall(transactionsRecurringGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get streams of recurring transactions
     * The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsRecurringGetRequest  (required)
     * @return TransactionsRecurringGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TransactionsRecurringGetResponse transactionsRecurringGet(TransactionsRecurringGetRequest transactionsRecurringGetRequest) throws ApiException {
        ApiResponse<TransactionsRecurringGetResponse> localVarResp = transactionsRecurringGetWithHttpInfo(transactionsRecurringGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get streams of recurring transactions
     * The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsRecurringGetRequest  (required)
     * @return ApiResponse&lt;TransactionsRecurringGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionsRecurringGetResponse> transactionsRecurringGetWithHttpInfo(TransactionsRecurringGetRequest transactionsRecurringGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsRecurringGetValidateBeforeCall(transactionsRecurringGetRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsRecurringGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get streams of recurring transactions (asynchronously)
     * The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsRecurringGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringGetAsync(TransactionsRecurringGetRequest transactionsRecurringGetRequest, final ApiCallback<TransactionsRecurringGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRecurringGetValidateBeforeCall(transactionsRecurringGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsRecurringGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRefresh
     * @param transactionsRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionsrefresh">Refresh transaction data Documentation</a>
     */
    public okhttp3.Call transactionsRefreshCall(TransactionsRefreshRequest transactionsRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsRefreshRequest;

        // create path and map variables
        String localVarPath = "/transactions/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRefreshValidateBeforeCall(TransactionsRefreshRequest transactionsRefreshRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionsRefreshRequest' is set
        if (transactionsRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsRefreshRequest' when calling transactionsRefresh(Async)");
        }
        

        okhttp3.Call localVarCall = transactionsRefreshCall(transactionsRefreshRequest, _callback);
        return localVarCall;

    }

    /**
     * Refresh transaction data
     * &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
     * @param transactionsRefreshRequest  (required)
     * @return TransactionsRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionsrefresh">Refresh transaction data Documentation</a>
     */
    public TransactionsRefreshResponse transactionsRefresh(TransactionsRefreshRequest transactionsRefreshRequest) throws ApiException {
        ApiResponse<TransactionsRefreshResponse> localVarResp = transactionsRefreshWithHttpInfo(transactionsRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh transaction data
     * &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
     * @param transactionsRefreshRequest  (required)
     * @return ApiResponse&lt;TransactionsRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionsrefresh">Refresh transaction data Documentation</a>
     */
    public ApiResponse<TransactionsRefreshResponse> transactionsRefreshWithHttpInfo(TransactionsRefreshRequest transactionsRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsRefreshValidateBeforeCall(transactionsRefreshRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh transaction data (asynchronously)
     * &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
     * @param transactionsRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionsrefresh">Refresh transaction data Documentation</a>
     */
    public okhttp3.Call transactionsRefreshAsync(TransactionsRefreshRequest transactionsRefreshRequest, final ApiCallback<TransactionsRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRefreshValidateBeforeCall(transactionsRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsSync
     * @param transactionsSyncRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionssync">Get incremental transaction updates on an Item Documentation</a>
     */
    public okhttp3.Call transactionsSyncCall(TransactionsSyncRequest transactionsSyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsSyncRequest;

        // create path and map variables
        String localVarPath = "/transactions/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsSyncValidateBeforeCall(TransactionsSyncRequest transactionsSyncRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionsSyncRequest' is set
        if (transactionsSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsSyncRequest' when calling transactionsSync(Async)");
        }
        

        okhttp3.Call localVarCall = transactionsSyncCall(transactionsSyncRequest, _callback);
        return localVarCall;

    }

    /**
     * Get incremental transaction updates on an Item
     * The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsSyncRequest  (required)
     * @return TransactionsSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionssync">Get incremental transaction updates on an Item Documentation</a>
     */
    public TransactionsSyncResponse transactionsSync(TransactionsSyncRequest transactionsSyncRequest) throws ApiException {
        ApiResponse<TransactionsSyncResponse> localVarResp = transactionsSyncWithHttpInfo(transactionsSyncRequest);
        return localVarResp.getData();
    }

    /**
     * Get incremental transaction updates on an Item
     * The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsSyncRequest  (required)
     * @return ApiResponse&lt;TransactionsSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionssync">Get incremental transaction updates on an Item Documentation</a>
     */
    public ApiResponse<TransactionsSyncResponse> transactionsSyncWithHttpInfo(TransactionsSyncRequest transactionsSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsSyncValidateBeforeCall(transactionsSyncRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get incremental transaction updates on an Item (asynchronously)
     * The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsSyncRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#transactionssync">Get incremental transaction updates on an Item Documentation</a>
     */
    public okhttp3.Call transactionsSyncAsync(TransactionsSyncRequest transactionsSyncRequest, final ApiCallback<TransactionsSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsSyncValidateBeforeCall(transactionsSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferAuthorizationCreate
     * @param transferAuthorizationCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferauthorizationcreate">Create a transfer authorization Documentation</a>
     */
    public okhttp3.Call transferAuthorizationCreateCall(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferAuthorizationCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/authorization/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferAuthorizationCreateValidateBeforeCall(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferAuthorizationCreateRequest' is set
        if (transferAuthorizationCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferAuthorizationCreateRequest' when calling transferAuthorizationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = transferAuthorizationCreateCall(transferAuthorizationCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a transfer authorization
     * Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
     * @param transferAuthorizationCreateRequest  (required)
     * @return TransferAuthorizationCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferauthorizationcreate">Create a transfer authorization Documentation</a>
     */
    public TransferAuthorizationCreateResponse transferAuthorizationCreate(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest) throws ApiException {
        ApiResponse<TransferAuthorizationCreateResponse> localVarResp = transferAuthorizationCreateWithHttpInfo(transferAuthorizationCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a transfer authorization
     * Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
     * @param transferAuthorizationCreateRequest  (required)
     * @return ApiResponse&lt;TransferAuthorizationCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferauthorizationcreate">Create a transfer authorization Documentation</a>
     */
    public ApiResponse<TransferAuthorizationCreateResponse> transferAuthorizationCreateWithHttpInfo(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferAuthorizationCreateValidateBeforeCall(transferAuthorizationCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferAuthorizationCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transfer authorization (asynchronously)
     * Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
     * @param transferAuthorizationCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferauthorizationcreate">Create a transfer authorization Documentation</a>
     */
    public okhttp3.Call transferAuthorizationCreateAsync(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, final ApiCallback<TransferAuthorizationCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferAuthorizationCreateValidateBeforeCall(transferAuthorizationCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferAuthorizationCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferCancel
     * @param transferCancelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfercancel">Cancel a transfer Documentation</a>
     */
    public okhttp3.Call transferCancelCall(TransferCancelRequest transferCancelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferCancelRequest;

        // create path and map variables
        String localVarPath = "/transfer/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferCancelValidateBeforeCall(TransferCancelRequest transferCancelRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferCancelRequest' is set
        if (transferCancelRequest == null) {
            throw new ApiException("Missing the required parameter 'transferCancelRequest' when calling transferCancel(Async)");
        }
        

        okhttp3.Call localVarCall = transferCancelCall(transferCancelRequest, _callback);
        return localVarCall;

    }

    /**
     * Cancel a transfer
     * Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
     * @param transferCancelRequest  (required)
     * @return TransferCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfercancel">Cancel a transfer Documentation</a>
     */
    public TransferCancelResponse transferCancel(TransferCancelRequest transferCancelRequest) throws ApiException {
        ApiResponse<TransferCancelResponse> localVarResp = transferCancelWithHttpInfo(transferCancelRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel a transfer
     * Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
     * @param transferCancelRequest  (required)
     * @return ApiResponse&lt;TransferCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfercancel">Cancel a transfer Documentation</a>
     */
    public ApiResponse<TransferCancelResponse> transferCancelWithHttpInfo(TransferCancelRequest transferCancelRequest) throws ApiException {
        okhttp3.Call localVarCall = transferCancelValidateBeforeCall(transferCancelRequest, null);
        Type localVarReturnType = new TypeToken<TransferCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a transfer (asynchronously)
     * Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
     * @param transferCancelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfercancel">Cancel a transfer Documentation</a>
     */
    public okhttp3.Call transferCancelAsync(TransferCancelRequest transferCancelRequest, final ApiCallback<TransferCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferCancelValidateBeforeCall(transferCancelRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferCreate
     * @param transferCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfercreate">Create a transfer Documentation</a>
     */
    public okhttp3.Call transferCreateCall(TransferCreateRequest transferCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferCreateValidateBeforeCall(TransferCreateRequest transferCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferCreateRequest' is set
        if (transferCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferCreateRequest' when calling transferCreate(Async)");
        }
        

        okhttp3.Call localVarCall = transferCreateCall(transferCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a transfer
     * Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
     * @param transferCreateRequest  (required)
     * @return TransferCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfercreate">Create a transfer Documentation</a>
     */
    public TransferCreateResponse transferCreate(TransferCreateRequest transferCreateRequest) throws ApiException {
        ApiResponse<TransferCreateResponse> localVarResp = transferCreateWithHttpInfo(transferCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a transfer
     * Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
     * @param transferCreateRequest  (required)
     * @return ApiResponse&lt;TransferCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfercreate">Create a transfer Documentation</a>
     */
    public ApiResponse<TransferCreateResponse> transferCreateWithHttpInfo(TransferCreateRequest transferCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferCreateValidateBeforeCall(transferCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transfer (asynchronously)
     * Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
     * @param transferCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfercreate">Create a transfer Documentation</a>
     */
    public okhttp3.Call transferCreateAsync(TransferCreateRequest transferCreateRequest, final ApiCallback<TransferCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferCreateValidateBeforeCall(transferCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferEventList
     * @param transferEventListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfereventlist">List transfer events Documentation</a>
     */
    public okhttp3.Call transferEventListCall(TransferEventListRequest transferEventListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferEventListRequest;

        // create path and map variables
        String localVarPath = "/transfer/event/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferEventListValidateBeforeCall(TransferEventListRequest transferEventListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferEventListRequest' is set
        if (transferEventListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferEventListRequest' when calling transferEventList(Async)");
        }
        

        okhttp3.Call localVarCall = transferEventListCall(transferEventListRequest, _callback);
        return localVarCall;

    }

    /**
     * List transfer events
     * Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
     * @param transferEventListRequest  (required)
     * @return TransferEventListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfereventlist">List transfer events Documentation</a>
     */
    public TransferEventListResponse transferEventList(TransferEventListRequest transferEventListRequest) throws ApiException {
        ApiResponse<TransferEventListResponse> localVarResp = transferEventListWithHttpInfo(transferEventListRequest);
        return localVarResp.getData();
    }

    /**
     * List transfer events
     * Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
     * @param transferEventListRequest  (required)
     * @return ApiResponse&lt;TransferEventListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfereventlist">List transfer events Documentation</a>
     */
    public ApiResponse<TransferEventListResponse> transferEventListWithHttpInfo(TransferEventListRequest transferEventListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferEventListValidateBeforeCall(transferEventListRequest, null);
        Type localVarReturnType = new TypeToken<TransferEventListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transfer events (asynchronously)
     * Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
     * @param transferEventListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfereventlist">List transfer events Documentation</a>
     */
    public okhttp3.Call transferEventListAsync(TransferEventListRequest transferEventListRequest, final ApiCallback<TransferEventListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferEventListValidateBeforeCall(transferEventListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferEventListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferEventSync
     * @param transferEventSyncRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfereventsync">Sync transfer events Documentation</a>
     */
    public okhttp3.Call transferEventSyncCall(TransferEventSyncRequest transferEventSyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferEventSyncRequest;

        // create path and map variables
        String localVarPath = "/transfer/event/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferEventSyncValidateBeforeCall(TransferEventSyncRequest transferEventSyncRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferEventSyncRequest' is set
        if (transferEventSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'transferEventSyncRequest' when calling transferEventSync(Async)");
        }
        

        okhttp3.Call localVarCall = transferEventSyncCall(transferEventSyncRequest, _callback);
        return localVarCall;

    }

    /**
     * Sync transfer events
     * &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
     * @param transferEventSyncRequest  (required)
     * @return TransferEventSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfereventsync">Sync transfer events Documentation</a>
     */
    public TransferEventSyncResponse transferEventSync(TransferEventSyncRequest transferEventSyncRequest) throws ApiException {
        ApiResponse<TransferEventSyncResponse> localVarResp = transferEventSyncWithHttpInfo(transferEventSyncRequest);
        return localVarResp.getData();
    }

    /**
     * Sync transfer events
     * &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
     * @param transferEventSyncRequest  (required)
     * @return ApiResponse&lt;TransferEventSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfereventsync">Sync transfer events Documentation</a>
     */
    public ApiResponse<TransferEventSyncResponse> transferEventSyncWithHttpInfo(TransferEventSyncRequest transferEventSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = transferEventSyncValidateBeforeCall(transferEventSyncRequest, null);
        Type localVarReturnType = new TypeToken<TransferEventSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync transfer events (asynchronously)
     * &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
     * @param transferEventSyncRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfereventsync">Sync transfer events Documentation</a>
     */
    public okhttp3.Call transferEventSyncAsync(TransferEventSyncRequest transferEventSyncRequest, final ApiCallback<TransferEventSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferEventSyncValidateBeforeCall(transferEventSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferEventSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferGet
     * @param transferGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferget">Retrieve a transfer Documentation</a>
     */
    public okhttp3.Call transferGetCall(TransferGetRequest transferGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferGetValidateBeforeCall(TransferGetRequest transferGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferGetRequest' is set
        if (transferGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferGetRequest' when calling transferGet(Async)");
        }
        

        okhttp3.Call localVarCall = transferGetCall(transferGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a transfer
     * The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
     * @param transferGetRequest  (required)
     * @return TransferGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferget">Retrieve a transfer Documentation</a>
     */
    public TransferGetResponse transferGet(TransferGetRequest transferGetRequest) throws ApiException {
        ApiResponse<TransferGetResponse> localVarResp = transferGetWithHttpInfo(transferGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a transfer
     * The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
     * @param transferGetRequest  (required)
     * @return ApiResponse&lt;TransferGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferget">Retrieve a transfer Documentation</a>
     */
    public ApiResponse<TransferGetResponse> transferGetWithHttpInfo(TransferGetRequest transferGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferGetValidateBeforeCall(transferGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a transfer (asynchronously)
     * The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
     * @param transferGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferget">Retrieve a transfer Documentation</a>
     */
    public okhttp3.Call transferGetAsync(TransferGetRequest transferGetRequest, final ApiCallback<TransferGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferGetValidateBeforeCall(transferGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferIntentCreate
     * @param transferIntentCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferintentcreate">Create a transfer intent object to invoke the Transfer UI Documentation</a>
     */
    public okhttp3.Call transferIntentCreateCall(TransferIntentCreateRequest transferIntentCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferIntentCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/intent/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferIntentCreateValidateBeforeCall(TransferIntentCreateRequest transferIntentCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferIntentCreateRequest' is set
        if (transferIntentCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferIntentCreateRequest' when calling transferIntentCreate(Async)");
        }
        

        okhttp3.Call localVarCall = transferIntentCreateCall(transferIntentCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a transfer intent object to invoke the Transfer UI
     * Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @param transferIntentCreateRequest  (required)
     * @return TransferIntentCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferintentcreate">Create a transfer intent object to invoke the Transfer UI Documentation</a>
     */
    public TransferIntentCreateResponse transferIntentCreate(TransferIntentCreateRequest transferIntentCreateRequest) throws ApiException {
        ApiResponse<TransferIntentCreateResponse> localVarResp = transferIntentCreateWithHttpInfo(transferIntentCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a transfer intent object to invoke the Transfer UI
     * Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @param transferIntentCreateRequest  (required)
     * @return ApiResponse&lt;TransferIntentCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferintentcreate">Create a transfer intent object to invoke the Transfer UI Documentation</a>
     */
    public ApiResponse<TransferIntentCreateResponse> transferIntentCreateWithHttpInfo(TransferIntentCreateRequest transferIntentCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferIntentCreateValidateBeforeCall(transferIntentCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferIntentCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transfer intent object to invoke the Transfer UI (asynchronously)
     * Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @param transferIntentCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferintentcreate">Create a transfer intent object to invoke the Transfer UI Documentation</a>
     */
    public okhttp3.Call transferIntentCreateAsync(TransferIntentCreateRequest transferIntentCreateRequest, final ApiCallback<TransferIntentCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferIntentCreateValidateBeforeCall(transferIntentCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferIntentCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferIntentGet
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferintentget">Retrieve more information about a transfer intent Documentation</a>
     */
    public okhttp3.Call transferIntentGetCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/transfer/intent/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferIntentGetValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling transferIntentGet(Async)");
        }
        

        okhttp3.Call localVarCall = transferIntentGetCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * Retrieve more information about a transfer intent
     * Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
     * @param requestBody  (required)
     * @return TransferIntentGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferintentget">Retrieve more information about a transfer intent Documentation</a>
     */
    public TransferIntentGetResponse transferIntentGet(Map<String, Object> requestBody) throws ApiException {
        ApiResponse<TransferIntentGetResponse> localVarResp = transferIntentGetWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * Retrieve more information about a transfer intent
     * Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
     * @param requestBody  (required)
     * @return ApiResponse&lt;TransferIntentGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferintentget">Retrieve more information about a transfer intent Documentation</a>
     */
    public ApiResponse<TransferIntentGetResponse> transferIntentGetWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = transferIntentGetValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<TransferIntentGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve more information about a transfer intent (asynchronously)
     * Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferintentget">Retrieve more information about a transfer intent Documentation</a>
     */
    public okhttp3.Call transferIntentGetAsync(Map<String, Object> requestBody, final ApiCallback<TransferIntentGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferIntentGetValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<TransferIntentGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferList
     * @param transferListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferlist">List transfers Documentation</a>
     */
    public okhttp3.Call transferListCall(TransferListRequest transferListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferListRequest;

        // create path and map variables
        String localVarPath = "/transfer/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferListValidateBeforeCall(TransferListRequest transferListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferListRequest' is set
        if (transferListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferListRequest' when calling transferList(Async)");
        }
        

        okhttp3.Call localVarCall = transferListCall(transferListRequest, _callback);
        return localVarCall;

    }

    /**
     * List transfers
     * Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
     * @param transferListRequest  (required)
     * @return TransferListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferlist">List transfers Documentation</a>
     */
    public TransferListResponse transferList(TransferListRequest transferListRequest) throws ApiException {
        ApiResponse<TransferListResponse> localVarResp = transferListWithHttpInfo(transferListRequest);
        return localVarResp.getData();
    }

    /**
     * List transfers
     * Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
     * @param transferListRequest  (required)
     * @return ApiResponse&lt;TransferListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferlist">List transfers Documentation</a>
     */
    public ApiResponse<TransferListResponse> transferListWithHttpInfo(TransferListRequest transferListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferListValidateBeforeCall(transferListRequest, null);
        Type localVarReturnType = new TypeToken<TransferListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transfers (asynchronously)
     * Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
     * @param transferListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferlist">List transfers Documentation</a>
     */
    public okhttp3.Call transferListAsync(TransferListRequest transferListRequest, final ApiCallback<TransferListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferListValidateBeforeCall(transferListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRepaymentList
     * @param transferRepaymentListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferrepaymentlist">Lists historical repayments Documentation</a>
     */
    public okhttp3.Call transferRepaymentListCall(TransferRepaymentListRequest transferRepaymentListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRepaymentListRequest;

        // create path and map variables
        String localVarPath = "/transfer/repayment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRepaymentListValidateBeforeCall(TransferRepaymentListRequest transferRepaymentListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferRepaymentListRequest' is set
        if (transferRepaymentListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRepaymentListRequest' when calling transferRepaymentList(Async)");
        }
        

        okhttp3.Call localVarCall = transferRepaymentListCall(transferRepaymentListRequest, _callback);
        return localVarCall;

    }

    /**
     * Lists historical repayments
     * The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
     * @param transferRepaymentListRequest  (required)
     * @return TransferRepaymentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferrepaymentlist">Lists historical repayments Documentation</a>
     */
    public TransferRepaymentListResponse transferRepaymentList(TransferRepaymentListRequest transferRepaymentListRequest) throws ApiException {
        ApiResponse<TransferRepaymentListResponse> localVarResp = transferRepaymentListWithHttpInfo(transferRepaymentListRequest);
        return localVarResp.getData();
    }

    /**
     * Lists historical repayments
     * The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
     * @param transferRepaymentListRequest  (required)
     * @return ApiResponse&lt;TransferRepaymentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferrepaymentlist">Lists historical repayments Documentation</a>
     */
    public ApiResponse<TransferRepaymentListResponse> transferRepaymentListWithHttpInfo(TransferRepaymentListRequest transferRepaymentListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRepaymentListValidateBeforeCall(transferRepaymentListRequest, null);
        Type localVarReturnType = new TypeToken<TransferRepaymentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists historical repayments (asynchronously)
     * The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
     * @param transferRepaymentListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferrepaymentlist">Lists historical repayments Documentation</a>
     */
    public okhttp3.Call transferRepaymentListAsync(TransferRepaymentListRequest transferRepaymentListRequest, final ApiCallback<TransferRepaymentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRepaymentListValidateBeforeCall(transferRepaymentListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRepaymentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRepaymentReturnList
     * @param transferRepaymentReturnListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferrepaymentreturnlist">List the returns included in a repayment Documentation</a>
     */
    public okhttp3.Call transferRepaymentReturnListCall(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRepaymentReturnListRequest;

        // create path and map variables
        String localVarPath = "/transfer/repayment/return/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRepaymentReturnListValidateBeforeCall(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferRepaymentReturnListRequest' is set
        if (transferRepaymentReturnListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRepaymentReturnListRequest' when calling transferRepaymentReturnList(Async)");
        }
        

        okhttp3.Call localVarCall = transferRepaymentReturnListCall(transferRepaymentReturnListRequest, _callback);
        return localVarCall;

    }

    /**
     * List the returns included in a repayment
     * The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @param transferRepaymentReturnListRequest  (required)
     * @return TransferRepaymentReturnListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferrepaymentreturnlist">List the returns included in a repayment Documentation</a>
     */
    public TransferRepaymentReturnListResponse transferRepaymentReturnList(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest) throws ApiException {
        ApiResponse<TransferRepaymentReturnListResponse> localVarResp = transferRepaymentReturnListWithHttpInfo(transferRepaymentReturnListRequest);
        return localVarResp.getData();
    }

    /**
     * List the returns included in a repayment
     * The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @param transferRepaymentReturnListRequest  (required)
     * @return ApiResponse&lt;TransferRepaymentReturnListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferrepaymentreturnlist">List the returns included in a repayment Documentation</a>
     */
    public ApiResponse<TransferRepaymentReturnListResponse> transferRepaymentReturnListWithHttpInfo(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRepaymentReturnListValidateBeforeCall(transferRepaymentReturnListRequest, null);
        Type localVarReturnType = new TypeToken<TransferRepaymentReturnListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the returns included in a repayment (asynchronously)
     * The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @param transferRepaymentReturnListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transferrepaymentreturnlist">List the returns included in a repayment Documentation</a>
     */
    public okhttp3.Call transferRepaymentReturnListAsync(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, final ApiCallback<TransferRepaymentReturnListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRepaymentReturnListValidateBeforeCall(transferRepaymentReturnListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRepaymentReturnListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferSweepGet
     * @param transferSweepGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfersweepget">Retrieve a sweep Documentation</a>
     */
    public okhttp3.Call transferSweepGetCall(TransferSweepGetRequest transferSweepGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferSweepGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/sweep/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferSweepGetValidateBeforeCall(TransferSweepGetRequest transferSweepGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferSweepGetRequest' is set
        if (transferSweepGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferSweepGetRequest' when calling transferSweepGet(Async)");
        }
        

        okhttp3.Call localVarCall = transferSweepGetCall(transferSweepGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a sweep
     * The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param transferSweepGetRequest  (required)
     * @return TransferSweepGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfersweepget">Retrieve a sweep Documentation</a>
     */
    public TransferSweepGetResponse transferSweepGet(TransferSweepGetRequest transferSweepGetRequest) throws ApiException {
        ApiResponse<TransferSweepGetResponse> localVarResp = transferSweepGetWithHttpInfo(transferSweepGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a sweep
     * The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param transferSweepGetRequest  (required)
     * @return ApiResponse&lt;TransferSweepGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfersweepget">Retrieve a sweep Documentation</a>
     */
    public ApiResponse<TransferSweepGetResponse> transferSweepGetWithHttpInfo(TransferSweepGetRequest transferSweepGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferSweepGetValidateBeforeCall(transferSweepGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferSweepGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a sweep (asynchronously)
     * The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param transferSweepGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfersweepget">Retrieve a sweep Documentation</a>
     */
    public okhttp3.Call transferSweepGetAsync(TransferSweepGetRequest transferSweepGetRequest, final ApiCallback<TransferSweepGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferSweepGetValidateBeforeCall(transferSweepGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferSweepGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferSweepList
     * @param transferSweepListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfersweeplist">List sweeps Documentation</a>
     */
    public okhttp3.Call transferSweepListCall(TransferSweepListRequest transferSweepListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferSweepListRequest;

        // create path and map variables
        String localVarPath = "/transfer/sweep/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferSweepListValidateBeforeCall(TransferSweepListRequest transferSweepListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transferSweepListRequest' is set
        if (transferSweepListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferSweepListRequest' when calling transferSweepList(Async)");
        }
        

        okhttp3.Call localVarCall = transferSweepListCall(transferSweepListRequest, _callback);
        return localVarCall;

    }

    /**
     * List sweeps
     * The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
     * @param transferSweepListRequest  (required)
     * @return TransferSweepListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfersweeplist">List sweeps Documentation</a>
     */
    public TransferSweepListResponse transferSweepList(TransferSweepListRequest transferSweepListRequest) throws ApiException {
        ApiResponse<TransferSweepListResponse> localVarResp = transferSweepListWithHttpInfo(transferSweepListRequest);
        return localVarResp.getData();
    }

    /**
     * List sweeps
     * The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
     * @param transferSweepListRequest  (required)
     * @return ApiResponse&lt;TransferSweepListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfersweeplist">List sweeps Documentation</a>
     */
    public ApiResponse<TransferSweepListResponse> transferSweepListWithHttpInfo(TransferSweepListRequest transferSweepListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferSweepListValidateBeforeCall(transferSweepListRequest, null);
        Type localVarReturnType = new TypeToken<TransferSweepListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List sweeps (asynchronously)
     * The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
     * @param transferSweepListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products#transfersweeplist">List sweeps Documentation</a>
     */
    public okhttp3.Call transferSweepListAsync(TransferSweepListRequest transferSweepListRequest, final ApiCallback<TransferSweepListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferSweepListValidateBeforeCall(transferSweepListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferSweepListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletGet
     * @param walletGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#walletget">Fetch an e-wallet Documentation</a>
     */
    public okhttp3.Call walletGetCall(WalletGetRequest walletGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletGetRequest;

        // create path and map variables
        String localVarPath = "/wallet/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletGetValidateBeforeCall(WalletGetRequest walletGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'walletGetRequest' is set
        if (walletGetRequest == null) {
            throw new ApiException("Missing the required parameter 'walletGetRequest' when calling walletGet(Async)");
        }
        

        okhttp3.Call localVarCall = walletGetCall(walletGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Fetch an e-wallet
     * Fetch an e-wallet. The response includes the current balance. 
     * @param walletGetRequest  (required)
     * @return WalletGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#walletget">Fetch an e-wallet Documentation</a>
     */
    public WalletGetResponse walletGet(WalletGetRequest walletGetRequest) throws ApiException {
        ApiResponse<WalletGetResponse> localVarResp = walletGetWithHttpInfo(walletGetRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch an e-wallet
     * Fetch an e-wallet. The response includes the current balance. 
     * @param walletGetRequest  (required)
     * @return ApiResponse&lt;WalletGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#walletget">Fetch an e-wallet Documentation</a>
     */
    public ApiResponse<WalletGetResponse> walletGetWithHttpInfo(WalletGetRequest walletGetRequest) throws ApiException {
        okhttp3.Call localVarCall = walletGetValidateBeforeCall(walletGetRequest, null);
        Type localVarReturnType = new TypeToken<WalletGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an e-wallet (asynchronously)
     * Fetch an e-wallet. The response includes the current balance. 
     * @param walletGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#walletget">Fetch an e-wallet Documentation</a>
     */
    public okhttp3.Call walletGetAsync(WalletGetRequest walletGetRequest, final ApiCallback<WalletGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletGetValidateBeforeCall(walletGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletTransactionExecute
     * @param walletTransactionExecuteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#wallettransactionexecute">Execute a transaction using an e-wallet Documentation</a>
     */
    public okhttp3.Call walletTransactionExecuteCall(WalletTransactionExecuteRequest walletTransactionExecuteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletTransactionExecuteRequest;

        // create path and map variables
        String localVarPath = "/wallet/transaction/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletTransactionExecuteValidateBeforeCall(WalletTransactionExecuteRequest walletTransactionExecuteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'walletTransactionExecuteRequest' is set
        if (walletTransactionExecuteRequest == null) {
            throw new ApiException("Missing the required parameter 'walletTransactionExecuteRequest' when calling walletTransactionExecute(Async)");
        }
        

        okhttp3.Call localVarCall = walletTransactionExecuteCall(walletTransactionExecuteRequest, _callback);
        return localVarCall;

    }

    /**
     * Execute a transaction using an e-wallet
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
     * @param walletTransactionExecuteRequest  (required)
     * @return WalletTransactionExecuteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#wallettransactionexecute">Execute a transaction using an e-wallet Documentation</a>
     */
    public WalletTransactionExecuteResponse walletTransactionExecute(WalletTransactionExecuteRequest walletTransactionExecuteRequest) throws ApiException {
        ApiResponse<WalletTransactionExecuteResponse> localVarResp = walletTransactionExecuteWithHttpInfo(walletTransactionExecuteRequest);
        return localVarResp.getData();
    }

    /**
     * Execute a transaction using an e-wallet
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
     * @param walletTransactionExecuteRequest  (required)
     * @return ApiResponse&lt;WalletTransactionExecuteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#wallettransactionexecute">Execute a transaction using an e-wallet Documentation</a>
     */
    public ApiResponse<WalletTransactionExecuteResponse> walletTransactionExecuteWithHttpInfo(WalletTransactionExecuteRequest walletTransactionExecuteRequest) throws ApiException {
        okhttp3.Call localVarCall = walletTransactionExecuteValidateBeforeCall(walletTransactionExecuteRequest, null);
        Type localVarReturnType = new TypeToken<WalletTransactionExecuteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute a transaction using an e-wallet (asynchronously)
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
     * @param walletTransactionExecuteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#wallettransactionexecute">Execute a transaction using an e-wallet Documentation</a>
     */
    public okhttp3.Call walletTransactionExecuteAsync(WalletTransactionExecuteRequest walletTransactionExecuteRequest, final ApiCallback<WalletTransactionExecuteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletTransactionExecuteValidateBeforeCall(walletTransactionExecuteRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletTransactionExecuteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletTransactionsList
     * @param walletTransactionsListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#wallettransactionslist">List e-wallet transactions Documentation</a>
     */
    public okhttp3.Call walletTransactionsListCall(WalletTransactionsListRequest walletTransactionsListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletTransactionsListRequest;

        // create path and map variables
        String localVarPath = "/wallet/transactions/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletTransactionsListValidateBeforeCall(WalletTransactionsListRequest walletTransactionsListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'walletTransactionsListRequest' is set
        if (walletTransactionsListRequest == null) {
            throw new ApiException("Missing the required parameter 'walletTransactionsListRequest' when calling walletTransactionsList(Async)");
        }
        

        okhttp3.Call localVarCall = walletTransactionsListCall(walletTransactionsListRequest, _callback);
        return localVarCall;

    }

    /**
     * List e-wallet transactions
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
     * @param walletTransactionsListRequest  (required)
     * @return WalletTransactionsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#wallettransactionslist">List e-wallet transactions Documentation</a>
     */
    public WalletTransactionsListResponse walletTransactionsList(WalletTransactionsListRequest walletTransactionsListRequest) throws ApiException {
        ApiResponse<WalletTransactionsListResponse> localVarResp = walletTransactionsListWithHttpInfo(walletTransactionsListRequest);
        return localVarResp.getData();
    }

    /**
     * List e-wallet transactions
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
     * @param walletTransactionsListRequest  (required)
     * @return ApiResponse&lt;WalletTransactionsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#wallettransactionslist">List e-wallet transactions Documentation</a>
     */
    public ApiResponse<WalletTransactionsListResponse> walletTransactionsListWithHttpInfo(WalletTransactionsListRequest walletTransactionsListRequest) throws ApiException {
        okhttp3.Call localVarCall = walletTransactionsListValidateBeforeCall(walletTransactionsListRequest, null);
        Type localVarReturnType = new TypeToken<WalletTransactionsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List e-wallet transactions (asynchronously)
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
     * @param walletTransactionsListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/#wallettransactionslist">List e-wallet transactions Documentation</a>
     */
    public okhttp3.Call walletTransactionsListAsync(WalletTransactionsListRequest walletTransactionsListRequest, final ApiCallback<WalletTransactionsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletTransactionsListValidateBeforeCall(walletTransactionsListRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletTransactionsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookVerificationKeyGet
     * @param webhookVerificationKeyGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/webhooks/webhook-verification/#webhook_verification_keyget">Get webhook verification key Documentation</a>
     */
    public okhttp3.Call webhookVerificationKeyGetCall(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookVerificationKeyGetRequest;

        // create path and map variables
        String localVarPath = "/webhook_verification_key/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookVerificationKeyGetValidateBeforeCall(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhookVerificationKeyGetRequest' is set
        if (webhookVerificationKeyGetRequest == null) {
            throw new ApiException("Missing the required parameter 'webhookVerificationKeyGetRequest' when calling webhookVerificationKeyGet(Async)");
        }
        

        okhttp3.Call localVarCall = webhookVerificationKeyGetCall(webhookVerificationKeyGetRequest, _callback);
        return localVarCall;

    }

    /**
     * Get webhook verification key
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @param webhookVerificationKeyGetRequest  (required)
     * @return WebhookVerificationKeyGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/webhooks/webhook-verification/#webhook_verification_keyget">Get webhook verification key Documentation</a>
     */
    public WebhookVerificationKeyGetResponse webhookVerificationKeyGet(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest) throws ApiException {
        ApiResponse<WebhookVerificationKeyGetResponse> localVarResp = webhookVerificationKeyGetWithHttpInfo(webhookVerificationKeyGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get webhook verification key
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @param webhookVerificationKeyGetRequest  (required)
     * @return ApiResponse&lt;WebhookVerificationKeyGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/webhooks/webhook-verification/#webhook_verification_keyget">Get webhook verification key Documentation</a>
     */
    public ApiResponse<WebhookVerificationKeyGetResponse> webhookVerificationKeyGetWithHttpInfo(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest) throws ApiException {
        okhttp3.Call localVarCall = webhookVerificationKeyGetValidateBeforeCall(webhookVerificationKeyGetRequest, null);
        Type localVarReturnType = new TypeToken<WebhookVerificationKeyGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webhook verification key (asynchronously)
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @param webhookVerificationKeyGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/webhooks/webhook-verification/#webhook_verification_keyget">Get webhook verification key Documentation</a>
     */
    public okhttp3.Call webhookVerificationKeyGetAsync(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, final ApiCallback<WebhookVerificationKeyGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookVerificationKeyGetValidateBeforeCall(webhookVerificationKeyGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhookVerificationKeyGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
