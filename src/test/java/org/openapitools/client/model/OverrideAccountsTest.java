/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AccountSubtype;
import org.openapitools.client.model.HoldingsOverride;
import org.openapitools.client.model.IncomeOverride;
import org.openapitools.client.model.InflowModel;
import org.openapitools.client.model.InvestmentsTransactionsOverride;
import org.openapitools.client.model.LiabilityOverride;
import org.openapitools.client.model.Meta;
import org.openapitools.client.model.Numbers;
import org.openapitools.client.model.OverrideAccountType;
import org.openapitools.client.model.OwnerOverride;
import org.openapitools.client.model.TransactionOverride;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for OverrideAccounts
 */
public class OverrideAccountsTest {
    private final OverrideAccounts model = new OverrideAccounts();

    /**
     * Model tests for OverrideAccounts
     */
    @Test
    public void testOverrideAccounts() {
        // TODO: test OverrideAccounts
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'subtype'
     */
    @Test
    public void subtypeTest() {
        // TODO: test subtype
    }

    /**
     * Test the property 'startingBalance'
     */
    @Test
    public void startingBalanceTest() {
        // TODO: test startingBalance
    }

    /**
     * Test the property 'forceAvailableBalance'
     */
    @Test
    public void forceAvailableBalanceTest() {
        // TODO: test forceAvailableBalance
    }

    /**
     * Test the property 'currency'
     */
    @Test
    public void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'meta'
     */
    @Test
    public void metaTest() {
        // TODO: test meta
    }

    /**
     * Test the property 'numbers'
     */
    @Test
    public void numbersTest() {
        // TODO: test numbers
    }

    /**
     * Test the property 'transactions'
     */
    @Test
    public void transactionsTest() {
        // TODO: test transactions
    }

    /**
     * Test the property 'holdings'
     */
    @Test
    public void holdingsTest() {
        // TODO: test holdings
    }

    /**
     * Test the property 'investmentTransactions'
     */
    @Test
    public void investmentTransactionsTest() {
        // TODO: test investmentTransactions
    }

    /**
     * Test the property 'identity'
     */
    @Test
    public void identityTest() {
        // TODO: test identity
    }

    /**
     * Test the property 'liability'
     */
    @Test
    public void liabilityTest() {
        // TODO: test liability
    }

    /**
     * Test the property 'inflowModel'
     */
    @Test
    public void inflowModelTest() {
        // TODO: test inflowModel
    }

    /**
     * Test the property 'income'
     */
    @Test
    public void incomeTest() {
        // TODO: test income
    }

}
